(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 15 2 77 77 77 19 10 3 29) #A(t (4) (#1="SWANK-MATCH" ("CL") ("MATCH") si::dodefpackage)) #2=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/swank-match.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#1# si::select-package)) #2# 3075) #Y(si::bytecodes nil nil (15 0 1 8 12 14 9 9 2 19 4 10 1 0 73 29) #3=#A(t (11) (swank-match::match #:g2037 #:g2036 #:g2038 si::dm-too-few-arguments swank-match::expression swank-match::patterns swank-match::select-match #Y(swank-match::match nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 15 7 13 1 10 0 7 3 73 29) #3# #2# 3104) t si::fset)) #2# 3104) #Y(si::bytecodes nil nil (15 0 1 16 12 14 17 9 2 19 4 18 1 0 73 29) #4=#A(t (19) (swank-match::select-match #:g2040 #:g2039 #:g2041 si::dm-too-few-arguments swank-match::expression swank-match::patterns atom swank-match::do-let gensym swank-match::key swank-match::expand-select-patterns swank-match::cbody cond swank-match::cform let #Y(swank-match::select-match nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 10 1 16 7 76 45 8 10 0 39 6 19 0 9 38 3 10 2 45 10 13 0 13 2 19 2 11 45 12 15 13 10 0 7 2 45 14 10 3 39 19 15 15 13 2 10 5 6 2 6 1 12 10 0 6 3 73 38 4 10 0 73 43 4 29) #4# #2# 3194) t si::fset)) #2# 3194) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #5=#A(t (10) (swank-match::expand-select-patterns swank-match::key swank-match::patterns second swank-match::=> eq swank-match::expand-select-patterns-style-2 swank-match::expand-select-patterns-style-1 #Y(swank-match::expand-select-patterns nil nil (24 45 1 24 45 2 26 10 0 16 3 12 1 4 17 5 39 10 13 1 13 0 19 2 6 38 8 13 1 13 0 19 2 7 29) #5# #2# 3514) si::fset)) #2# 3514) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #6=#A(t (19) (swank-match::expand-select-patterns-style-1 swank-match::key swank-match::patterns t error "Case select pattern match failure on ~S" caar swank-match::pattern cdar swank-match::actions rest swank-match::compile-select-test swank-match::test swank-match::compile-select-bindings swank-match::bindings let eq #Y(swank-match::expand-select-patterns-style-1 nil nil (24 45 1 24 45 2 26 10 0 76 39 18 15 3 15 4 15 5 10 1 6 3 6 2 6 1 73 38 86 10 0 16 6 45 7 10 1 16 8 45 9 10 2 5 45 10 13 4 13 2 19 2 11 45 12 13 5 13 3 13 2 19 3 13 45 14 10 0 39 16 13 1 15 15 13 0 10 3 7 3 6 2 73 38 8 13 1 10 3 7 2 73 12 13 1 11 3 17 16 76 39 8 13 6 13 2 19 2 0 7 2 73 43 5 29) #6# #2# 3704) si::fset)) #2# 3704) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 1 0 73 29) #7=#A(t (24) (swank-match::expand-select-patterns-style-2 swank-match::key swank-match::patterns t error "Case select pattern match failure on ~S" length < second swank-match::=> eq "Illegal patterns: ~S" swank-match::pattern third swank-match::actions cdddr rest swank-match::compile-select-test swank-match::test swank-match::compile-select-bindings swank-match::bindings let #Y(swank-match::expand-select-patterns-style-2 nil nil (24 45 1 24 45 2 26 10 0 76 39 18 15 3 15 4 15 5 10 1 6 3 6 2 6 1 73 38 119 10 0 16 6 12 9 3 19 2 7 40 11 10 0 16 8 12 1 9 17 10 76 39 8 15 11 13 0 19 2 4 10 0 4 45 12 10 1 16 13 6 1 45 14 10 2 16 15 45 16 13 4 13 2 19 2 17 45 18 13 5 13 3 13 2 19 3 19 45 20 10 0 39 16 13 1 15 21 13 0 10 3 7 3 6 2 73 38 8 13 1 10 3 7 2 73 12 13 1 11 3 17 10 76 39 8 13 6 13 2 19 2 0 7 2 73 43 5 29) #7# #2# 4302) si::fset)) #2# 4302) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #8=#A(t (12) (swank-match::compile-select-test swank-match::key swank-match::pattern t swank-match::compile-select-tests remove swank-match::tests length = and #Y(swank-match::compile-select-test nil nil (24 45 1 24 45 2 26 14 3 13 1 13 0 19 2 4 12 19 2 5 45 6 10 0 76 39 6 11 3 73 38 26 10 0 16 7 12 9 1 19 2 8 39 7 10 0 4 73 38 8 15 9 10 0 7 2 73 43 1 29) #8# #2# 5121) si::fset)) #2# 5121) #Y(si::bytecodes nil nil (15 0 1 20 12 19 2 21 1 0 73 29) #9=#A(t (22) (swank-match::compile-select-tests swank-match::key swank-match::pattern constantp numberp eql symbolp eq equal (t) swank-match::select-double-match? third append swank-match::select-predicate? second consp swank-match::!cs-car swank-match::!cs-cdr "Illegal select pattern: ~S" error #Y(swank-match::compile-select-tests nil nil (24 45 1 24 45 2 26 13 0 19 1 3 39 38 10 0 16 4 39 6 1 5 73 38 15 10 0 16 6 39 6 1 7 73 38 4 1 8 73 12 13 1 10 0 6 3 6 1 73 38 136 10 0 16 6 39 6 1 9 73 38 125 13 0 19 1 10 39 27 13 1 10 0 4 12 19 2 0 12 13 1 10 0 16 11 12 19 2 0 12 19 2 12 38 92 13 0 19 1 13 39 30 10 0 4 16 14 12 10 1 6 2 6 1 12 13 1 10 0 16 14 12 19 2 0 12 19 2 12 38 56 10 0 16 15 39 43 15 15 10 1 6 2 6 1 12 13 1 19 1 16 12 10 0 4 12 19 2 0 12 13 1 19 1 17 12 10 0 5 12 19 2 0 12 19 3 12 38 8 15 18 13 0 19 2 19 29) #9# #2# 5471) si::fset)) #2# 5471) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #10=#A(t (17) (swank-match::compile-select-bindings swank-match::key swank-match::pattern swank-match::action constantp symbolp swank-match::select!-in-tree swank-match::select-double-match? third append swank-match::select-predicate? second consp swank-match::!cs-car swank-match::!cs-cdr #Y(swank-match::compile-select-bindings nil nil (24 45 1 24 45 2 24 45 3 26 13 1 19 1 4 39 5 75 73 38 131 10 1 16 5 39 25 13 1 13 0 19 2 6 39 12 13 1 10 2 6 2 6 1 73 38 3 75 73 38 101 13 1 19 1 7 39 31 13 2 10 1 4 12 13 0 19 3 0 12 13 2 10 1 16 8 12 13 0 19 3 0 12 19 2 9 38 64 13 1 19 1 10 39 15 13 2 10 1 16 11 12 13 0 19 3 0 38 43 10 1 16 12 73 39 36 13 2 19 1 13 12 10 1 4 12 13 0 19 3 0 12 13 2 19 1 14 12 10 1 5 12 13 0 19 3 0 12 19 2 9 29) #10# #2# 6492) si::fset)) #2# 6492) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #11=#A(t (7) (swank-match::select!-in-tree atom swank-match::tree eq consp #Y(swank-match::select!-in-tree nil nil (24 45 1 24 45 2 26 13 1 10 0 17 3 73 40 29 10 0 16 4 73 39 22 13 1 10 0 4 12 19 2 0 73 40 10 13 1 10 0 5 12 19 2 0 29) #11# #2# 7268) si::fset)) #2# 7268) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #12=#A(t (10) (swank-match::select-double-match? swank-match::pattern consp cddr cdddr second = eq #Y(swank-match::select-double-match? nil nil (24 45 1 26 10 0 16 2 73 39 35 10 0 5 16 2 73 39 27 10 0 16 3 16 2 73 39 18 10 0 16 4 76 73 39 10 10 0 16 5 12 1 6 17 7 29) #12# #2# 7454) si::fset)) #2# 7454) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #13=#A(t (9) (swank-match::select-predicate? swank-match::pattern consp cddr caar function eq #Y(swank-match::select-predicate? nil nil (24 45 1 26 10 0 16 2 73 39 52 10 0 5 16 2 73 39 44 10 0 16 3 76 73 39 36 10 0 4 16 2 73 39 28 10 0 4 5 16 2 73 39 19 10 0 4 16 3 76 73 39 10 10 0 16 4 12 1 5 17 6 29) #13# #2# 7661) si::fset)) #2# 7661) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #14=#A(t (7) (swank-match::!cs-car exp car ((car . caar) (cdr . cadr) (caar . caaar) (cadr . caadr) (cdar . cadar) (cddr . caddr) (caaar . caaaar) (caadr . caaadr) (cadar . caadar) (caddr . caaddr) (cdaar . cadaar) (cdadr . cadadr) (cddar . caddar) (cdddr . cadddr)) swank-match::!cs-car/cdr #Y(swank-match::!cs-car nil nil (24 45 1 26 15 2 13 0 15 3 19 3 4 29) #14# #2# 7964) si::fset)) #2# 7964) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #15=#A(t (7) (swank-match::!cs-cdr exp cdr ((car . cdar) (cdr . cddr) (caar . cdaar) (cadr . cdadr) (cdar . cddar) (cddr . cdddr) (caaar . cdaaar) (caadr . cdaadr) (cadar . cdadar) (caddr . cdaddr) (cdaar . cddaar) (cdadr . cddadr) (cddar . cdddar) (cdddr . cddddr)) swank-match::!cs-car/cdr #Y(swank-match::!cs-cdr nil nil (24 45 1 26 15 2 13 0 15 3 19 3 4 29) #15# #2# 8337) si::fset)) #2# 8337) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #16=#A(t (12) (swank-match::!cs-car/cdr swank-match::op exp swank-match::table consp length = assoc swank-match::replacement second #Y(swank-match::!cs-car/cdr nil nil (24 45 1 24 45 2 24 45 3 26 10 1 16 4 39 11 10 1 16 5 12 9 2 19 2 6 39 40 10 1 4 12 13 0 19 2 7 45 8 10 0 39 14 10 0 5 12 10 2 16 9 6 2 73 38 8 13 3 10 2 6 2 73 43 1 38 8 13 2 10 1 6 2 73 29) #16# #2# 8724) si::fset)) #2# 8724))
