(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SWANK" si::select-package)) #1=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/contrib/swank-mrepl.lisp" 0) #Y(si::bytecodes nil nil (1 0 45 1 15 2 15 3 15 4 14 5 15 6 10 0 7 3 12 14 7 10 0 7 2 6 5 16 8 43 1 29) #A(t (9) ((swank::*emacs-connection* swank::channel swank::channel-id swank::define-channel-method swank::defslimefun swank::destructure-case swank::log-event swank::process-requests swank::send-to-remote-channel swank::use-threads-p swank::wait-for-event swank::with-bindings swank::with-connection swank::with-top-level-restart swank::with-slime-interrupts) swank::api defpackage #:swank-api (:use) :import-from #:swank :export eval)) #1# 75) #Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 15 2 77 77 77 19 10 3 29) #A(t (4) (#2="SWANK-MREPL" ("CL" "SWANK-API") ("CREATE-MREPL") si::dodefpackage)) #1# 656) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#2# si::select-package)) #1# 738) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 29) #A(t (4) (swank-mrepl::listener-channel (swank::channel) ((:initargs (:remote) :name swank-mrepl::remote) (:initargs (:env) :name swank-mrepl::env) (:initform :eval :name swank-mrepl::mode) (:initform nil :name swank-mrepl::tag)) clos::load-defclass)) #1# 767) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #3=#A(t (12) (swank-mrepl::package-prompt package swank-mrepl::x swank-mrepl::y length <= #Y(nil nil nil (24 45 2 24 45 3 26 10 1 16 4 12 10 0 16 4 12 19 2 5 39 6 10 1 73 38 4 10 0 73 29) #3# #1# 914) package-name package-nicknames reduce #Y(swank-mrepl::package-prompt nil nil (24 45 1 26 34 6 12 10 0 16 7 12 10 0 16 8 3 12 19 2 9 29) #3# #1# 914) si::fset)) #1# 914) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 15 0 1 0 16 29 12 19 2 30 29) #4=#A(t (31) (swank-mrepl::create-mrepl swank-mrepl::remote *package* swank-mrepl::pkg swank::*emacs-connection* swank-mrepl::conn swank::use-threads-p swank-mrepl::spawn-listener-thread swank-mrepl::thread swank-mrepl::listener-channel :remote :thread make-instance swank-mrepl::ch #:g5887 swank-mrepl::env #:g5888 swank-mrepl::initial-listener-env #:g5889 (setf slot-value) :serve-channel swank-backend::send swank::channel-id swank-backend::current-thread swank-backend::thread-id package-name swank-mrepl::package-prompt #Y(swank-mrepl::create-mrepl nil nil (24 45 1 26 11 2 45 3 11 4 45 5 19 0 6 39 8 13 0 19 1 7 38 2 75 45 8 15 9 14 10 13 3 14 11 13 0 19 5 12 45 13 10 0 45 14 1 15 45 16 13 2 19 1 17 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 10 1 39 13 13 1 14 20 10 0 6 2 12 19 2 21 13 0 19 1 22 12 10 1 73 40 4 19 0 23 12 19 1 24 12 10 3 16 25 12 13 3 19 1 26 6 4 73 43 4 29) #4# #1# 1075) si::fset symbol-package export)) #1# 1075) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #5=#A(t (9) (swank-mrepl::initial-listener-env swank-mrepl::listener *package* *standard-output* swank-mrepl::make-listener-output-stream *standard-input* swank-mrepl::make-listener-input-stream #Y(swank-mrepl::initial-listener-env nil nil (24 45 1 26 15 2 11 2 7 2 12 15 3 13 0 19 1 4 7 2 12 15 5 13 0 19 1 6 7 2 6 3 73 29) #5# #1# 1623) si::fset)) #1# 1623) #Y(si::bytecodes nil nil (15 0 1 73 12 19 2 74 1 0 73 29) #6=#A(t (75) (swank-mrepl::spawn-listener-thread swank-mrepl::connection swank-backend::receive #:|tmp-5918| #:|op-5916| #:|rand-5917| :serve-channel #:g5919 #:g5920 si::dm-too-few-arguments swank-mrepl::c si::dm-too-many-arguments 0 #:g5930 #:g5931 :name abort :function si::temp #Y(nil nil nil (27 45 18 10 0 51 2 35 1 0 29) #6# #1# 1829) :report-function stream "Return to SLIME's top level." write-string #Y(nil nil nil (24 45 21 26 15 22 13 0 19 2 23 29) #6# #1# 1829) si::make-restart si::*restart-clusters* find-restart swank::*sldb-quit-restart* swank::process-requests swank::v swank::force-user-output swank-mrepl::drop-unprocessed-events #Y(nil nil nil (25 40 2 77 46 30 26 19 0 31 13 5 19 1 32 29) #6# #1# 1829) apply #Y(nil nil nil (26 57 13 60 66 75 45 14 57 12 61 1 43 14 15 15 16 14 17 34 19 12 14 20 34 24 12 19 6 25 6 1 12 11 26 3 48 26 15 16 19 1 27 48 28 77 19 1 29 44 1 36 2 44 1 34 33 12 13 1 19 2 34 36 2 62 73 43 1 63 29) #6# #1# 1829) function swank::connection swank::*emacs-connection* eq swank::*send-counter* swank-backend::*pending-slime-interrupts* swank::*slime-interrupts-enabled* #:g5934 #:g5935 #:g5936 swank::swank-error #Y(nil nil nil (24 45 18 26 10 0 51 2 35 1 0 29) #6# #1# 1829) si::*handler-clusters* condition swank::*debug-on-swank-protocol-error* swank::invoke-default-debugger #Y(nil nil nil (24 45 49 26 11 50 73 39 6 13 0 19 1 51 29) #6# #1# 1829) swank::connection.env swank::swank-debugger-hook swank-backend::call-with-debugger-hook #Y(nil nil nil (26 33 54 12 13 5 19 2 55 29) #6# #1# 1829) swank::call-with-bindings swank::swank-error.condition swank::swank-error.backtrace swank::close-connection "destructure-case failed: ~S" error #Y(nil nil nil (26 19 0 2 45 3 10 0 4 45 4 10 1 5 45 5 10 1 42 6 190 10 0 45 7 10 0 45 8 10 0 76 39 6 13 1 19 1 9 10 0 4 12 10 0 5 51 0 22 45 10 10 1 39 6 13 2 19 1 11 57 12 61 1 1 13 7 34 35 12 46 36 46 37 14 38 10 0 17 39 39 8 13 1 20 0 23 38 111 13 0 77 9 0 49 40 49 41 49 38 75 48 42 10 0 45 43 57 44 60 83 75 45 45 57 12 61 1 45 15 46 34 47 3 6 1 12 11 48 3 48 48 15 46 34 52 3 6 1 12 11 48 3 48 48 13 4 19 1 53 12 34 56 12 19 2 57 44 1 36 2 44 1 10 1 45 49 13 4 13 0 19 1 58 12 13 0 19 1 59 12 19 3 60 43 1 36 2 62 73 43 1 63 43 1 44 1 44 3 43 2 35 0 0 62 73 43 3 38 8 15 61 13 2 19 2 62 43 3 29) #6# #1# 1829) #:g5938 #:g5939 #:g5940 #Y(nil nil nil (24 45 18 26 10 0 51 2 35 1 0 29) #6# #1# 1829) #Y(nil nil nil (24 45 49 26 11 50 73 39 6 13 0 19 1 51 29) #6# #1# 1829) #Y(nil nil nil (26 33 54 12 13 5 19 2 55 29) #6# #1# 1829) #Y(nil nil nil (26 13 0 34 63 12 46 36 46 37 14 38 10 0 17 39 39 8 13 1 20 0 23 38 111 13 0 77 9 0 49 40 49 41 49 38 75 48 42 10 0 45 64 57 65 60 83 75 45 66 57 12 61 1 45 15 46 34 67 3 6 1 12 11 48 3 48 48 15 46 34 68 3 6 1 12 11 48 3 48 48 13 4 19 1 53 12 34 69 12 19 2 57 44 1 36 2 44 1 10 1 45 49 13 4 13 0 19 1 58 12 13 0 19 1 59 12 19 3 60 43 1 36 2 62 73 43 1 63 43 1 44 1 44 3 43 2 29) #6# #1# 1829) "mrepl thread" swank-backend::spawn #Y(swank-mrepl::spawn-listener-thread nil nil (24 45 1 26 34 70 12 14 15 15 71 19 3 72 29) #6# #1# 1829) si::fset)) #1# 1829) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #7=#A(t (23) (swank-mrepl::drop-unprocessed-events swank::channel #8=#:g5951 #:g5953 #:g5952 (slot-value #8# 'swank-mrepl::mode) swank-mrepl::mode slot-value swank-mrepl::old-mode #:g5954 #:g5955 :drop #:g5956 (setf slot-value) t swank::process-requests #:g5957 #:g5958 #:g5959 (setf slot-value) swank-mrepl::send-prompt #Y(swank-mrepl::drop-unprocessed-events nil nil (24 45 1 26 10 0 45 2 13 0 1 6 17 7 45 8 10 1 45 9 1 6 45 10 11 11 45 12 13 0 13 2 13 1 33 13 18 3 43 1 43 2 64 7 14 14 19 1 15 65 10 1 45 16 1 6 45 17 10 2 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 66 43 1 13 1 19 1 20 43 1 29) #7# #1# 2166) si::fset)) #1# 2166) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 30 12 14 31 19 6 32 29) #9=#A(t (33) (swank::channel-send (swank-mrepl::listener-channel (eql :process) t) (swank-mrepl::c swank::selector swank::args) swank-mrepl::c swank::selector swank::args #:g5984 #:g5985 si::dm-too-few-arguments string si::dm-too-many-arguments ":process ~s~%" swank::log-event #10=#:g5986 #:g5988 #:g5987 (slot-value #10# 'swank-mrepl::mode) #:g5990 #:g5989 (slot-value #10# 'swank-mrepl::remote) swank-mrepl::mode slot-value #:g5991 :eval swank-mrepl::mrepl-eval :read swank-mrepl::mrepl-read :drop (:eval :read :drop) si::ecase-error #Y(nil nil nil (24 45 3 24 45 4 24 45 5 26 10 0 45 6 10 0 45 7 10 0 76 39 6 13 1 19 1 8 10 0 4 12 10 0 5 51 0 22 45 9 10 1 39 6 13 2 19 1 10 15 11 13 0 19 2 12 10 5 45 13 13 0 1 20 17 21 45 22 10 0 42 23 10 13 7 13 2 19 2 24 38 26 42 25 10 13 7 13 2 19 2 26 38 14 42 27 5 75 73 38 7 13 0 1 28 17 29 43 1 43 1 43 3 29) #9# #1# 2396) t clos::install-method)) #1# 2396) #Y(si::bytecodes nil nil (15 0 1 36 12 19 2 37 1 0 73 29) #11=#A(t (38) (swank-mrepl::mrepl-eval swank::channel string #12=#:g6003 #:g6005 #:g6004 (slot-value #12# 'swank-mrepl::remote) #:g6007 #:g6006 (slot-value #12# 'swank-mrepl::env) t swank-mrepl::aborted swank-mrepl::env slot-value swank-backend::check-slime-interrupts swank::*slime-interrupts-enabled* swank-mrepl::read-eval-print swank-mrepl::result swank-mrepl::remote :write-result swank::send-to-remote-channel #:g6008 #:g6009 #:loop-list6011 swank-mrepl::sym #:loop-list-head6012 #:loop-list-tail6013 0 symbol-value rplacd #:g6010 (setf slot-value) (:evaluation-aborted) swank-mrepl::send-prompt #Y(nil nil nil (26 64 46 19 0 14 11 10 48 15 13 2 19 1 16 44 1 69 19 0 14 70 45 17 13 2 1 18 17 13 12 14 19 10 0 6 2 12 19 2 20 75 51 1 73 43 1 65 10 1 45 21 1 12 45 22 58 60 77 77 13 4 1 12 17 13 12 46 23 46 24 75 6 1 45 25 10 0 45 26 57 27 61 2 2 38 10 4 2 39 4 35 0 1 10 4 4 4 51 3 10 4 5 51 4 13 1 13 3 10 3 16 28 3 6 1 51 1 17 29 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 45 30 13 0 13 2 13 1 33 31 18 3 43 1 43 2 10 0 39 15 13 1 1 18 17 13 12 15 32 19 2 20 38 6 13 3 19 1 33 66 29) #11# #1# 2639) swank::call-with-bindings #Y(swank-mrepl::mrepl-eval nil nil (24 45 1 24 45 2 26 10 1 45 3 11 10 45 11 13 1 1 12 17 13 12 34 34 12 19 2 35 43 1 43 1 29) #11# #1# 2639) si::fset)) #1# 2639) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #13=#A(t (27) (swank-mrepl::send-prompt swank::channel #14=#:g6019 #:g6021 #:g6020 (slot-value #14# 'swank-mrepl::env) #:g6023 #:g6022 (slot-value #14# 'swank-mrepl::remote) *package* swank-mrepl::env slot-value assoc *standard-output* *standard-input* swank-mrepl::in swank-mrepl::out swank-mrepl::pkg force-output clear-input swank-mrepl::remote :prompt package-name swank-mrepl::package-prompt swank::send-to-remote-channel #Y(swank-mrepl::send-prompt nil nil (24 45 1 26 10 0 45 2 15 9 13 0 1 10 17 11 12 19 2 12 5 73 40 4 11 9 73 12 15 13 13 0 1 10 17 11 12 19 2 12 5 12 15 14 13 0 1 10 17 11 12 19 2 12 5 12 46 15 46 16 46 17 10 1 39 6 13 1 19 1 18 10 2 39 6 13 2 19 1 19 13 3 1 20 17 11 12 14 21 10 0 16 22 12 13 0 19 1 23 6 3 12 19 2 24 43 3 43 1 29) #13# #1# 3150) si::fset)) #1# 3150) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #15=#A(t (12) (swank-mrepl::mrepl-read swank::channel string #16=#:g6027 #:g6029 #:g6028 (slot-value #16# 'swank-mrepl::tag) swank-mrepl::tag si::assert-failure slot-value #Y(swank-mrepl::mrepl-read nil nil (24 45 1 24 45 2 26 10 1 45 3 38 6 15 7 19 1 8 13 0 1 7 17 9 76 40 -13 13 0 1 7 17 9 12 10 1 73 37 43 1 29) #15# #1# 3551) si::fset)) #1# 3551) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 1 0 73 29) #17=#A(t (18) (swank-mrepl::read-eval-print string make-string-input-stream swank-mrepl::in / 0 read swank-mrepl::form eq list + eval force-output "~{~s~%~}" format "; No values" #Y(swank-mrepl::read-eval-print nil nil (24 45 1 26 13 0 9 0 77 19 3 2 45 3 75 52 4 58 60 50 57 5 61 1 1 13 2 77 13 2 19 3 6 45 7 13 0 10 3 17 8 39 7 75 73 36 2 38 14 15 9 10 0 52 10 16 11 69 21 23 52 4 43 1 35 0 0 62 63 19 0 12 11 4 39 11 77 15 13 14 4 19 3 14 38 4 1 15 73 43 1 29) #17# #1# 3664) si::fset)) #1# 3664) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #18=#A(t (11) (swank-mrepl::make-listener-output-stream swank::channel swank-mrepl::remote slot-value string :write-string swank::send-to-remote-channel #Y(nil nil nil (24 45 4 26 13 1 14 5 10 0 6 2 12 19 2 6 29) #18# #1# 3986) swank-backend::make-output-stream #Y(swank-mrepl::make-listener-output-stream nil nil (24 45 1 26 13 0 1 2 17 3 45 2 34 7 12 19 1 8 43 1 29) #18# #1# 3986) si::fset)) #1# 3986) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #19=#A(t (7) (swank-mrepl::make-listener-input-stream swank::channel swank-mrepl::read-input #Y(nil nil nil (26 13 0 19 1 2 29) #19# #1# 4214) swank-backend::make-input-stream #Y(swank-mrepl::make-listener-input-stream nil nil (24 45 1 26 34 3 12 19 1 4 29) #19# #1# 4214) si::fset)) #1# 4214) #Y(si::bytecodes nil nil (15 0 1 20 12 19 2 21 1 0 73 29) #20=#A(t (22) (swank-mrepl::set-mode swank::channel swank-mrepl::new-mode #21=#:g6040 #:g6042 #:g6041 (slot-value #21# 'swank-mrepl::mode) #:g6044 #:g6043 (slot-value #21# 'swank-mrepl::remote) swank-mrepl::mode slot-value eq swank-mrepl::remote :set-read-mode swank::send-to-remote-channel #:g6045 #:g6046 #:g6047 (setf slot-value) #Y(swank-mrepl::set-mode nil nil (24 45 1 24 45 2 26 10 1 45 3 13 0 1 10 17 11 12 10 1 17 12 76 39 18 13 0 1 13 17 11 12 14 14 10 1 6 2 12 19 2 15 10 0 45 16 1 10 45 17 10 3 45 18 13 0 13 2 13 1 33 19 18 3 43 1 43 2 43 1 29) #20# #1# 4332) si::fset)) #1# 4332) #Y(si::bytecodes nil nil (15 0 1 29 12 19 2 30 1 0 73 29) #22=#A(t (31) (swank-mrepl::read-input swank::channel #23=#:g6061 #:g6063 #:g6062 (slot-value #23# 'swank-mrepl::mode) #:g6065 #:g6064 (slot-value #23# 'swank-mrepl::tag) #:g6067 #:g6066 (slot-value #23# 'swank-mrepl::remote) force-output swank-mrepl::mode slot-value swank-mrepl::tag swank-mrepl::old-tag swank-mrepl::old-mode #:g6068 #:g6069 #:g6070 (setf slot-value) :read swank-mrepl::set-mode swank::process-requests #:g6071 #:g6072 #:g6073 (setf slot-value) #Y(swank-mrepl::read-input nil nil (24 45 1 26 10 0 45 2 19 0 12 13 0 1 13 17 14 12 13 0 1 15 17 14 12 46 16 46 17 10 2 45 18 1 15 45 19 77 75 3 45 20 13 0 13 2 13 1 33 21 18 3 43 1 43 2 13 3 14 22 19 2 23 64 16 13 2 1 15 17 14 59 60 6 77 19 1 24 63 65 10 2 45 25 1 15 45 26 10 3 45 27 13 0 13 2 13 1 33 28 18 3 43 1 43 2 13 3 13 0 19 2 23 66 43 2 43 1 29) #22# #1# 4535) si::fset)) #1# 4535) #Y(si::bytecodes nil nil (11 0 16 1 29) #A(t (2) (:swank-mrepl provide)) #1# 4857))
