(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SWANK" si::select-package)) #1=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/contrib/swank-asdf.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank::*asdf-path* si::*make-special boundp variable "Path to asdf.lisp file, to be loaded in case (require \"asdf\") fails." si::set-documentation)) #1# 296) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 76 73 39 53 57 3 60 49 75 45 4 57 5 61 1 23 15 6 34 8 3 6 1 12 11 9 3 48 9 15 10 19 1 11 36 2 44 1 10 1 45 12 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #2=#A(t (13) (:asdf *features* member #:g5671 #:g5672 0 error si::temp #Y(nil nil nil (24 45 7 26 10 0 51 2 35 1 0 29) #2# #1# 866) si::*handler-clusters* "asdf" require condition)) #1# 866) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 76 73 39 29 15 3 33 4 3 6 1 12 11 5 3 48 5 11 6 73 39 9 14 6 14 7 77 19 3 8 44 1 29) #A(t (9) (:asdf *features* member warning muffle-warning si::*handler-clusters* swank::*asdf-path* :if-does-not-exist load)) #1# 1010) #Y(si::bytecodes nil nil (14 0 14 1 19 2 2 76 73 39 6 15 3 19 1 4 29) #A(t (5) (:asdf *features* member "Could not load ASDF.
Please update your implementation or
install ASDF2 and in your ~~/.swank.lisp specify:
 (defparameter swank::*asdf-path* #p\"/path/containing/asdf/asdf.lisp\")" error)) #1# 1233) #Y(si::bytecodes nil nil (19 0 0 12 15 1 19 2 2 76 73 39 6 15 3 19 1 4 29) #A(t (5) (asdf::asdf-version "2.14.6" asdf::version-satisfies "Your ASDF is too old. ~
            The oldest version supported by swank-asdf is 2.014.6." error)) #1# 1564) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #3=#A(t (6) (swank::asdf-at-least swank::version asdf::asdf-version asdf::version-satisfies #Y(swank::asdf-at-least nil nil (24 45 1 26 19 0 2 12 13 0 19 2 3 29) #3# #1# 2138) si::fset)) #1# 2138) #Y(si::bytecodes nil nil (15 0 1 40 12 14 41 9 2 19 4 42 1 0 73 29) #4=#A(t (43) (swank::asdefs #:g5675 #:g5674 #:g5676 si::dm-too-few-arguments swank::version swank::defs swank::name swank::aname rest progn defun declaim notinline when swank::asdf-at-least setf fdefinition quote #Y(swank::defun* nil nil (24 45 5 24 45 7 24 45 8 24 45 9 26 15 10 15 11 13 2 10 0 7 3 12 15 12 15 13 10 2 6 2 6 2 12 15 14 15 15 10 3 6 2 12 15 16 15 17 15 18 10 2 6 2 6 2 12 15 17 15 18 10 1 6 2 6 2 6 3 6 3 6 4 73 29) #4# #1# 3129) unless defmethod #Y(swank::defmethod* nil nil (24 45 5 24 45 8 24 45 9 26 15 20 15 15 10 2 6 2 12 15 21 13 1 10 0 7 3 6 3 73 29) #4# #1# 3129) define-symbol-macro defvar #Y(swank::defvar* nil nil (24 45 7 24 45 8 24 45 9 26 15 10 15 23 13 2 10 1 6 3 12 15 24 13 1 10 0 7 3 6 3 73 29) #4# #1# 3129) #:loop-list5689 swank::args swank::def #:loop-list-head5690 #:loop-list-tail5691 0 #:loop-desetq-temp string :asdf intern #:g5692 (defun defmethod defvar) si::ecase-error rplacd #Y(swank::asdefs nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 30 3 19 22 25 15 10 58 60 174 77 77 77 13 4 46 26 46 27 46 7 46 28 75 45 8 75 6 1 45 29 10 0 45 30 57 31 61 2 2 129 10 7 2 39 4 35 0 1 10 7 4 45 32 10 0 4 51 5 10 0 5 51 0 10 0 4 51 6 10 0 5 51 0 10 0 51 7 43 1 10 7 5 51 7 10 5 16 33 12 14 34 19 2 35 51 3 13 1 10 4 45 36 10 0 42 11 15 13 14 13 6 13 4 13 7 32 12 18 4 38 37 42 21 13 13 14 13 4 13 7 32 11 18 3 38 22 42 24 13 13 6 13 4 13 7 32 10 18 3 38 7 13 0 1 37 17 38 43 1 6 1 51 1 17 39 35 0 0 10 2 5 73 36 8 62 43 2 43 1 43 4 63 7 2 73 43 3 29) #4# #1# 3129) t si::fset)) #1# 3129) #Y(si::bytecodes nil nil (15 0 15 1 1 5 12 19 3 6 1 4 16 7 1 4 16 8 76 39 5 11 9 52 4 15 10 1 15 12 19 2 16 1 17 16 18 15 19 19 1 20 39 11 15 10 1 21 16 22 12 19 2 16 15 23 1 30 12 19 2 16 1 31 16 18 15 19 19 1 20 73 39 11 15 23 1 32 16 22 12 19 2 16 29) #5=#A(t (33) (swank::*wild* si::symbol-macro si::form si::env asdf::*wild* #Y(nil nil nil (24 45 2 24 45 3 26 1 4 73 29) #5# #1# 4065) si::put-sysprop si::*make-special boundp :wild swank::collect-asds-in-directory directory swank::collect swank::directory-asd-files map #Y(swank::collect-asds-in-directory nil nil (24 45 11 24 45 12 26 77 13 0 13 1 19 1 13 12 19 3 14 29) #5# #1# 4065) si::fset (notinline swank::collect-asds-in-directory) proclaim "2.15" swank::asdf-at-least asdf::collect-asds-in-directory fdefinition swank::register-asd-directory (nil :collect :exclude :recurse) swank::recurse swank::exclude :exclude :collect swank::collect-sub*directories-asd-files #Y(swank::register-asd-directory nil nil (24 45 11 28 24 22 40 2 77 46 25 22 40 2 77 46 26 22 40 2 77 46 12 10 2 76 39 10 13 3 13 0 19 2 10 38 14 13 3 14 27 13 1 14 28 13 0 19 5 29 29) #5# #1# 4065) (notinline swank::register-asd-directory) asdf::register-asd-directory)) #1# 4065) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 15 16 16 15 17 19 1 18 39 11 15 0 1 19 16 20 12 19 2 14 15 21 1 28 12 19 2 14 1 29 16 16 15 17 19 1 18 73 39 11 15 21 1 30 16 20 12 19 2 14 29) #6=#A(t (31) (swank::load-sysdef swank::name pathname asdf::make-temporary-package package translate-logical-pathname asdf::pathname-directory-pathname *default-pathname-defaults* *package* "~&; Loading system definition from ~A into ~A~%" asdf::asdf-message load delete-package #Y(swank::load-sysdef nil nil (24 45 1 24 45 2 26 19 0 3 45 4 64 34 13 0 13 1 19 1 5 12 19 1 6 12 49 7 49 8 15 9 13 1 13 0 19 3 10 13 1 19 1 11 44 2 65 10 0 16 12 66 43 1 29) #6# #1# 4499) si::fset (notinline swank::load-sysdef) proclaim "2.16" swank::asdf-at-least asdf::load-sysdef fdefinition swank::directory* swank::pathname-spec swank::keys (t) directory append apply #Y(swank::directory* nil nil (24 45 22 27 45 23 28 24 15 25 13 1 13 0 77 19 2 26 12 19 3 27 29) #6# #1# 4499) (notinline swank::directory*) asdf::directory*)) #1# 4499) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 1 21 16 22 15 23 19 1 24 39 11 15 0 1 25 16 26 12 19 2 20 15 27 1 31 12 19 2 20 1 32 16 22 15 23 19 1 24 39 11 15 27 1 33 16 26 12 19 2 20 15 34 1 58 12 19 2 20 1 59 16 22 15 23 19 1 24 39 11 15 34 1 60 16 26 12 19 2 20 15 61 1 64 12 19 2 20 1 65 16 22 15 23 19 1 24 73 39 11 15 61 1 66 16 26 12 19 2 20 29) #7=#A(t (67) (swank::collect-sub*directories-asd-files directory (nil :collect :exclude) asdf::*default-source-registry-exclusions* swank::exclude swank::collect t constantly swank::x pathname-directory last :test equal member #Y(nil nil nil (24 45 8 26 13 0 19 1 9 12 19 1 10 4 12 13 2 14 11 33 12 12 19 4 13 76 73 29) #7# #1# 5782) swank::dir swank::collect-asds-in-directory #Y(nil nil nil (24 45 15 26 13 0 13 1 19 2 16 29) #7# #1# 5782) asdf::collect-sub*directories #Y(swank::collect-sub*directories-asd-files nil nil (24 45 1 28 2 22 40 3 14 3 46 4 22 40 2 77 46 5 13 2 11 6 16 7 12 34 14 12 34 17 12 19 4 18 29) #7# #1# 5782) si::fset (notinline swank::collect-sub*directories-asd-files) proclaim "2.17" swank::asdf-at-least asdf::collect-sub*directories-asd-files fdefinition swank::system-source-directory swank::system-designator asdf::system-source-file asdf::pathname-directory-pathname #Y(swank::system-source-directory nil nil (24 45 28 26 13 0 19 1 29 12 19 1 30 29) #7# #1# 5782) (notinline swank::system-source-directory) asdf::system-source-directory swank::filter-logical-directory-results swank::entries swank::merger logical-pathname typep #:loop-list5715 swank::f #:loop-it-5716 #:loop-list-head5717 #:loop-list-tail5718 0 #:g5719 #:g5720 error si::temp #Y(nil nil nil (24 45 48 26 10 0 51 2 35 1 0 29) #7# #1# 5782) si::*handler-clusters* condition swank::u #:g5722 #:g5723 #Y(nil nil nil (24 45 48 26 10 0 51 2 35 1 0 29) #7# #1# 5782) truename rplacd #Y(swank::filter-logical-directory-results nil nil (24 45 1 24 45 35 24 45 36 26 13 2 15 37 19 2 38 39 217 58 60 212 77 13 2 46 39 46 40 75 45 41 75 6 1 45 42 10 0 45 43 57 44 61 2 2 172 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 13 4 15 37 19 2 38 39 5 10 4 38 124 57 45 60 50 75 45 46 57 44 61 1 25 15 47 34 49 3 6 1 12 11 50 3 48 50 13 10 13 7 20 1 23 36 2 44 1 10 1 45 51 77 13 0 72 2 43 1 36 2 62 43 1 63 45 52 10 0 39 63 57 53 60 48 75 45 54 57 44 61 1 22 15 47 34 55 3 6 1 12 11 50 3 48 50 10 3 16 56 36 2 44 1 10 1 45 51 77 13 0 72 2 43 1 36 2 62 73 43 1 63 12 10 5 16 56 17 12 39 3 10 0 43 1 51 3 39 11 13 1 10 3 6 1 51 1 17 57 35 0 0 10 2 5 73 36 6 62 73 43 2 43 1 43 2 63 38 4 10 1 73 29) #7# #1# 5782) (notinline swank::filter-logical-directory-results) asdf::filter-logical-directory-results swank::directory-asd-files asdf::*wild-asd* swank::directory-files #Y(swank::directory-asd-files nil nil (24 45 1 26 13 0 14 62 19 2 63 29) #7# #1# 5782) (notinline swank::directory-asd-files) asdf::directory-asd-files)) #1# 5782) #Y(si::bytecodes nil nil (15 0 1 34 12 19 2 35 1 36 16 37 15 38 19 1 39 73 39 11 15 0 1 40 16 41 12 19 2 35 29) #8=#A(t (42) (swank::subdirectories directory asdf::ensure-directory-pathname asdf::*wild-directory* asdf::merge-pathnames* swank::wild #:g5732 #:g5733 0 error si::temp #Y(nil nil nil (24 45 10 26 10 0 51 2 35 1 0 29) #8# #1# 6955) si::*handler-clusters* swank::directory* condition swank::dirs pathname-directory swank::normalize-pathname-directory-component (:absolute) swank::prefix swank::d swank::dir consp :defaults :name :type :version :directory last swank::make-pathname-component-logical append make-pathname #Y(nil nil nil (24 45 20 26 13 0 19 1 16 12 19 1 17 45 21 10 0 16 22 73 39 43 10 0 5 16 22 73 39 35 14 23 13 5 14 24 77 14 25 77 14 26 77 14 27 13 2 13 0 19 1 28 12 19 1 29 12 19 2 30 12 19 10 31 43 1 29) #8# #1# 6955) swank::filter-logical-directory-results #Y(swank::subdirectories nil nil (24 45 1 26 13 0 19 1 2 45 1 14 3 13 0 19 2 4 45 5 57 6 60 48 75 45 7 57 8 61 1 23 15 9 34 11 3 6 1 12 11 12 3 48 12 13 3 19 1 13 36 2 44 1 10 1 45 14 77 13 0 72 2 43 1 36 2 62 43 1 63 45 15 13 2 13 0 13 2 19 1 16 12 19 1 17 40 3 1 18 45 19 34 32 12 43 1 19 3 33 43 3 29) #8# #1# 6955) si::fset (notinline swank::subdirectories) proclaim "2.19" swank::asdf-at-least asdf::subdirectories fdefinition)) #1# 6955) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 9 16 10 15 11 19 1 12 39 11 15 0 1 13 16 14 12 19 2 8 15 15 1 24 12 19 2 8 1 25 16 10 15 11 19 1 12 39 11 15 15 1 26 16 14 12 19 2 8 15 27 1 32 12 19 2 8 1 33 16 10 15 11 19 1 12 39 11 15 27 1 34 16 14 12 19 2 8 15 35 1 48 12 19 2 8 1 49 16 10 15 11 19 1 12 73 39 11 15 35 1 50 16 14 12 19 2 8 29) #9=#A(t (51) (swank::component-loaded-p swank::c swank::load-op asdf::find-component asdf::component-operation-times gethash t #Y(swank::component-loaded-p nil nil (24 45 1 26 15 2 13 0 77 19 2 3 12 19 1 4 12 19 2 5 73 39 4 11 6 73 29) #9# #1# 9068) si::fset (notinline swank::component-loaded-p) proclaim "2.21" swank::asdf-at-least asdf::component-loaded-p fdefinition swank::normalize-pathname-directory-component directory stringp :absolute consp (:absolute :relative) member "Unrecognized pathname directory component ~S" error #Y(swank::normalize-pathname-directory-component nil nil (24 45 16 26 10 0 16 17 39 12 14 18 10 0 6 2 10 0 73 38 35 10 0 76 40 16 10 0 16 19 39 10 10 0 4 12 15 20 19 2 21 39 6 10 0 73 38 8 15 22 13 0 19 2 23 29) #9# #1# 9068) (notinline swank::normalize-pathname-directory-component) asdf::normalize-pathname-directory-component swank::make-pathname-component-logical swank::x #:g5742 (eql :unspecific) typep #Y(swank::make-pathname-component-logical nil nil (24 45 28 26 10 0 45 29 13 0 15 30 19 2 31 39 5 75 73 38 4 10 1 73 43 1 29) #9# #1# 9068) (notinline swank::make-pathname-component-logical) asdf::make-pathname-component-logical swank::make-pathname-logical pathname swank::host :host :directory pathname-directory :name pathname-name :type pathname-type :version pathname-version make-pathname #Y(swank::make-pathname-logical nil nil (24 45 36 24 45 37 26 14 38 13 0 14 39 13 1 19 1 40 12 19 1 27 12 14 41 13 1 19 1 42 12 19 1 27 12 14 43 13 1 19 1 44 12 19 1 27 12 14 45 10 1 16 46 12 19 1 27 12 19 10 47 29) #9# #1# 9068) (notinline swank::make-pathname-logical) asdf::make-pathname-logical)) #1# 9068) #Y(si::bytecodes nil nil (15 0 1 41 12 19 2 42 1 43 16 44 15 45 19 1 46 73 39 11 15 0 1 47 16 48 12 19 2 42 29) #10=#A(t (49) (swank::directory-files directory asdf::*wild-file* swank::pattern pathname swank::dir logical-pathname typep wild-pathname-p "Invalid wild pattern in logical directory ~S" error pathname-directory (nil (:relative)) :test equal member "Invalid file pattern ~S for logical directory ~S" pathname-host swank::make-pathname-logical #:g5752 #:g5753 0 si::temp #Y(nil nil nil (24 45 22 26 10 0 51 2 35 1 0 29) #10# #1# 10229) si::*handler-clusters* asdf::merge-pathnames* swank::directory* condition swank::entries swank::f :defaults :name pathname-name swank::make-pathname-component-logical :type pathname-type :version pathname-version make-pathname #Y(nil nil nil (24 45 29 26 14 30 13 2 14 31 13 0 19 1 32 12 19 1 33 12 14 34 13 0 19 1 35 12 19 1 33 12 14 36 10 0 16 37 12 19 1 33 12 19 8 38 29) #10# #1# 10229) swank::filter-logical-directory-results #Y(swank::directory-files nil nil (24 45 1 25 40 3 14 2 46 3 26 10 1 16 4 45 5 13 0 15 6 19 2 7 39 55 13 0 19 1 8 39 8 15 9 13 2 19 2 10 13 1 19 1 11 12 15 12 14 13 15 14 19 4 15 76 39 10 15 16 13 1 13 2 19 3 10 13 1 13 0 19 1 17 12 19 2 18 51 1 57 19 60 54 75 45 20 57 21 61 1 29 15 10 34 23 3 6 1 12 11 24 3 48 24 13 4 13 3 19 2 25 12 19 1 26 36 2 44 1 10 1 45 27 77 13 0 72 2 43 1 36 2 62 43 1 63 45 28 13 3 13 0 34 39 12 19 3 40 43 1 43 1 29) #10# #1# 10229) si::fset (notinline swank::directory-files) proclaim "2.22" swank::asdf-at-least asdf::directory-files fdefinition)) #1# 10229) #Y(si::bytecodes nil nil (15 0 19 1 1 76 39 16 15 2 77 15 3 15 4 1 14 12 14 15 19 6 16 15 17 1 24 12 19 2 25 1 26 16 27 15 0 19 1 1 73 39 11 15 17 1 28 16 29 12 19 2 25 29) #11=#A(t (30) ("2.26.149" swank::asdf-at-least asdf::component-relative-pathname (asdf::system) (swank::system) swank::system asdf::relative-pathname slot-boundp slot-value :type :directory :defaults swank::system-source-directory asdf::coerce-pathname #Y(nil nil nil (24 45 5 26 13 0 1 6 17 7 73 39 7 13 0 1 6 17 8 12 14 9 14 10 14 11 13 0 19 1 12 12 19 5 13 29) #11# #1# 11412) t clos::install-method swank::load-asd pathname (t :name) swank::name pathname-name string-downcase asdf::load-sysdef #Y(swank::load-asd nil nil (24 45 18 28 19 22 40 2 77 46 20 10 0 73 40 10 13 1 19 1 21 12 19 1 22 12 13 1 19 2 23 29) #11# #1# 11412) si::fset (notinline swank::load-asd) proclaim asdf::load-asd fdefinition)) #1# 11412) #Y(si::bytecodes nil nil (15 0 1 10 12 14 11 9 2 19 4 12 1 0 73 29) #12=#A(t (13) (swank::while-collecting #:g5760 #:g5759 #:g5761 si::dm-too-few-arguments #:g5762 #:g5763 swank::collectors swank::body asdf::while-collecting #Y(swank::while-collecting nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 45 7 10 3 45 8 15 9 13 1 10 0 7 3 73 29) #12# #1# 11877) t si::fset)) #1# 11877) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #13=#A(t (8) (swank::asdf-operation swank::operation :asdf asdf::find-symbol* "Couldn't find ASDF operation ~S" error #Y(swank::asdf-operation nil nil (24 45 1 26 13 0 14 2 19 2 3 73 40 8 15 4 13 0 19 2 5 29) #13# #1# 12017) si::fset)) #1# 12017) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #14=#A(t (7) (swank::map-system-components swank::fn swank::system asdf::find-system swank::map-component-subcomponents #Y(swank::map-system-components nil nil (24 45 1 24 45 2 26 13 1 13 0 19 1 3 12 19 2 4 29) #14# #1# 12195) si::fset)) #1# 12195) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 1 0 73 29) #15=#A(t (10) (swank::map-component-subcomponents swank::fn swank::component asdf::module typep asdf::module-components si::%dolist-var swank::c #Y(swank::map-component-subcomponents nil nil (24 45 1 24 45 2 26 10 0 73 39 55 13 1 13 0 20 1 23 13 0 15 3 19 2 4 73 39 38 13 0 19 1 5 45 6 75 45 7 38 18 10 1 4 51 0 13 3 13 0 19 2 0 10 1 5 51 1 10 1 40 -20 75 73 43 2 29) #15# #1# 12302) si::fset)) #1# 12302) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 10 14 3 15 4 19 2 5 52 0 1 0 73 29) #A(t (6) (swank::*pathname-component* si::*make-special boundp :test equal make-hash-table)) #1# 12546) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #16=#A(t (5) (swank::clear-pathname-component-table swank::*pathname-component* clrhash #Y(swank::clear-pathname-component-table nil nil (26 11 1 16 2 29) #16# #1# 12659) si::fset)) #1# 12659) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #17=#A(t (6) (swank::register-system-pathnames swank::system swank::register-component-pathname swank::map-system-components #Y(swank::register-system-pathnames nil nil (24 45 1 26 15 2 13 0 19 2 3 29) #17# #1# 12738) si::fset)) #1# 12738) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #18=#A(t (6) (swank::recompute-pathname-component-table swank::clear-pathname-component-table swank::register-system-pathnames asdf::map-systems #Y(swank::recompute-pathname-component-table nil nil (26 19 0 1 15 2 19 1 3 29) #18# #1# 12847) si::fset)) #1# 12847) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #19=#A(t (7) (swank::pathname-component swank::x pathname swank::*pathname-component* gethash #Y(swank::pathname-component nil nil (24 45 1 26 10 0 16 2 12 14 3 19 2 4 29) #19# #1# 12982) si::fset)) #1# 12982) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 10 12 14 11 19 6 12 29) #20=#A(t (13) (asdf::component-pathname (:around) (asdf::component) (swank::component) swank::component call-next-method swank::p pathnamep swank::*pathname-component* si::hash-set #Y(nil nil nil (24 45 4 26 19 0 5 45 6 10 0 16 7 39 10 13 0 14 8 13 1 19 3 9 10 0 73 43 1 29) #20# #1# 13063) t clos::install-method)) #1# 13063) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #21=#A(t (5) (swank::register-component-pathname swank::component asdf::component-pathname #Y(swank::register-component-pathname nil nil (24 45 1 26 13 0 19 1 2 29) #21# #1# 13263) si::fset)) #1# 13263) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (swank::recompute-pathname-component-table)) #1# 13353) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 15 0 1 0 16 23 12 19 2 24 29) #22=#A(t (25) (swank::who-depends-on swank::system swank::op swank::dep consp second asdf::coerce-name #Y(nil nil nil (24 45 3 26 10 0 16 4 39 7 10 0 16 5 38 4 10 0 73 12 19 1 6 29) #22# #1# 13393) asdf::component-depends-on assoc mapcar #Y(swank::system-dependencies nil nil (24 45 2 24 45 1 26 34 7 12 13 1 13 1 13 0 19 2 8 12 19 2 9 5 12 19 2 10 29) #22# #1# 13393) swank::result swank::system-name asdf::load-op :test string= member asdf::component-name #Y(nil nil nil (24 45 1 26 13 1 15 14 13 0 32 3 18 2 12 14 15 33 16 12 19 4 17 73 39 13 13 0 19 1 18 12 10 2 3 51 2 73 29) #22# #1# 13393) asdf::map-systems #Y(swank::who-depends-on nil nil (24 45 1 26 30 1 11 13 1 19 1 6 12 77 46 12 46 13 34 19 12 19 1 20 10 1 73 43 2 43 1 29) #22# #1# 13393) si::fset symbol-package export)) #1# 13393) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 24 12 14 25 19 6 26 29) #23=#A(t (27) (swank::xref-doit ((eql :depends-on) t) (type swank::thing) type swank::thing (or string symbol) typep swank::who-depends-on #:loop-list5787 swank::dependency swank::asd-file #:loop-list-head5788 #:loop-list-tail5789 0 asdf::system-definition-pathname :file namestring (:position 1) :snippet "(defsystem :~A" format (:align t) swank-backend::make-location rplacd #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 19 2 6 73 39 122 58 60 119 77 13 1 19 1 7 12 46 8 46 9 75 45 10 75 6 1 45 11 10 0 45 12 57 13 61 2 2 75 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 13 4 19 1 14 51 3 10 3 39 43 13 1 13 4 14 15 10 3 16 16 6 2 12 15 17 14 18 77 15 19 13 4 19 3 20 12 1 21 7 3 12 19 3 22 6 2 6 1 51 1 17 23 35 0 0 10 2 5 73 36 6 62 73 43 2 43 1 43 2 63 29) #23# #1# 14058) t clos::install-method)) #1# 14058) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 1 0 16 13 12 19 2 14 29) #24=#A(t (15) (swank::operate-on-system-for-emacs swank::system-name swank::operation swank::keywords swank::operate-on-system apply #Y(nil nil nil (26 33 4 12 13 2 13 1 13 0 19 4 5 29) #24# #1# 14618) swank::collect-notes #Y(swank::operate-on-system-for-emacs nil nil (24 45 1 24 45 2 27 45 3 34 6 12 19 1 7 29) #24# #1# 14618) si::fset function "Compile and load SYSTEM using ASDF.
Record compiler notes signalled as `compiler-condition's." si::set-documentation symbol-package export)) #1# 14618) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 15 0 15 19 15 20 19 3 21 1 0 73 29) #25=#A(t (22) (swank::operate-on-system swank::system-name swank::operation-name swank::keyword-args #:g5793 #:g5794 0 (or asdf::compile-error) si::temp #Y(nil nil nil (24 45 8 26 35 1 0 29) #25# #1# 14902) si::*handler-clusters* asdf::operate swank::asdf-operation apply t #Y(nil nil nil (26 33 11 12 13 4 19 1 12 12 13 5 13 3 19 4 13 11 14 73 29) #25# #1# 14902) swank-backend::call-with-compilation-hooks #Y(swank::operate-on-system nil nil (24 45 1 24 45 2 27 45 3 57 4 60 41 75 45 5 57 6 61 1 24 15 7 34 9 3 6 1 12 11 10 3 48 10 34 15 12 19 1 16 36 2 44 1 75 73 36 2 62 73 43 1 63 29) #25# #1# 14902) si::fset function "Perform OPERATION-NAME on SYSTEM-NAME using ASDF.
The KEYWORD-ARGS are passed on to the operation.
Example:
(operate-on-system \"swank\" 'compile-op :force t)" si::set-documentation)) #1# 14902) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #26=#A(t (11) (swank::unique-string-list swank::lists append apply :test string= delete-duplicates string< sort #Y(swank::unique-string-list nil nil (27 45 1 33 2 12 13 0 19 2 3 12 14 4 33 5 12 19 3 6 12 33 7 12 19 2 8 29) #26# #1# 15404) si::fset)) #1# 15404) #Y(si::bytecodes nil nil (15 0 1 49 12 19 2 50 15 0 15 51 15 52 19 3 53 15 0 1 0 16 54 12 19 2 55 29) #27=#A(t (56) (swank::list-all-systems-in-central-registry pathname-name #:c5821 asdf::x #Y(swank::c nil nil (24 45 3 26 13 0 10 1 3 51 1 0 29) #27# #1# 15527) asdf::*central-registry* #:loop-list5824 swank::dir swank::defaults 0 eval swank::collect-asds-in-directory asdf::ensure-source-registry asdf::asdf-version "2.15" asdf::version-satisfies asdf::*source-registry* #:g5827 #:loop-hashtab-5825 swank::k #:loop-it-5828 si::hash-table-iterator #:loop-hashtab-next-5826 #:loop-hash-val-temp-5829 #:loop-hash-key-temp-5830 #:loop-hash-predicate-var-5831 asdf::flatten-source-registry si::%dolist-var swank::entry #:g5842 #:g5843 si::dm-too-few-arguments directory :recurse si::search-keyword #:g5844 si::missing-keyword eq swank::recurse :exclude #:g5845 swank::exclude (:exclude :recurse) si::check-keyword :collect swank::register-asd-directory reverse mapcar swank::unique-string-list #Y(swank::list-all-systems-in-central-registry nil nil (26 33 1 12 75 45 2 30 1 4 77 14 5 46 6 46 7 75 45 8 57 9 61 2 2 40 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 16 10 51 1 10 1 39 9 13 1 32 4 12 19 2 11 35 0 0 62 43 1 43 2 19 0 12 19 0 13 12 15 14 19 2 15 39 79 77 77 14 16 77 46 17 46 18 46 19 46 20 10 2 16 21 45 22 57 9 61 2 2 47 13 1 20 0 23 47 2 23 47 1 24 45 25 10 0 39 9 10 2 51 8 10 1 51 6 10 0 51 5 43 3 76 39 4 35 0 1 13 3 32 6 18 1 35 0 0 62 43 1 43 4 38 132 19 0 26 45 27 75 45 28 38 116 10 1 4 51 0 10 0 45 29 10 0 45 30 10 0 76 39 6 13 1 19 1 31 10 0 4 12 10 0 5 51 0 22 45 32 13 1 15 33 19 2 34 45 35 13 0 1 36 17 37 39 4 75 38 3 10 0 45 38 13 3 15 39 19 2 34 45 40 13 0 1 36 17 37 39 4 75 38 3 10 0 45 41 13 5 15 42 19 2 43 13 4 14 33 13 2 14 39 13 0 14 44 32 9 12 19 7 45 43 7 10 1 5 51 1 10 1 40 -118 43 2 10 1 16 46 12 43 1 43 1 19 2 47 12 19 1 48 29) #27# #1# 15527) si::fset function "Returns a list of all systems in ASDF's central registry
AND in its source-registry. (legacy name)" si::set-documentation symbol-package export)) #1# 15527) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 1 0 16 14 12 19 2 15 29) #28=#A(t (16) (swank::list-all-systems-known-to-asdf #:c5849 asdf::x #Y(swank::c nil nil (24 45 2 26 13 0 10 1 3 51 1 0 29) #28# #1# 16428) swank::system asdf::component-name #Y(nil nil nil (24 45 4 26 13 0 19 1 5 12 32 1 18 1 29) #28# #1# 16428) asdf::map-systems reverse #Y(swank::list-all-systems-known-to-asdf nil nil (26 75 45 1 30 1 3 34 6 12 19 1 7 10 1 16 8 12 72 1 43 1 43 1 29) #28# #1# 16428) si::fset function "Returns a list of all systems ASDF knows already." si::set-documentation symbol-package export)) #1# 16428) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 15 0 15 6 15 7 19 3 8 15 0 1 0 16 9 12 19 2 10 29) #29=#A(t (11) (swank::list-asdf-systems swank::list-all-systems-known-to-asdf swank::list-all-systems-in-central-registry swank::unique-string-list #Y(swank::list-asdf-systems nil nil (26 19 0 1 12 19 0 2 12 19 2 3 29) #29# #1# 16636) si::fset function "Returns the systems in ASDF's central registry and those which ASDF
already knows." si::set-documentation symbol-package export)) #1# 16636) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #30=#A(t (17) (swank::asdf-component-source-files swank::component #:c5857 asdf::x #Y(swank::c nil nil (24 45 3 26 13 0 10 1 3 51 1 0 29) #30# #1# 16867) swank::x #:g5861 asdf::source-file typep asdf::component-pathname asdf::module asdf::module-components map #Y(swank::f nil nil (24 45 5 26 10 0 45 6 13 0 15 7 19 2 8 39 13 13 1 19 1 9 12 32 3 18 1 38 27 13 0 15 10 19 2 8 39 16 77 32 2 12 13 1 19 1 11 12 19 3 12 38 3 75 73 43 1 29) #30# #1# 16867) reverse #Y(swank::asdf-component-source-files nil nil (24 45 1 26 75 45 2 30 1 4 31 1 13 13 3 32 0 18 1 43 1 10 1 16 14 12 72 1 43 1 43 1 29) #30# #1# 16867) si::fset)) #1# 16867) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #31=#A(t (19) (swank::asdf-component-output-files swank::component #:c5867 asdf::x #Y(swank::c nil nil (24 45 3 26 13 0 10 1 3 51 1 0 29) #31# #1# 17159) swank::x #:g5871 asdf::source-file typep asdf::compile-op make-instance asdf::output-files map asdf::module asdf::module-components #Y(swank::f nil nil (24 45 5 26 10 4 45 6 13 0 15 7 19 2 8 39 22 77 32 3 12 15 9 19 1 10 12 13 1 19 2 11 12 19 3 12 38 27 13 0 15 13 19 2 8 39 16 77 32 2 12 13 1 19 1 14 12 19 3 12 38 3 75 73 43 1 29) #31# #1# 17159) reverse #Y(swank::asdf-component-output-files nil nil (24 45 1 26 75 45 2 30 1 4 31 1 15 13 3 32 0 18 1 43 1 10 1 16 16 12 72 1 43 1 43 1 29) #31# #1# 17159) si::fset)) #1# 17159) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 15 0 1 0 16 21 12 19 2 22 29) #32=#A(t (23) (swank::asdf-system-files swank::name asdf::find-system swank::system namestring asdf::system-definition-pathname swank::asdf-component-source-files mapcar swank::files :test equalp :key pathname-name :start find swank::main-file equal :count remove #Y(swank::asdf-system-files nil nil (24 45 1 26 13 0 19 1 2 45 3 33 4 12 13 0 19 1 5 12 13 0 19 1 6 3 12 19 2 7 45 8 13 2 13 0 14 9 33 10 12 14 11 33 12 12 14 13 9 1 19 8 14 45 15 10 0 39 23 13 0 13 0 13 1 14 9 33 16 12 14 17 9 1 19 6 18 3 73 38 4 10 1 73 43 3 29) #32# #1# 17538) si::fset symbol-package export)) #1# 17538) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 15 0 1 0 16 5 12 19 2 6 29) #33=#A(t (7) (swank::asdf-system-loaded-p swank::name swank::component-loaded-p #Y(swank::asdf-system-loaded-p nil nil (24 45 1 26 13 0 19 1 2 29) #33# #1# 18081) si::fset symbol-package export)) #1# 18081) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 15 0 1 0 16 6 12 19 2 7 29) #34=#A(t (8) (swank::asdf-system-directory swank::name asdf::system-source-directory namestring #Y(swank::asdf-system-directory nil nil (24 45 1 26 13 0 19 1 2 16 3 29) #34# #1# 18155) si::fset symbol-package export)) #1# 18155) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #35=#A(t (8) (swank::pathname-system pathname swank::pathname-component swank::component asdf::component-system asdf::component-name #Y(swank::pathname-system nil nil (24 45 1 26 13 0 19 1 2 45 3 10 0 73 39 10 13 0 19 1 4 12 19 1 5 43 1 29) #35# #1# 18253) si::fset)) #1# 18253) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 15 0 1 0 16 17 12 19 2 18 29) #36=#A(t (19) (swank::asdf-determine-system swank::file swank::buffer-package-name swank::pathname-system swank::recompute-pathname-component-table swank::guess-buffer-package package swank::package-names #:loop-list5873 swank::name swank::system 0 asdf::coerce-name asdf::find-system asdf::component-name #Y(swank::asdf-determine-system nil nil (24 45 1 24 45 2 26 10 1 39 6 13 1 19 1 3 73 40 111 10 1 39 9 19 0 4 13 1 19 1 3 73 40 96 58 60 93 13 1 19 1 5 45 6 77 13 0 19 1 7 12 46 8 46 9 75 45 10 57 11 61 2 2 57 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 19 1 12 12 77 19 2 13 51 1 10 1 39 11 10 7 76 40 6 13 7 19 1 3 39 8 13 1 19 1 14 36 5 35 0 0 62 73 43 1 43 2 43 1 63 29) #36# #1# 18429) si::fset symbol-package export)) #1# 18429) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 15 0 1 0 16 17 12 19 2 18 29) #37=#A(t (19) (swank::delete-system-fasls swank::name asdf::find-system swank::asdf-component-output-files #:loop-list5877 swank::file #:loop-sum-5879 #:loop-it-5878 0 probe-file 1+ delete-file swank::removed-count "~d file~:p ~:*~[were~;was~:;were~] removed" format #Y(swank::delete-system-fasls nil nil (24 45 1 26 58 60 83 77 13 1 19 1 2 12 19 1 3 12 46 4 46 5 77 9 0 46 6 46 7 57 8 61 2 2 44 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 3 16 9 51 1 39 15 10 1 39 7 10 2 16 10 51 2 10 3 16 11 35 0 0 10 2 73 36 5 62 43 2 43 2 63 45 12 77 15 13 13 0 19 3 14 43 1 29) #37# #1# 19186) si::fset symbol-package export)) #1# 19186) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 1 0 73 29) #A(t (3) (swank::*recompile-system* si::*make-special boundp)) #1# 19568) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 10 12 14 11 19 6 12 29) #38=#A(t (13) (asdf::operation-done-p (:around) (asdf::compile-op t) (swank::operation swank::component) swank::operation swank::component swank::*recompile-system* asdf::component-system eql call-next-method #Y(nil nil nil (24 45 4 24 45 5 26 14 6 13 0 19 1 7 17 8 76 73 39 4 19 0 9 29) #38# #1# 19603) t clos::install-method)) #1# 19603) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 15 0 1 0 16 8 12 19 2 9 29) #39=#A(t (10) (swank::reload-system swank::name asdf::find-system swank::*recompile-system* asdf::load-op swank::operate-on-system-for-emacs #Y(swank::reload-system nil nil (24 45 1 26 13 0 19 1 2 48 3 13 0 15 4 19 2 5 44 1 29) #39# #1# 19816) si::fset symbol-package export)) #1# 19816) #Y(si::bytecodes nil nil (14 0 11 1 17 2 73 39 11 1 12 12 14 13 15 14 19 3 15 29) #40=#A(t (16) (swank::*communication-style* :spawn eql #:g5880 #:g5881 0 error si::temp #Y(nil nil nil (24 45 7 26 10 0 51 2 35 1 0 29) #40# #1# 19964) si::*handler-clusters* swank::list-all-systems-in-central-registry condition #Y(nil nil nil (26 57 3 60 47 75 45 4 57 5 61 1 21 15 6 34 8 3 6 1 12 11 9 3 48 9 19 0 10 36 2 44 1 10 1 45 11 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #40# #1# 19964) :name "init-asdf-fs-caches" swank-backend::spawn)) #1# 19964) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #41=#A(t (17) (swank::try-compile-file-with-asdf pathname swank::load-p swank::options swank::pathname-component swank::component asdf::compile-op make-instance swank::op asdf::perform #Y(nil nil nil (26 13 0 13 1 19 2 9 29) #41# #1# 20300) swank-backend::call-with-compilation-hooks asdf::load-op t asdf::output-files #Y(swank::try-compile-file-with-asdf nil nil (24 45 1 24 45 2 27 45 3 13 2 19 1 4 45 5 10 0 73 39 47 15 6 19 1 7 45 8 34 10 12 19 1 11 10 3 39 12 15 12 19 1 7 12 13 1 19 2 9 14 13 14 13 77 13 0 13 1 19 2 14 4 12 72 4 43 1 43 1 29) #41# #1# 20300) si::fset)) #1# 20300) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #42=#A(t (11) (swank::try-compile-asd-file pathname swank::load-p swank::options pathname-type "asd" equalp swank::load-asd t #Y(swank::try-compile-asd-file nil nil (24 45 1 24 45 2 27 45 3 13 2 19 1 4 12 1 5 17 6 73 39 15 13 2 19 1 7 14 8 14 8 77 13 2 72 4 29) #42# #1# 20863) si::fset)) #1# 20863) #Y(si::bytecodes nil nil (15 0 14 1 19 2 2 52 1 73 29) #A(t (3) (swank::try-compile-asd-file swank::*compile-file-for-emacs-hook* adjoin)) #1# 21070) #Y(si::bytecodes nil nil (11 0 16 1 29) #A(t (2) (:swank-asdf provide)) #1# 21135))
