(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SWANK" si::select-package)) #1=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/contrib/swank-repl.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank::*use-dedicated-output-stream* si::*make-special boundp variable "When T swank will attempt to create a second connection to Emacs
which is used just to send output." si::set-documentation)) #1# 117) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 0 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank::*dedicated-output-stream-port* si::*make-special boundp variable "Which port we should use for the dedicated output stream." si::set-documentation)) #1# 269) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 16 14 3 11 4 17 5 39 5 11 6 38 2 75 52 0 15 0 15 7 15 8 19 3 9 1 0 73 29) #A(t (10) (swank::*dedicated-output-stream-buffering* si::*make-special boundp swank::*communication-style* :spawn eq t variable "The buffering scheme that should be used for the output stream.
Valid values are nil, t, :line" si::set-documentation)) #1# 377) #Y(si::bytecodes nil nil (15 0 1 74 12 19 2 75 15 0 15 23 15 76 19 3 77 1 0 73 29) #2=#A(t (78) (swank::open-streams swank::connection swank::properties #:g3391 #:g3392 0 :name swank::abort-read :function si::temp #Y(nil nil nil (27 45 9 10 0 51 2 35 1 0 29) #2# #1# 574) :report-function stream "Abort reading input from Emacs." format #Y(nil nil nil (24 45 12 26 13 0 15 13 19 2 14 29) #2# #1# 574) si::make-restart si::*restart-clusters* swank::read-user-input-from-emacs t #Y(nil nil nil (26 77 14 19 72 2 29) #2# #1# 574) apply #Y(nil nil nil (26 57 3 60 56 75 45 4 57 5 61 1 33 14 6 15 7 14 8 34 10 12 14 11 34 15 12 19 6 16 6 1 12 11 17 3 48 17 19 0 18 36 2 44 1 34 20 12 13 1 19 2 21 36 2 62 73 43 1 63 29) #2# #1# 574) function swank::*emacs-connection* eq swank::*send-counter* swank-backend::*pending-slime-interrupts* swank::*slime-interrupts-enabled* #:g3395 #:g3396 #:g3397 swank::swank-error #Y(nil nil nil (24 45 9 26 10 0 51 2 35 1 0 29) #2# #1# 574) si::*handler-clusters* condition swank::*debug-on-swank-protocol-error* swank::invoke-default-debugger #Y(nil nil nil (24 45 35 26 11 36 73 39 6 13 0 19 1 37 29) #2# #1# 574) swank::connection.env swank::swank-debugger-hook swank-backend::call-with-debugger-hook #Y(nil nil nil (26 33 40 12 13 5 19 2 41 29) #2# #1# 574) swank::call-with-bindings swank::swank-error.condition swank::swank-error.backtrace swank::close-connection #Y(nil nil nil (26 13 1 34 22 12 46 23 46 1 14 24 10 0 17 25 39 8 13 1 20 0 23 38 111 13 0 77 9 0 49 26 49 27 49 24 75 48 28 10 0 45 29 57 30 60 83 75 45 31 57 5 61 1 45 15 32 34 33 3 6 1 12 11 34 3 48 34 15 32 34 38 3 6 1 12 11 34 3 48 34 13 4 19 1 39 12 34 42 12 19 2 43 44 1 36 2 44 1 10 1 45 35 13 4 13 0 19 1 44 12 13 0 19 1 45 12 19 3 46 43 1 36 2 62 73 43 1 63 43 1 44 1 44 3 43 2 29) #2# #1# 574) swank::input-fn swank::*use-dedicated-output-stream* :coding-system getf swank::open-dedicated-output-stream swank::dedicated-output swank-backend::make-input-stream swank::in swank::make-output-function swank-backend::make-output-stream swank::out make-two-way-stream swank::io :repl-result swank::make-output-stream-for-target swank::repl-results #:g3399 swank::multithreaded-connection typep #:g3400 swank::auto-flush-loop #Y(nil nil nil (26 13 4 19 1 68 29) #2# #1# 574) "auto-flush-thread" swank-backend::spawn #:g3401 si::structure-set #Y(swank::open-streams nil nil (24 45 1 24 45 2 26 34 47 45 48 11 49 39 14 13 2 13 1 14 50 19 2 51 12 19 2 52 45 53 13 1 19 1 54 45 55 10 1 40 10 13 4 19 1 56 12 19 1 57 45 58 13 1 10 0 17 59 45 60 13 6 14 61 19 2 62 45 63 10 7 45 64 13 0 15 65 19 2 66 39 34 10 8 45 67 34 69 12 14 6 15 70 19 3 71 45 72 13 1 15 65 9 15 13 0 19 4 73 43 1 43 1 38 1 43 1 13 4 13 3 13 2 13 1 13 0 72 5 43 6 29) #2# #1# 574) si::fset "Return the 5 streams for IO redirection:
DEDICATED-OUTPUT INPUT OUTPUT IO REPL-RESULTS" si::set-documentation)) #1# 574) #Y(si::bytecodes nil nil (15 0 1 33 12 19 2 34 15 0 15 6 15 35 19 3 36 1 0 73 29) #3=#A(t (37) (swank::make-output-function swank::connection string :write-string swank::send-to-emacs #Y(nil nil nil (26 14 3 10 0 6 2 12 19 1 4 29) #3# #1# 1794) function swank::*emacs-connection* eq swank::*send-counter* swank-backend::*pending-slime-interrupts* swank::*slime-interrupts-enabled* #:g3406 #:g3407 #:g3408 0 swank::swank-error si::temp #Y(nil nil nil (24 45 17 26 10 0 51 2 35 1 0 29) #3# #1# 1794) si::*handler-clusters* condition swank::*debug-on-swank-protocol-error* swank::invoke-default-debugger #Y(nil nil nil (24 45 20 26 11 21 73 39 6 13 0 19 1 22 29) #3# #1# 1794) swank::connection.env swank::swank-debugger-hook swank-backend::call-with-debugger-hook #Y(nil nil nil (26 33 25 12 13 5 19 2 26 29) #3# #1# 1794) swank::call-with-bindings swank::swank-error.condition swank::swank-error.backtrace swank::close-connection #Y(nil nil nil (24 45 2 26 13 1 34 5 12 46 6 46 1 14 7 10 0 17 8 39 8 13 1 20 0 23 38 111 13 0 77 9 0 49 9 49 10 49 7 75 48 11 10 0 45 12 57 13 60 83 75 45 14 57 15 61 1 45 15 16 34 18 3 6 1 12 11 19 3 48 19 15 16 34 23 3 6 1 12 11 19 3 48 19 13 4 19 1 24 12 34 27 12 19 2 28 44 1 36 2 44 1 10 1 45 20 13 4 13 0 19 1 29 12 13 0 19 1 30 12 19 3 31 43 1 36 2 62 73 43 1 63 43 1 44 1 44 3 43 2 29) #3# #1# 1794) #Y(swank::make-output-function nil nil (24 45 1 26 34 32 73 29) #3# #1# 1794) si::fset "Create function to send user output to Emacs." si::set-documentation)) #1# 1794) #Y(si::bytecodes nil nil (15 0 1 50 12 19 2 51 15 0 15 25 15 52 19 3 53 1 0 73 29) #4=#A(t (54) (swank::make-output-function-for-target swank::connection swank::target string #:g3418 #:g3419 0 :name abort :function si::temp #Y(nil nil nil (27 45 10 10 0 51 2 35 1 0 29) #4# #1# 1995) :report-function stream "Abort sending output to Emacs." format #Y(nil nil nil (24 45 13 26 13 0 15 14 19 2 15 29) #4# #1# 1995) si::make-restart si::*restart-clusters* :write-string swank::send-to-emacs t #Y(nil nil nil (26 77 14 21 72 2 29) #4# #1# 1995) apply #Y(nil nil nil (26 57 4 60 65 75 45 5 57 6 61 1 42 14 7 15 8 14 9 34 11 12 14 12 34 16 12 19 6 17 6 1 12 11 18 3 48 18 14 19 13 3 10 4 6 3 12 19 1 20 36 2 44 1 34 22 12 13 1 19 2 23 36 2 62 73 43 1 63 29) #4# #1# 1995) function swank::*emacs-connection* eq swank::*send-counter* swank-backend::*pending-slime-interrupts* swank::*slime-interrupts-enabled* #:g3422 #:g3423 #:g3424 swank::swank-error #Y(nil nil nil (24 45 10 26 10 0 51 2 35 1 0 29) #4# #1# 1995) si::*handler-clusters* condition swank::*debug-on-swank-protocol-error* swank::invoke-default-debugger #Y(nil nil nil (24 45 37 26 11 38 73 39 6 13 0 19 1 39 29) #4# #1# 1995) swank::connection.env swank::swank-debugger-hook swank-backend::call-with-debugger-hook #Y(nil nil nil (26 33 42 12 13 5 19 2 43 29) #4# #1# 1995) swank::call-with-bindings swank::swank-error.condition swank::swank-error.backtrace swank::close-connection #Y(nil nil nil (24 45 3 26 13 2 34 24 12 46 25 46 1 14 26 10 0 17 27 39 8 13 1 20 0 23 38 111 13 0 77 9 0 49 28 49 29 49 26 75 48 30 10 0 45 31 57 32 60 83 75 45 33 57 6 61 1 45 15 34 34 35 3 6 1 12 11 36 3 48 36 15 34 34 40 3 6 1 12 11 36 3 48 36 13 4 19 1 41 12 34 44 12 19 2 45 44 1 36 2 44 1 10 1 45 37 13 4 13 0 19 1 46 12 13 0 19 1 47 12 19 3 48 43 1 36 2 62 73 43 1 63 43 1 44 1 44 3 43 2 29) #4# #1# 1995) #Y(swank::make-output-function-for-target nil nil (24 45 1 24 45 2 26 34 49 73 29) #4# #1# 1995) si::fset "Create a function to send user output to a specific TARGET in Emacs." si::set-documentation)) #1# 1995) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #5=#A(t (10) (swank::make-output-stream-for-target swank::connection swank::target swank::make-output-function-for-target swank-backend::make-output-stream #Y(swank::make-output-stream-for-target nil nil (24 45 1 24 45 2 26 13 1 13 0 19 2 3 12 19 1 4 29) #5# #1# 2328) si::fset function "Create a stream that sends output to a specific TARGET in Emacs." si::set-documentation)) #1# 2328) #Y(si::bytecodes nil nil (15 0 1 22 12 19 2 23 15 0 15 24 15 25 19 3 26 1 0 73 29) #6=#A(t (27) (swank::open-dedicated-output-stream swank::connection swank::coding-system swank::*loopback-interface* swank::*dedicated-output-stream-port* swank-backend::create-socket swank::find-external-format-or-lose swank::ef swank::socket swank-backend::local-port swank::port :open-dedicated-output-stream swank::connection.socket-io swank::encode-message :external-format :buffering swank::*dedicated-output-stream-buffering* :timeout swank-backend::accept-connection swank::dedicated swank::authenticate-client swank-backend::close-socket #Y(swank::open-dedicated-output-stream nil nil (24 45 1 24 45 2 26 14 3 14 4 19 2 5 12 13 0 19 1 6 12 46 7 46 8 64 66 13 0 19 1 9 45 10 14 11 13 0 10 3 6 3 12 13 4 19 1 12 12 19 2 13 13 1 14 14 13 2 14 15 14 16 14 17 9 30 19 7 18 45 19 13 0 19 1 20 13 2 19 1 21 75 51 2 10 0 73 43 1 43 1 65 10 0 39 6 13 0 19 1 21 66 43 2 29) #6# #1# 2535) si::fset function "Open a dedicated output connection to the Emacs on SOCKET-IO.
Return an output stream suitable for writing program output.

This is an optimized way for Lisp to deliver output to Emacs." si::set-documentation)) #1# 2535) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 7 12 14 8 19 6 9 29) #7=#A(t (10) (swank::thread-for-evaluation (swank::multithreaded-connection (eql :find-existing)) (swank::connection swank::id) swank::connection swank::id swank::mconn.active-threads swank::find-repl-thread #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 4 73 40 6 13 1 19 1 6 29) #7# #1# 3695) t clos::install-method)) #1# 3695) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #8=#A(t (9) (swank::thread-for-evaluation (swank::multithreaded-connection (eql :repl-thread)) (swank::connection swank::id) swank::connection swank::id swank::find-repl-thread #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 29) #8# #1# 3890) t clos::install-method)) #1# 3890) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #9=#A(t (15) (swank::find-repl-thread swank::connection swank::use-threads-p swank-backend::current-thread swank::mconn.repl-thread swank::thread swank-backend::thread-alive-p #:g3430 "new-repl-thread" swank::spawn-repl-thread #:g3431 swank::multithreaded-connection si::structure-set #Y(swank::find-repl-thread nil nil (24 45 1 26 19 0 2 76 39 6 19 0 3 38 59 13 0 19 1 4 45 5 10 0 76 39 5 75 73 38 41 13 0 19 1 6 39 6 10 0 73 38 29 10 1 45 7 13 2 15 8 19 2 9 45 10 13 1 15 11 9 14 13 0 19 4 12 43 1 43 1 43 1 29) #9# #1# 4031) si::fset)) #1# 4031) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #10=#A(t (12) (swank::spawn-repl-thread swank::connection swank::name swank::*default-worker-thread-bindings* swank::repl-loop #Y(nil nil nil (26 13 1 19 1 4 29) #10# #1# 4446) swank::call-with-bindings #Y(nil nil nil (26 14 3 34 5 12 19 2 6 29) #10# #1# 4446) :name swank-backend::spawn #Y(swank::spawn-repl-thread nil nil (24 45 1 24 45 2 26 34 7 12 14 8 13 0 19 3 9 29) #10# #1# 4446) si::fset)) #1# 4446) #Y(si::bytecodes nil nil (15 0 1 3 12 19 2 4 1 0 73 29) #11=#A(t (5) (swank::repl-loop swank::connection swank::handle-requests #Y(swank::repl-loop nil nil (24 45 1 26 13 0 19 1 2 29) #11# #1# 4635) si::fset)) #1# 4635) #Y(si::bytecodes nil nil (15 0 1 38 12 19 2 39 15 0 1 0 16 40 12 19 2 41 29) #12=#A(t (42) (swank::create-repl swank::target (nil :coding-system) swank::coding-system (eq swank::target nil) si::assert-failure eq swank::*emacs-connection* swank::conn :coding-system swank::initialize-streams-for-connection #:g3441 #:g3445 *standard-output* swank::connection.user-output *standard-input* swank::connection.user-input *trace-output* swank::connection.trace-output *error-output* *debug-io* swank::connection.user-io *query-io* *terminal-io* #:g3446 swank::connection si::structure-set swank::maybe-redirect-global-io #:g3447 swank::multithreaded-connection typep #:g3448 "repl-thread" swank::spawn-repl-thread #:g3449 *package* package-name swank::package-string-for-prompt #Y(swank::create-repl nil nil (24 45 1 28 2 22 40 2 77 46 3 38 6 15 4 19 1 5 13 1 75 17 6 76 40 -12 11 7 45 8 13 0 14 9 10 1 6 2 12 19 2 10 10 0 45 11 10 0 45 12 15 13 13 1 19 1 14 7 2 12 15 15 13 1 19 1 16 7 2 12 15 17 13 1 19 1 18 40 6 13 1 19 1 14 7 2 12 15 19 13 1 19 1 14 7 2 12 15 20 13 1 19 1 21 7 2 12 15 22 13 1 19 1 21 7 2 12 15 23 13 1 19 1 21 7 2 6 7 45 24 13 1 15 25 9 6 13 0 19 4 26 43 1 43 1 13 1 19 1 27 10 1 45 28 13 0 15 29 19 2 30 39 31 10 2 45 31 13 3 15 32 19 2 33 45 34 13 1 15 29 9 14 13 0 19 4 26 43 1 43 1 38 1 43 1 11 35 16 36 12 14 35 19 1 37 6 2 73 43 1 43 1 29) #12# #1# 4701) si::fset symbol-package export)) #1# 4701) #Y(si::bytecodes nil nil (15 0 1 20 12 19 2 21 1 0 73 29) #13=#A(t (22) (swank::initialize-streams-for-connection swank::connection swank::properties swank::open-streams swank::repl-results swank::io swank::out swank::in swank::dedicated #:g3460 #:g3461 si::structure-set #:g3462 #:g3463 #:g3464 #:g3465 #:g3466 #:g3467 #:g3468 #:g3469 #Y(swank::initialize-streams-for-connection nil nil (24 45 1 24 45 2 26 13 1 13 0 19 2 3 47 4 4 47 3 5 47 2 6 47 1 7 45 8 10 6 45 9 10 1 45 10 13 1 15 1 9 2 13 0 19 4 11 43 1 43 1 10 6 45 12 10 4 45 13 13 1 15 1 9 5 13 0 19 4 11 43 1 43 1 10 6 45 14 10 3 45 15 13 1 15 1 9 4 13 0 19 4 11 43 1 43 1 10 6 45 16 10 2 45 17 13 1 15 1 9 3 13 0 19 4 11 43 1 43 1 10 6 45 18 10 5 45 19 13 1 15 1 9 8 13 0 19 4 11 43 1 43 1 10 6 73 43 5 29) #13# #1# 5787) si::fset)) #1# 5787) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #14=#A(t (16) (swank::read-user-input-from-emacs swank::make-tag swank::tag force-output :read-string swank::current-thread-id swank::send-to-emacs swank::ok :emacs-return-string swank::value swank::wait-for-event caddr t :read-aborted #Y(swank::read-user-input-from-emacs nil nil (26 19 0 1 45 2 19 0 3 14 4 19 0 5 12 10 0 6 3 12 19 1 6 75 45 7 64 23 14 8 13 1 1 9 6 3 12 19 1 10 16 11 12 11 12 51 0 22 73 65 10 0 76 39 15 14 13 19 0 5 12 10 1 6 3 12 19 1 6 66 43 1 43 1 29) #14# #1# 6270) si::fset)) #1# 6270) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (swank::*listener-eval-function* si::*make-special boundp swank::repl-eval)) #1# 6665) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 15 0 1 0 16 9 12 19 2 10 29) #15=#A(t (11) (swank::listener-eval string (nil :window-width) swank::window-width-p swank::window-width *print-right-margin* swank::*listener-eval-function* #Y(swank::listener-eval nil nil (24 45 1 28 2 22 40 3 77 75 45 3 46 4 10 1 39 16 10 0 48 5 14 6 13 2 20 1 23 44 1 38 8 14 6 13 2 20 1 23 29) #15# #1# 6736) si::fset symbol-package export)) #1# 6736) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (swank::*send-repl-results-function* si::*make-special boundp swank::send-repl-results-to-emacs)) #1# 6989) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 1 0 73 29) #16=#A(t (25) (swank::repl-eval string swank::clear-user-input "Retry SLIME REPL evaluation request." swank::eval-region swank::last-form values ** *** * // /// / ++ +++ + swank::*send-repl-results-function* #Y(nil nil nil (26 13 0 19 1 4 47 1 5 45 6 11 7 52 8 11 9 52 7 10 0 4 52 9 11 10 52 11 11 12 52 10 10 0 52 12 11 13 52 14 11 15 52 13 10 1 52 15 14 16 13 0 20 1 23 43 2 29) #16# #1# 7058) swank::track-package #Y(nil nil nil (26 34 17 12 19 1 18 29) #16# #1# 7058) swank::call-with-retry-restart #Y(nil nil nil (26 15 3 34 19 12 19 2 20 29) #16# #1# 7058) swank::call-with-buffer-syntax #Y(swank::repl-eval nil nil (24 45 1 26 19 0 2 77 34 21 12 19 2 22 75 73 29) #16# #1# 7058) si::fset)) #1# 7058) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 15 0 1 0 16 9 12 19 2 10 29) #17=#A(t (11) (swank::clear-repl-variables (*** ** * /// // / +++ ++ +) swank::variables #:loop-list3475 variable 0 set #Y(swank::clear-repl-variables nil nil (26 1 1 45 2 77 13 0 46 3 46 4 57 5 61 2 2 27 10 2 2 39 4 35 0 1 10 2 4 51 1 10 2 5 51 2 13 1 75 17 6 35 0 0 62 73 43 2 43 1 29) #17# #1# 7522) si::fset symbol-package export)) #1# 7522) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #18=#A(t (11) (swank::track-package swank::fun *package* swank::p eq :new-package package-name swank::package-string-for-prompt swank::send-to-emacs #Y(swank::track-package nil nil (24 45 1 26 11 2 45 3 64 7 13 1 20 0 23 65 14 2 10 0 17 4 76 39 19 14 5 11 2 16 6 12 14 2 19 1 7 6 3 12 19 1 8 66 43 1 29) #18# #1# 7703) si::fset)) #1# 7703) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #19=#A(t (14) (swank::send-repl-results-to-emacs values finish-output (:write-string "; No value" :repl-result) swank::send-to-emacs si::%dolist-var swank::v :write-string prin1-to-string #\Newline swank::cat :repl-result #Y(swank::send-repl-results-to-emacs nil nil (24 45 1 26 19 0 2 10 0 76 39 8 15 3 19 1 4 38 49 10 0 45 5 75 45 6 38 32 10 1 4 51 0 14 7 10 0 16 8 12 15 9 19 2 10 12 11 11 6 3 12 19 1 4 10 1 5 51 1 10 1 40 -34 75 73 43 2 29) #19# #1# 7966) si::fset)) #1# 7966) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 1 0 16 10 12 19 2 11 29) #20=#A(t (12) (swank::redirect-trace-output swank::target swank::*emacs-connection* #:g3482 swank::make-output-stream-for-target #:g3483 swank::connection si::structure-set #Y(swank::redirect-trace-output nil nil (24 45 1 26 11 2 45 3 14 2 13 1 19 2 4 45 5 13 1 15 6 9 7 13 0 19 4 7 43 1 43 1 75 73 29) #20# #1# 8279) si::fset symbol-package export)) #1# 8279) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank::*globally-redirect-io* si::*make-special boundp variable "When non-nil globally redirect all standard streams to Emacs." si::set-documentation)) #1# 8456) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank::*saved-global-streams* si::*make-special boundp variable "A plist to save and restore redirected stream objects.
E.g. the value for '*standard-output* holds the stream object
for *standard-output* before we install our redirection." si::set-documentation)) #1# 9709) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 1 0 73 29) #21=#A(t (23) (swank::setup-stream-indirection swank::stream-var stream #:current swank::prefixed-var symbol-value swank::current-stream-var #:g3489 #:g3490 swank::*saved-global-streams* si::put-f #:g3488 special proclaim set make-synonym-stream quote swank-backend::set-default-initial-binding #Y(swank::setup-stream-indirection nil nil (24 45 1 25 40 2 77 46 2 26 15 3 13 1 19 2 4 12 10 0 73 40 5 10 1 16 5 12 46 2 46 6 10 3 45 7 10 2 45 8 14 9 13 0 13 1 19 3 10 45 11 10 0 52 9 10 1 43 1 43 1 43 1 15 12 10 0 6 2 16 13 13 0 10 1 17 14 10 0 16 15 45 2 13 4 10 0 17 14 13 4 15 16 10 0 6 2 12 19 2 17 43 1 43 2 29) #21# #1# 9963) si::fset function "Setup redirection scaffolding for a global stream variable.
Supposing (for example) STREAM-VAR is *STANDARD-INPUT*, this macro:

1. Saves the value of *STANDARD-INPUT* in `*SAVED-GLOBAL-STREAMS*'.

2. Creates *CURRENT-STANDARD-INPUT*, initially with the same value as
*STANDARD-INPUT*.

3. Assigns *STANDARD-INPUT* to a synonym stream pointing to
*CURRENT-STANDARD-INPUT*.

This has the effect of making *CURRENT-STANDARD-INPUT* contain the
effective global value for *STANDARD-INPUT*. This way we can assign
the effective global value even when *STANDARD-INPUT* is shadowed by a
dynamic binding." si::set-documentation)) #1# 9963) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 1 0 73 29) #22=#A(t (16) (swank::prefixed-var swank::prefix swank::variable-symbol symbol-name subseq swank::basename "*~A-~A" string format :swank intern #Y(swank::prefixed-var nil nil (24 45 1 24 45 2 26 10 0 16 3 12 9 1 19 2 4 45 5 77 15 6 10 2 16 7 12 13 0 19 4 8 12 14 9 19 2 10 43 1 29) #22# #1# 11278) si::fset function "(PREFIXED-VAR \"FOO\" '*BAR*) => SWANK::*FOO-BAR*" si::set-documentation)) #1# 11278) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (swank::*standard-output-streams* si::*make-special boundp (*standard-output* *error-output* *trace-output*) variable "The symbols naming standard output streams." si::set-documentation)) #1# 11513) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (swank::*standard-input-streams* si::*make-special boundp (*standard-input*) variable "The symbols naming standard input streams." si::set-documentation)) #1# 11654) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (swank::*standard-io-streams* si::*make-special boundp (*debug-io* *query-io* *terminal-io*) variable "The symbols naming standard io streams." si::set-documentation)) #1# 11762) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #23=#A(t (13) (swank::init-global-stream-redirection swank::*globally-redirect-io* swank::*saved-global-streams* "Streams already redirected." warn swank::setup-stream-indirection swank::*standard-output-streams* swank::*standard-input-streams* swank::*standard-io-streams* append mapc #Y(swank::init-global-stream-redirection nil nil (26 11 1 73 39 28 11 2 39 8 15 3 19 1 4 38 17 33 5 12 14 6 14 7 14 8 19 3 9 12 19 2 10 29) #23# #1# 11883) si::fset)) #1# 11883) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #24=#A(t (18) (swank::globally-redirect-io-to-connection swank::connection swank::*standard-output-streams* si::%dolist-var swank::o #:current swank::prefixed-var swank::connection.user-output set swank::*standard-io-streams* swank::io #:current swank::connection.user-io #Y(swank::globally-redirect-io-to-connection nil nil (24 45 1 26 11 2 45 3 75 45 4 38 26 10 1 4 51 0 15 5 13 0 19 2 6 12 13 2 19 1 7 17 8 10 1 5 51 1 10 1 40 -28 43 2 11 9 45 3 75 45 10 38 26 10 1 4 51 0 15 11 13 0 19 2 6 12 13 2 19 1 12 17 8 10 1 5 51 1 10 1 40 -28 75 73 43 2 29) #24# #1# 12260) si::fset function "Set the standard I/O streams to redirect to CONNECTION.
Assigns *CURRENT-<STREAM>* for all standard streams." si::set-documentation)) #1# 12260) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #25=#A(t (17) (swank::revert-global-io-redirection swank::*standard-output-streams* swank::*standard-input-streams* swank::*standard-io-streams* append si::%dolist-var swank::stream-var #:current swank::prefixed-var swank::*saved-global-streams* getf set #Y(swank::revert-global-io-redirection nil nil (26 14 1 14 2 14 3 19 3 4 45 5 75 45 6 38 28 10 1 4 51 0 15 7 13 0 19 2 8 12 14 9 13 0 19 2 10 17 11 10 1 5 51 1 10 1 40 -30 75 73 43 2 29) #25# #1# 13241) si::fset function "Set *CURRENT-<STREAM>* to *REAL-<STREAM>* for all standard streams." si::set-documentation)) #1# 13241) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank::*global-stdio-connection* si::*make-special boundp variable "The connection to which standard I/O streams are globally redirected.
NIL if streams are not globally redirected." si::set-documentation)) #1# 13625) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 1 0 73 29) #26=#A(t (13) (swank::maybe-redirect-global-io swank::connection swank::*globally-redirect-io* swank::*global-stdio-connection* swank::connection.user-io swank::*saved-global-streams* swank::init-global-stream-redirection swank::globally-redirect-io-to-connection #Y(swank::maybe-redirect-global-io nil nil (24 45 1 26 11 2 39 11 11 3 76 39 6 13 0 19 1 4 73 39 18 11 5 76 39 4 19 0 6 10 0 52 3 13 0 19 1 7 29) #26# #1# 13821) si::fset function "Consider globally redirecting to CONNECTION." si::set-documentation)) #1# 13821) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #27=#A(t (17) (swank::update-redirection-after-close swank::closed-connection #:g3494 swank::connection typep si::do-check-type swank::*global-stdio-connection* eq swank::default-connection swank::*globally-redirect-io* swank::globally-redirect-io-to-connection swank::revert-global-io-redirection #Y(swank::update-redirection-after-close nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 76 39 13 13 0 15 3 77 15 1 19 4 5 51 1 43 1 14 6 10 0 17 7 73 39 26 19 0 8 39 3 11 9 39 10 19 0 8 12 19 1 10 38 8 19 0 11 75 52 6 73 29) #27# #1# 14217) si::fset function "Update redirection after a connection closes." si::set-documentation)) #1# 14217) #Y(si::bytecodes nil nil (15 0 14 1 19 2 2 52 1 73 29) #A(t (3) (swank::update-redirection-after-close swank::*connection-closed-hook* adjoin)) #1# 14767) #Y(si::bytecodes nil nil (11 0 16 1 29) #A(t (2) (:swank-repl provide)) #1# 14838))
