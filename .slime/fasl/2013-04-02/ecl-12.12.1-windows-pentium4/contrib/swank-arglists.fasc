(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SWANK" si::select-package)) #1=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/contrib/swank-arglists.lisp" 0) #Y(si::bytecodes nil nil (14 0 19 1 1 29) #A(t (2) (:swank-c-p-c swank::swank-require)) #1# 257) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 1 0 73 29) #2=#A(t (14) (swank::compose swank::functions swank::x funcall :initial-value :from-end t reduce #Y(nil nil nil (24 45 2 26 33 3 12 13 1 14 4 13 0 14 5 14 6 19 6 7 29) #2# #1# 348) #Y(swank::compose nil nil (27 45 1 34 8 73 29) #2# #1# 348) si::fset function "Compose FUNCTIONS right-associatively, returning a function" si::set-documentation)) #1# 348) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 15 0 15 17 15 18 19 3 19 1 0 73 29) #3=#A(t (20) (swank::length= swank::seq swank::n #:g3552 list typep swank::i 1- <= zerop sequence length = (list sequence) si::etypecase-error #Y(swank::length= nil nil (24 45 1 24 45 2 26 10 1 45 3 13 0 15 4 19 2 5 39 53 13 1 13 2 46 4 46 6 38 14 10 0 16 7 12 10 1 5 12 53 1 53 0 13 0 9 0 19 2 8 40 4 10 1 76 39 -26 10 0 16 9 73 39 5 10 1 76 73 43 2 38 28 13 0 15 10 19 2 5 39 13 10 2 16 11 12 13 1 19 2 12 38 7 13 0 1 13 17 14 43 1 29) #3# #1# 551) si::fset function "Test for whether SEQ contains N number of elements. I.e. it's equivalent
 to (= (LENGTH SEQ) N), but besides being more concise, it may also be more
 efficiently implemented." si::set-documentation)) #1# 551) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ((inline swank::memq) proclaim)) #1# 971) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #4=#A(t (8) (swank::memq swank::item list :test eq member #Y(swank::memq nil nil (24 45 1 24 45 2 26 13 1 13 0 14 3 33 4 12 19 4 5 29) #4# #1# 998) si::fset)) #1# 998) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #5=#A(t (10) (swank::exactly-one-p values swank::found si::%dolist-var swank::v #Y(swank::exactly-one-p nil nil (27 45 1 57 0 60 53 75 45 2 10 2 45 3 75 45 4 38 29 10 1 4 51 0 10 0 39 15 10 2 39 7 75 73 36 3 38 5 10 0 51 2 10 1 5 51 1 10 1 40 -31 43 2 10 0 73 43 1 63 29) #5# #1# 1057) si::fset function "If exactly one value in VALUES is non-NIL, this value is returned.
Otherwise NIL is returned." si::set-documentation)) #1# 1057) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 15 0 15 9 15 10 19 3 11 1 0 73 29) #6=#A(t (12) (swank::valid-operator-symbol-p symbol fboundp macro-function special-operator-p (declare declaim) member #Y(swank::valid-operator-symbol-p nil nil (24 45 1 26 10 0 16 2 73 40 23 13 0 19 1 3 73 40 15 10 0 16 4 73 40 8 13 0 15 5 19 2 6 29) #6# #1# 1368) si::fset function "Is SYMBOL the name of a function, a macro, or a special-operator?" si::set-documentation)) #1# 1368) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #7=#A(t (7) (swank::function-exists-p swank::form swank-backend::valid-function-name-p fboundp t #Y(swank::function-exists-p nil nil (24 45 1 26 13 0 19 1 2 73 39 11 10 0 16 3 73 39 4 11 4 73 29) #7# #1# 1616) si::fset)) #1# 1616) #Y(si::bytecodes nil nil (15 0 1 14 12 14 15 9 1 19 4 16 1 0 73 29) #8=#A(t (17) (swank::multiple-value-or #:g3554 #:g3553 #:g3555 swank::forms rest first let* values multiple-value-list (swank::primary-value (first values)) if swank::primary-value (values-list values) #Y(swank::multiple-value-or nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 45 4 10 0 76 39 5 75 73 38 50 10 0 4 12 10 0 5 12 46 5 46 6 15 7 15 8 15 9 10 0 6 2 6 2 12 1 10 6 2 12 15 11 15 12 15 13 15 0 10 1 7 2 6 4 6 3 73 43 2 29) #8# #1# 1723) t si::fset)) #1# 1723) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #9=#A(t (6) (swank::arglist-available-p swank-backend::arglist :not-available eql #Y(swank::arglist-available-p nil nil (24 45 1 26 13 0 11 2 17 3 76 73 29) #9# #1# 2084) si::fset)) #1# 2084) #Y(si::bytecodes nil nil (15 0 1 16 12 14 17 9 3 19 4 18 1 0 73 29) #10=#A(t (19) (swank::with-available-arglist #:g3557 #:g3556 #:g3558 si::dm-too-few-arguments #:g3559 #:g3560 swank::var swank::more-vars swank::form swank::body multiple-value-bind if eql :not-available progn #Y(swank::with-available-arglist nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 45 8 10 4 76 39 6 13 6 19 1 4 10 4 4 12 10 4 5 51 4 22 45 9 10 5 45 10 15 11 13 3 10 2 7 2 12 13 1 15 12 15 13 13 3 11 14 6 3 12 14 14 15 15 10 0 7 2 6 4 6 4 73 29) #10# #1# 2163) t si::fset)) #1# 2163) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 13 77 77 15 6 19 15 7 15 0 19 1 27 78 23 15 8 1 25 12 19 2 26 1 0 73 29) #11=#A(t (28) (swank-backend::arglist swank::arglist. (swank::provided-args swank::required-args swank::optional-args swank::key-p swank::keyword-args rest swank::body-p swank::allow-other-keys-p swank::aux-args swank::any-p swank::any-args swank::known-junk swank::unknown-junk) ((swank::provided-args nil t nil 0 nil) (swank::required-args nil t nil 1 nil) (swank::optional-args nil t nil 2 nil) (swank::key-p nil t nil 3 nil) (swank::keyword-args nil t nil 4 nil) (rest nil t nil 5 nil) (swank::body-p nil t nil 6 nil) (swank::allow-other-keys-p nil t nil 7 nil) (swank::aux-args nil t nil 8 nil) (swank::any-p nil t nil 9 nil) (swank::any-args nil t nil 10 nil) (swank::known-junk nil t nil 11 nil) (swank::unknown-junk nil t nil 12 nil)) swank::copy-arglist (swank::make-arglist) swank::arglist-p si::define-structure swank::make-arglist (nil :unknown-junk :known-junk :any-args :any-p :aux-args :allow-other-keys-p :body-p :rest :keyword-args :key-p :optional-args :required-args :provided-args) #:provided-args #:required-args #:optional-args #:key-p #:keyword-args #:rest #:body-p #:allow-other-keys-p #:aux-args #:any-p #:any-args #:known-junk #:unknown-junk 0 si::make-structure #Y(swank::make-arglist nil nil (28 9 22 40 2 77 46 10 22 40 2 77 46 11 22 40 2 77 46 12 22 40 2 77 46 13 22 40 2 77 46 14 22 40 2 77 46 15 22 40 2 77 46 16 22 40 2 77 46 17 22 40 2 77 46 18 22 40 2 77 46 19 22 40 2 77 46 20 22 40 2 77 46 21 22 40 2 77 46 22 15 23 13 12 13 11 13 10 13 9 13 8 13 7 13 6 13 5 13 4 13 3 13 2 13 1 13 0 19 14 24 29) #11# #1# 2378) si::fset find-class)) #1# 2378) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 1 77 77 15 6 19 15 7 15 0 19 1 14 78 10 15 8 1 12 12 19 2 13 1 0 73 29) #12=#A(t (15) (swank::arglist-dummy #:arglist-dummy. (swank::string-representation) ((swank::string-representation nil t nil 0 nil)) swank::copy-arglist-dummy ((swank::make-arglist-dummy (swank::string-representation))) swank::arglist-dummy-p si::define-structure swank::make-arglist-dummy swank::string-representation 0 si::make-structure #Y(swank::make-arglist-dummy nil nil (24 45 9 26 15 10 13 0 19 2 11 29) #12# #1# 3171) si::fset find-class)) #1# 3171) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #13=#A(t (8) (swank::empty-arg-p swank::dummy swank::arglist-dummy-p swank::arglist-dummy.string-representation length zerop #Y(swank::empty-arg-p nil nil (24 45 1 26 13 0 19 1 2 73 39 10 13 0 19 1 3 16 4 16 5 29) #13# #1# 4847) si::fset)) #1# 4847) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (swank::+lambda-list-keywords+ si::*make-special (swank::&provided swank::&required &optional &rest &key swank::&any))) #1# 4980) #Y(si::bytecodes nil nil (15 0 1 119 12 14 120 9 2 19 4 121 1 0 73 29) #14=#A(t (122) (swank::do-decoded-arglist #:g3562 #:g3561 #:g3563 si::dm-too-few-arguments swank::decoded-arglist swank::clauses (loop swank::for swank::clause swank::in swank::clauses swank::thereis (member (car swank::clause) swank::+lambda-list-keywords+)) si::assert-failure #:loop-list3813 swank::clause #:loop-it-3814 0 swank::+lambda-list-keywords+ member length swank::size :test eq :size make-hash-table swank::initial swank::main swank::final #:loop-list3825 swank::lambda-list-keyword swank::clause-parameter second :initially si::hash-set :finally #Y(swank::parse-clauses nil nil (24 45 6 26 11 13 16 15 45 16 14 17 33 18 12 14 19 13 0 19 4 20 45 21 14 17 33 18 12 14 19 13 1 19 4 20 45 22 14 17 33 18 12 14 19 13 2 19 4 20 45 23 58 60 110 77 13 5 46 24 46 10 75 45 25 75 45 26 57 12 61 2 2 72 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 3 4 51 2 10 3 16 27 51 1 10 1 42 28 12 13 2 13 8 13 3 19 3 29 38 24 42 30 12 13 2 13 6 13 3 19 3 29 38 10 13 2 13 7 13 3 19 3 29 35 0 0 13 8 13 7 13 6 72 3 36 5 62 73 43 1 43 1 43 2 63 43 4 29) #14# #1# 5134) swank-backend::arglist #:|tmp-3864| #:|op-3862| #:|rand-3863| swank::&provided #:g3865 #:g3866 #:g3867 #:g3868 swank::arg swank::body si::dm-too-many-arguments "PROVIDED-ARG+" gensym dolist swank::arglist.provided-args declare ignorable let swank::&required #:g3869 #:g3870 #:g3871 #:g3872 "REQUIRED-ARG+" swank::arglist.required-args &optional #:g3873 #:g3874 #:g3875 #:g3876 swank::init "OPTIONAL-ARG+" swank::optarg swank::arglist.optional-args swank::optional-arg.arg-name swank::optional-arg.default-arg append &key #:g3877 #:g3878 #:g3879 #:g3880 keyword "KEY-ARG+" swank::keyarg swank::arglist.keyword-args swank::keyword-arg.keyword swank::keyword-arg.arg-name swank::keyword-arg.default-arg &rest #:g3881 #:g3882 #:g3883 #:g3884 swank::body-p when swank::arglist.rest swank::arglist.body-p swank::&any #:g3885 #:g3886 #:g3887 #:g3888 "REQUIRED-ARG+" swank::arglist.any-args "destructure-case failed: ~S" error #Y(swank::generate-main-clause nil nil (24 45 10 24 45 32 26 10 1 45 33 10 0 4 45 34 10 1 5 45 35 10 1 42 36 128 10 0 45 37 10 0 45 38 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 39 10 0 45 40 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 41 10 3 45 42 10 2 39 6 13 5 19 1 43 15 44 19 1 45 45 45 15 46 13 0 15 47 10 10 6 2 6 2 12 15 48 15 49 10 0 6 2 6 2 12 15 50 10 2 73 39 10 13 2 10 0 6 2 6 1 73 12 10 1 7 3 6 4 73 43 1 43 6 38 810 42 51 128 10 0 45 52 10 0 45 53 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 54 10 0 45 55 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 41 10 3 45 42 10 2 39 6 13 5 19 1 43 15 56 19 1 45 45 45 15 46 13 0 15 57 10 10 6 2 6 2 12 15 48 15 49 10 0 6 2 6 2 12 15 50 10 2 73 39 10 13 2 10 0 6 2 6 1 73 12 10 1 7 3 6 4 73 43 1 43 6 38 680 42 58 174 10 0 45 59 10 0 45 60 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 61 10 0 45 62 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 41 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 2 75 45 63 10 4 45 42 10 3 39 6 13 6 19 1 43 15 64 19 1 45 45 65 15 46 13 0 15 66 10 11 6 2 6 2 12 15 48 15 49 10 0 6 2 6 2 12 15 50 10 3 73 39 14 13 3 15 67 10 0 6 2 6 2 6 1 73 12 10 2 73 39 14 13 2 15 68 10 0 6 2 6 2 6 1 73 12 19 2 69 12 10 1 7 3 6 4 73 43 1 43 7 38 504 42 70 212 10 0 45 71 10 0 45 72 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 73 10 0 45 74 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 75 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 2 75 45 41 10 2 39 13 10 2 4 12 10 2 5 51 2 22 38 2 75 45 63 10 5 45 42 10 4 39 6 13 7 19 1 43 15 76 19 1 45 45 77 15 46 13 0 15 78 10 12 6 2 6 2 12 15 48 15 49 10 0 6 2 6 2 12 15 50 10 4 73 39 14 13 4 15 79 10 0 6 2 6 2 6 1 73 12 10 3 73 39 14 13 3 15 80 10 0 6 2 6 2 6 1 73 12 10 2 73 39 14 13 2 15 81 10 0 6 2 6 2 6 1 73 12 19 3 69 12 10 1 7 3 6 4 73 43 1 43 8 38 290 42 82 150 10 0 45 83 10 0 45 84 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 85 10 0 45 86 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 41 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 2 75 45 87 10 4 45 42 10 3 39 6 13 6 19 1 43 15 88 15 89 10 10 6 2 12 15 50 10 2 73 39 14 13 2 15 89 10 10 6 2 6 2 6 1 73 12 10 1 73 39 14 13 1 15 90 10 10 6 2 6 2 6 1 73 12 19 2 69 12 10 0 7 3 6 3 73 43 7 38 138 42 91 128 10 0 45 92 10 0 45 93 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 94 10 0 45 95 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 41 10 3 45 42 10 2 39 6 13 5 19 1 43 15 96 19 1 45 45 45 15 46 13 0 15 97 10 10 6 2 6 2 12 15 48 15 49 10 0 6 2 6 2 12 15 50 10 2 73 39 10 13 2 10 0 6 2 6 1 73 12 10 1 7 3 6 4 73 43 1 43 6 38 8 15 98 13 2 19 2 99 43 3 29) #14# #1# 5134) "DECODED-ARGLIST+" swank::finally-clauses swank::main-clauses swank::initially-clauses block (swank::&provided swank::&required &optional &rest &key swank::&any) #:loop-list3889 #:loop-list-head3890 #:loop-list-tail3891 #:g3892 gethash cddr copy-list #:g3893 rplacd last #:g3894 #:g3895 #Y(swank::do-decoded-arglist nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 45 6 38 6 15 7 19 1 8 58 60 62 77 13 1 46 9 46 10 75 45 11 57 12 61 2 2 40 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 4 12 14 13 19 2 14 51 1 39 6 10 1 73 36 4 35 0 0 62 43 1 43 2 63 76 40 -71 30 2 31 100 15 101 19 1 45 45 32 13 3 32 2 18 1 47 2 102 47 1 103 45 104 15 50 13 3 10 7 6 2 6 1 12 15 105 15 0 58 60 167 77 15 106 46 107 46 75 75 6 1 45 108 10 0 45 109 57 12 61 2 2 133 10 4 4 51 3 10 4 5 51 4 10 1 45 110 13 4 13 7 19 2 111 16 112 16 113 45 114 13 1 10 0 17 115 10 0 43 1 43 1 39 10 10 1 5 12 19 1 116 51 1 13 1 13 3 13 7 19 2 111 45 10 10 0 39 9 13 0 13 10 32 11 18 2 43 1 6 1 51 1 17 115 10 1 45 117 13 4 13 9 19 2 111 16 112 16 113 45 118 13 1 10 0 17 115 10 0 43 1 43 1 39 10 10 1 5 12 19 1 116 51 1 10 4 2 39 4 35 0 1 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 7 3 6 3 73 43 3 43 1 43 2 29) #14# #1# 5134) t si::fset)) #1# 5134) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #15=#A(t (8) (swank::undummy swank::x swank::arglist-dummy typep swank::arglist-dummy.string-representation prin1-to-string #Y(swank::undummy nil nil (24 45 1 26 13 0 15 2 19 2 3 39 8 13 0 19 1 4 38 5 10 0 16 5 29) #15# #1# 8746) si::fset)) #1# 8746) #Y(si::bytecodes nil nil (15 0 1 80 12 19 2 81 1 0 73 29) #16=#A(t (82) (swank::print-decoded-arglist swank-backend::arglist (nil :highlight :provided-args :operator) swank::operator swank::provided-args swank::highlight swank::index #:g4117 *standard-output* #:pprint-logical-block-length-4119 swank::print-arg :current pprint-indent swank::remove-given-args #:decoded-arglist+4222 swank::arglist.provided-args si::%dolist-var #:provided-arg+4223 swank::arg t #\  write-char :fill pprint-newline #:g4273 + swank::arglist.required-args #:required-arg+4224 swank::arglist-p eql :highlight "===> " princ " <===" #:g4277 swank::arglist.optional-args &optional #:optional-arg+4225 swank::optional-arg.arg-name swank::optional-arg.default-arg swank::init-value "~:@<~A ~A~@:>" swank::undummy format #:g4281 swank::arglist.rest swank::arglist.body-p swank::bodyp swank::args &body &rest swank::arglist.key-p &key swank::arglist.keyword-args #:key-arg+4226 swank::keyword-arg.keyword swank::keyword-arg.arg-name swank::keyword-arg.default-arg swank::init keyword #:g4297 #:pprint-logical-block-length-4299 prin1 #Y(#:pprint-logical-block-4298 nil nil (24 45 60 24 48 8 26 8 0 45 61 13 2 19 1 62 10 13 76 39 7 11 19 51 13 38 11 15 20 19 1 21 14 22 19 1 23 13 2 10 11 4 17 29 39 14 13 3 14 30 10 11 5 12 19 3 0 38 6 13 3 19 1 0 44 1 29) #16# #1# 8901) "(" ")" si::pprint-logical-block-helper keywordp "~:@<~A ~A~@:>" "~:@<(~A ..) ~A~@:>" "~:@<(~S ..)~@:>" swank::arglist.allow-other-keys-p &allow-other-keys swank::arglist.any-p swank::&any swank::arglist.any-args #:required-arg+4227 #Y(#:pprint-logical-block-4118 nil nil (24 45 7 24 48 8 26 8 0 45 9 10 5 39 13 13 5 19 1 10 14 11 9 1 19 2 12 13 6 13 4 19 2 13 45 14 13 0 19 1 15 45 16 75 45 17 38 58 10 1 4 51 0 10 0 45 18 10 9 76 39 7 11 19 51 9 38 11 15 20 19 1 21 14 22 19 1 23 13 0 19 1 10 8 1 45 24 13 7 13 0 19 2 25 51 7 43 1 43 1 10 1 5 51 1 10 1 40 -60 43 2 13 0 19 1 26 45 16 75 45 27 38 120 10 1 4 51 0 10 0 45 18 10 9 76 39 7 11 19 51 9 38 11 15 20 19 1 21 14 22 19 1 23 13 0 19 1 28 39 30 13 6 10 7 4 17 29 39 14 13 0 14 30 10 7 5 12 19 3 0 38 6 13 0 19 1 0 38 32 13 6 10 7 4 17 29 39 18 15 31 19 1 32 13 0 19 1 10 15 33 19 1 32 38 6 13 0 19 1 10 8 1 45 34 13 7 13 0 19 2 25 51 7 43 1 43 1 10 1 5 51 1 10 1 40 -122 43 2 13 7 19 1 35 39 27 10 6 76 39 7 11 19 51 6 38 11 15 20 19 1 21 14 22 19 1 23 15 36 19 1 32 13 0 19 1 35 45 16 75 45 37 38 184 10 1 4 51 0 13 0 19 1 38 12 13 0 19 1 39 12 46 40 46 18 10 10 76 39 7 11 19 51 10 38 11 15 20 19 1 21 14 22 19 1 23 13 0 19 1 28 39 30 13 7 10 8 4 17 29 39 14 13 0 14 30 10 8 5 12 19 3 0 38 6 13 0 19 1 0 38 84 13 7 10 8 4 17 29 39 44 15 31 19 1 32 10 1 76 39 8 13 0 19 1 10 38 20 14 19 15 41 13 0 19 1 42 12 13 1 19 1 42 12 19 4 43 15 33 19 1 32 38 32 10 1 76 39 8 13 0 19 1 10 38 20 14 19 15 41 13 0 19 1 42 12 13 1 19 1 42 12 19 4 43 8 1 45 44 13 8 13 0 19 2 25 51 8 43 1 43 2 10 1 5 51 1 10 1 40 -186 43 2 13 0 19 1 45 39 144 13 0 19 1 45 12 13 0 19 1 46 12 46 47 46 48 10 8 76 39 7 11 19 51 8 38 11 15 20 19 1 21 14 22 19 1 23 10 1 39 6 1 49 73 38 4 1 50 73 12 19 1 32 10 8 76 39 7 11 19 51 8 38 11 15 20 19 1 21 14 22 19 1 23 13 0 19 1 28 39 30 13 5 10 6 4 17 29 39 14 13 0 14 30 10 6 5 12 19 3 0 38 6 13 0 19 1 0 38 32 13 5 10 6 4 17 29 39 18 15 31 19 1 32 13 0 19 1 10 15 33 19 1 32 38 6 13 0 19 1 10 43 2 13 7 19 1 51 39 27 10 6 76 39 7 11 19 51 6 38 11 15 20 19 1 21 14 22 19 1 23 15 52 19 1 32 13 0 19 1 53 45 16 75 45 54 38 251 10 1 4 51 0 13 0 19 1 55 12 13 0 19 1 56 12 13 0 19 1 57 12 46 58 46 18 46 59 10 11 76 39 7 11 19 51 11 38 11 15 20 19 1 21 14 22 19 1 23 13 1 19 1 28 39 16 34 63 12 77 77 15 64 77 15 65 19 6 66 38 172 13 0 10 9 4 17 29 39 88 15 31 19 1 32 10 2 39 5 10 0 16 67 39 18 14 19 15 68 13 0 13 2 19 1 42 12 19 4 43 38 49 10 2 39 22 14 19 15 69 13 0 19 1 42 12 13 2 19 1 42 12 19 4 43 38 24 10 0 16 67 76 39 12 14 19 15 70 13 0 19 3 43 38 6 13 0 19 1 32 15 33 19 1 32 38 76 10 2 39 5 10 0 16 67 39 18 14 19 15 68 13 0 13 2 19 1 42 12 19 4 43 38 49 10 2 39 22 14 19 15 69 13 0 19 1 42 12 13 2 19 1 42 12 19 4 43 38 24 10 0 16 67 76 39 12 14 19 15 70 13 0 19 3 43 38 6 13 0 19 1 32 43 3 10 1 5 51 1 10 1 40 -253 43 2 13 7 19 1 71 39 27 10 6 76 39 7 11 19 51 6 38 11 15 20 19 1 21 14 22 19 1 23 15 72 19 1 32 13 7 19 1 73 39 27 10 6 76 39 7 11 19 51 6 38 11 15 20 19 1 21 14 22 19 1 23 15 74 19 1 32 13 0 19 1 75 45 16 75 45 76 38 43 10 1 4 51 0 10 0 45 18 10 9 76 39 7 11 19 51 9 38 11 15 20 19 1 21 14 22 19 1 23 13 0 19 1 10 43 1 10 1 5 51 1 10 1 40 -45 75 73 43 2 43 1 44 1 29) #16# #1# 8901) "(" ")" #Y(swank::print-decoded-arglist nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 2 77 46 4 22 40 2 77 46 5 8 0 45 6 34 77 12 77 77 15 78 77 15 79 19 6 66 43 1 29) #16# #1# 8901) si::fset)) #1# 8901) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #17=#A(t (9) (swank::print-arg swank::arg swank::arglist-dummy-p swank::arglist-dummy.string-representation keywordp prin1 princ #Y(swank::print-arg nil nil (24 45 1 26 13 0 19 1 2 39 8 13 0 19 1 3 38 3 10 0 45 1 10 0 16 4 39 8 13 0 19 1 5 38 6 13 0 19 1 6 43 1 29) #17# #1# 12688) si::fset)) #1# 12688) #Y(si::bytecodes nil nil (15 0 1 59 12 19 2 60 1 0 73 29) #18=#A(t (61) (swank::print-decoded-arglist-as-template swank::decoded-arglist (nil :suffix :prefix) "(" swank::prefix ")" swank::suffix t swank::first-p #\  write-char #Y(space nil nil (26 10 0 76 39 6 15 9 19 1 10 75 51 0 73 29) #18# #1# 12908) swank::arg #:g4342 symbol typep keywordp prin1 princ string list swank::arglist-dummy swank::arglist-dummy.string-representation swank-backend::arglist (symbol string list swank::arglist-dummy swank-backend::arglist) si::etypecase-error :fill pprint-newline #Y(swank::print-arg-or-pattern nil nil (24 45 12 26 10 0 45 13 13 0 15 14 19 2 15 39 21 10 1 16 16 39 8 13 1 19 1 17 38 6 13 1 19 1 18 38 75 13 0 15 19 19 2 15 39 8 13 1 19 1 18 38 59 13 0 15 20 19 2 15 39 8 13 1 19 1 18 38 43 13 0 15 21 19 2 15 39 12 13 1 19 1 22 12 19 1 18 38 23 13 0 15 23 19 2 15 39 8 13 1 19 1 0 38 7 13 0 1 24 17 25 43 1 14 26 19 1 27 29) #18# #1# 12908) #:g4343 *standard-output* #:pprint-logical-block-length-4345 #:decoded-arglist+4364 swank::arglist.provided-args si::%dolist-var #:provided-arg+4365 swank::arglist.required-args #:required-arg+4366 swank::arglist.optional-args #:optional-arg+4367 swank::optional-arg.arg-name "[" "]" swank::arglist.rest swank::args swank::arglist.keyword-args swank::arglist.allow-other-keys-p "~A..." format #:key-arg+4368 swank::keyword-arg.keyword swank::keyword-arg.arg-name keyword quote :linear swank::arglist.any-args #:required-arg+4369 #Y(#:pprint-logical-block-4344 nil nil (24 45 29 24 48 30 26 8 0 45 31 10 7 45 32 13 0 19 1 33 45 34 75 45 35 38 11 10 1 4 51 0 10 1 5 51 1 10 1 40 -13 43 2 13 0 19 1 36 45 34 75 45 37 38 27 10 1 4 51 0 10 0 45 12 32 7 18 0 13 0 32 6 18 1 43 1 10 1 5 51 1 10 1 40 -29 43 2 13 0 19 1 38 45 34 75 45 39 38 40 10 1 4 51 0 13 0 19 1 40 45 12 32 7 18 0 15 41 19 1 18 13 0 32 6 18 1 15 42 19 1 18 43 1 10 1 5 51 1 10 1 40 -42 43 2 13 0 19 1 43 39 38 13 0 19 1 43 45 44 13 9 19 1 45 76 40 6 13 9 19 1 46 39 14 32 5 18 0 14 7 15 47 13 0 19 3 48 43 1 13 0 19 1 45 45 34 75 45 49 38 70 10 1 4 51 0 13 0 19 1 50 12 13 0 19 1 51 12 46 12 46 52 32 8 18 0 10 0 16 16 39 6 10 0 73 38 8 15 53 10 0 6 2 73 12 19 1 17 32 8 18 0 13 1 32 7 18 1 14 54 19 1 27 43 2 10 1 5 51 1 10 1 40 -72 43 2 13 0 19 1 55 45 34 75 45 56 38 27 10 1 4 51 0 10 0 45 12 32 7 18 0 13 0 32 6 18 1 43 1 10 1 5 51 1 10 1 40 -29 75 73 43 2 43 1 44 1 29) #18# #1# 12908) si::pprint-logical-block-helper #Y(swank::print-decoded-arglist-as-template nil nil (24 45 1 28 2 22 40 3 15 3 46 4 22 40 3 15 5 46 6 11 7 45 8 30 2 11 28 34 57 12 77 77 13 4 77 13 3 19 6 58 43 2 43 1 29) #18# #1# 12908) si::fset)) #1# 12908) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (swank::*arglist-pprint-bindings* si::*make-special boundp ((*print-case* . :downcase) (*print-pretty* . t) (*print-circle*) (*print-readably*) (*print-level* . 10) (*print-length* . 20) (*print-escape*)))) #1# 14542) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 1 0 73 29) #A(t (4) (swank::*arglist-show-packages* si::*make-special boundp t)) #1# 14793) #Y(si::bytecodes nil nil (15 0 1 14 12 14 15 9 1 19 4 16 1 0 73 29) #19=#A(t (17) (swank::with-arglist-io-syntax #:g4371 #:g4370 #:g4372 swank::body gensym package let *package* with-standard-io-syntax if swank::*arglist-show-packages* swank::with-bindings swank::*arglist-pprint-bindings* #Y(swank::with-arglist-io-syntax nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 45 4 19 0 5 45 6 15 7 13 0 1 8 6 2 6 1 12 15 9 15 7 15 8 15 10 15 11 15 8 10 0 6 4 6 2 6 1 12 15 12 15 13 10 1 7 3 6 3 6 2 6 3 73 43 1 29) #19# #1# 14831) t si::fset)) #1# 14831) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #20=#A(t (23) (swank::decoded-arglist-to-string swank::decoded-arglist (nil :print-right-margin :highlight :operator) swank::operator swank::highlight swank::print-right-margin make-string-output-stream *standard-output* *package* #:g4374 si::+io-syntax-progv-list+ #21=#:%progv-list swank::*arglist-show-packages* swank::*arglist-pprint-bindings* *print-right-margin* :operator :highlight swank::print-decoded-arglist #Y(nil nil nil (26 10 2 48 14 13 5 14 15 13 4 14 16 13 3 19 5 17 44 1 29) #20# #1# 15195) swank::call-with-bindings get-output-stream-string #Y(swank::decoded-arglist-to-string nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 2 77 46 4 22 40 2 77 46 5 19 0 6 48 7 11 8 45 9 11 10 45 11 10 0 4 12 10 0 5 67 11 12 39 5 11 8 38 3 10 1 48 8 14 13 34 18 12 19 2 19 44 1 68 43 1 43 1 11 7 16 20 44 1 29) #20# #1# 15195) si::fset)) #1# 15195) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #22=#A(t (23) (swank::decoded-arglist-to-template-string swank::decoded-arglist (nil :suffix :prefix) "(" swank::prefix ")" swank::suffix make-string-output-stream *standard-output* *package* #:g4376 si::+io-syntax-progv-list+ #21# swank::*arglist-show-packages* swank::*arglist-pprint-bindings* :prefix :suffix swank::print-decoded-arglist-as-template #Y(nil nil nil (26 13 4 14 15 13 3 14 16 13 2 19 5 17 29) #22# #1# 15652) swank::call-with-bindings get-output-stream-string #Y(swank::decoded-arglist-to-template-string nil nil (24 45 1 28 2 22 40 3 15 3 46 4 22 40 3 15 5 46 6 19 0 7 48 8 11 9 45 10 11 11 45 12 10 0 4 12 10 0 5 67 11 13 39 5 11 9 38 3 10 1 48 9 14 14 34 18 12 19 2 19 44 1 68 43 1 43 1 11 8 16 20 44 1 29) #22# #1# 15652) si::fset)) #1# 15652) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #23=#A(t (15) (swank::decode-required-arg swank::arg #:g4378 symbol typep swank::arglist-dummy list swank::decode-arglist (symbol swank::arglist-dummy list) si::etypecase-error #Y(swank::decode-required-arg nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 6 10 1 73 38 37 13 0 15 5 19 2 4 39 6 10 1 73 38 23 13 0 15 6 19 2 4 39 8 13 1 19 1 7 38 7 13 0 1 8 17 9 43 1 29) #23# #1# 16041) si::fset function "ARG can be a symbol or a destructuring pattern." si::set-documentation)) #1# 16041) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 1 0 73 29) #24=#A(t (11) (swank::encode-required-arg swank::arg #:g4380 symbol typep swank-backend::arglist swank::encode-arglist (symbol swank-backend::arglist) si::etypecase-error #Y(swank::encode-required-arg nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 6 10 1 73 38 23 13 0 15 5 19 2 4 39 8 13 1 19 1 6 38 7 13 0 1 7 17 8 43 1 29) #24# #1# 16278) si::fset)) #1# 16278) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 3 77 77 15 6 19 15 7 15 0 19 1 16 78 12 15 8 1 14 12 19 2 15 1 0 73 29) #25=#A(t (17) (swank::keyword-arg swank::keyword-arg. (keyword swank::arg-name swank::default-arg) ((keyword nil t nil 0 nil) (swank::arg-name nil t nil 1 nil) (swank::default-arg nil t nil 2 nil)) swank::copy-keyword-arg ((swank::make-keyword-arg (keyword swank::arg-name swank::default-arg))) swank::keyword-arg-p si::define-structure swank::make-keyword-arg keyword swank::arg-name swank::default-arg 0 si::make-structure #Y(swank::make-keyword-arg nil nil (24 45 9 24 45 10 24 45 11 26 15 12 13 2 13 1 13 0 19 4 13 29) #25# #1# 16388) si::fset find-class)) #1# 16388) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 15 0 15 25 15 26 19 3 27 1 0 73 29) #26=#A(t (28) (swank::decode-keyword-arg swank::arg #:g4384 symbol typep symbol-name swank::arglist-dummy swank::arglist-dummy.string-representation (symbol swank::arglist-dummy) si::etypecase-error swank::keyword-package intern #Y(swank::intern-as-keyword nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 7 10 1 16 5 38 23 13 0 15 6 19 2 4 39 8 13 1 19 1 7 38 7 13 0 1 8 17 9 12 43 1 14 10 19 2 11 29) #26# #1# 16570) symbolp swank::arglist-dummy-p swank::make-keyword-arg consp caar cadar swank::decode-required-arg cadr "Bad keyword item of formal argument list" error #Y(swank::decode-keyword-arg nil nil (24 45 1 26 30 1 12 10 1 16 13 40 6 13 1 19 1 14 39 16 13 1 32 0 18 1 12 13 1 77 19 3 15 38 72 10 1 16 16 39 6 10 1 4 16 16 39 25 10 1 16 17 12 10 1 16 18 12 19 1 19 12 10 1 16 20 12 19 3 15 38 35 10 1 16 16 39 24 10 1 4 12 32 0 18 1 12 10 1 4 12 10 1 16 20 12 19 3 15 38 6 15 21 19 1 22 43 1 29) #26# #1# 16570) si::fset function "Decode a keyword item of formal argument list.
Return three values: keyword, argument name, default arg." si::set-documentation)) #1# 16570) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 1 0 73 29) #27=#A(t (14) (swank::encode-keyword-arg swank::arg swank::keyword-arg.arg-name swank::arglist-p swank::keyword-arg.keyword swank::encode-required-arg swank::keyword/name swank::keyword-arg.default-arg symbol-name swank::keyword-package intern eql #Y(swank::encode-keyword-arg nil nil (24 45 1 26 13 0 19 1 2 12 19 1 3 39 48 13 0 19 1 4 12 13 0 19 1 2 12 19 1 5 6 2 45 6 13 1 19 1 7 39 13 13 0 13 1 19 1 7 6 2 73 38 6 10 0 6 1 73 43 1 38 95 13 0 19 1 2 16 8 12 14 9 19 2 10 12 13 0 19 1 4 17 11 39 31 13 0 19 1 7 39 17 13 0 19 1 2 12 13 0 19 1 7 6 2 73 38 6 13 0 19 1 2 38 42 13 0 19 1 4 12 13 0 19 1 2 6 2 45 6 13 1 19 1 7 39 13 13 0 13 1 19 1 7 6 2 73 38 6 10 0 6 1 73 43 1 29) #27# #1# 17503) si::fset)) #1# 17503) #Y(si::bytecodes nil nil (38 6 15 0 19 1 1 15 2 19 1 3 12 14 4 15 2 77 19 3 5 17 6 76 40 -23 38 6 15 7 19 1 1 15 8 19 1 3 12 14 4 15 2 14 9 19 3 5 17 6 76 40 -24 38 6 15 10 19 1 1 15 11 19 1 3 12 14 4 15 12 77 19 3 5 17 6 76 40 -23 38 7 15 13 19 1 1 75 15 14 19 1 3 12 14 4 15 12 14 9 19 3 5 17 6 76 40 -25 73 29) #A(t (15) ((equalp (swank::decode-keyword-arg 'swank::x) (swank::make-keyword-arg :x 'swank::x nil)) si::assert-failure swank::x swank::decode-keyword-arg :x swank::make-keyword-arg equalp (equalp (swank::decode-keyword-arg '#28=(swank::x t)) (swank::make-keyword-arg :x 'swank::x t)) #28# t (equalp (swank::decode-keyword-arg '#29=((:x swank::y))) (swank::make-keyword-arg :x 'swank::y nil)) #29# swank::y (equalp (swank::decode-keyword-arg '#30=((:x swank::y) t)) (swank::make-keyword-arg :x 'swank::y t)) #30#)) #1# 18545) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 77 15 6 19 15 7 15 0 19 1 15 78 11 15 8 1 13 12 19 2 14 1 0 73 29) #31=#A(t (16) (swank::optional-arg swank::optional-arg. (swank::arg-name swank::default-arg) ((swank::arg-name nil t nil 0 nil) (swank::default-arg nil t nil 1 nil)) swank::copy-optional-arg ((swank::make-optional-arg (swank::arg-name swank::default-arg))) swank::optional-arg-p si::define-structure swank::make-optional-arg swank::arg-name swank::default-arg 0 si::make-structure #Y(swank::make-optional-arg nil nil (24 45 9 24 45 10 26 15 11 13 1 13 0 19 3 12 29) #31# #1# 18944) si::fset find-class)) #1# 18944) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #32=#A(t (17) (swank::decode-optional-arg swank::arg #:g4386 symbol typep swank::make-optional-arg swank::arglist-dummy list swank::decode-required-arg cadr (symbol swank::arglist-dummy list) si::etypecase-error #Y(swank::decode-optional-arg nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 9 13 1 77 19 2 5 38 51 13 0 15 6 19 2 4 39 9 13 1 77 19 2 5 38 34 13 0 15 7 19 2 4 39 19 10 1 4 12 19 1 8 12 10 1 16 9 12 19 2 5 38 7 13 0 1 10 17 11 43 1 29) #32# #1# 19132) si::fset function "Decode an optional item of a formal argument list.
Return an OPTIONAL-ARG structure." si::set-documentation)) #1# 19132) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #33=#A(t (8) (swank::encode-optional-arg swank::optional-arg swank::optional-arg.default-arg swank::optional-arg.arg-name swank::arglist-p swank::encode-required-arg #Y(swank::encode-optional-arg nil nil (24 45 1 26 13 0 19 1 2 40 10 13 0 19 1 3 12 19 1 4 39 21 13 0 19 1 3 12 19 1 5 12 13 0 19 1 2 6 2 73 38 6 13 0 19 1 3 29) #33# #1# 19500) si::fset)) #1# 19500) #Y(si::bytecodes nil nil (38 6 15 0 19 1 1 15 2 19 1 3 12 15 2 77 19 2 4 17 5 76 40 -21 38 7 15 6 19 1 1 75 15 7 19 1 3 12 15 2 14 8 19 2 4 17 5 76 40 -23 73 29) #A(t (9) ((equalp (swank::decode-optional-arg 'swank::x) (swank::make-optional-arg 'swank::x nil)) si::assert-failure swank::x swank::decode-optional-arg swank::make-optional-arg equalp (equalp (swank::decode-optional-arg '#34=(swank::x t)) (swank::make-optional-arg 'swank::x t)) #34# t)) #1# 19843) #Y(si::bytecodes nil nil (15 0 1 33 12 14 34 9 2 19 4 35 15 0 15 36 15 37 19 3 38 1 0 73 29) #35=#A(t (39) (swank::nreversef #:g4387 si::env #:g4388 si::dm-too-few-arguments si::%reference si::dm-too-many-arguments get-setf-expansion si::getter si::setter si::stores si::vals si::vars si::v gensym #Y(nil nil nil (24 45 13 26 19 0 14 12 10 0 6 2 73 29) #35# #1# 20040) mapcar si::all-vars symbolp nreverse car let* declare :read-only first subst si::let-list si::d listp the eq cadr append #Y(swank::nreversef nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 39 6 13 3 19 1 6 13 0 13 2 19 2 7 47 4 8 47 3 9 47 2 10 47 1 11 45 12 34 15 12 75 7 1 12 19 2 16 45 17 10 5 16 18 39 51 15 19 13 5 33 20 12 13 0 19 2 16 7 3 12 10 3 4 12 15 21 13 0 15 22 14 23 33 24 12 13 0 19 2 16 7 2 6 2 12 10 4 6 4 12 19 3 25 38 150 13 1 13 2 77 46 26 46 13 46 27 38 29 10 0 5 12 10 1 5 12 10 0 4 12 10 1 4 6 2 12 10 2 3 12 53 2 53 1 53 0 10 0 76 39 -32 10 6 4 12 10 9 16 28 39 9 10 9 4 12 1 29 17 30 39 19 15 29 10 9 16 31 12 15 19 13 8 75 7 3 6 3 38 15 15 19 13 8 33 20 12 13 3 19 2 16 7 3 6 2 12 13 3 13 2 19 2 32 7 2 51 2 15 21 10 2 16 19 12 15 22 14 23 33 24 12 13 3 19 2 16 12 13 4 19 2 32 7 2 6 2 12 10 7 6 4 73 43 3 43 1 43 5 29) #35# #1# 20040) t si::fset function "Reverse the list in PLACE." si::set-documentation)) #1# 20040) #Y(si::bytecodes nil nil (15 0 1 111 12 19 2 112 15 0 15 113 15 114 19 3 115 1 0 73 29) #36=#A(t (116) (swank::decode-arglist swank-backend::arglist #:g4389 #37=(eql :not-available) typep :not-available list (#37# list) si::etypecase-error swank::mode swank::make-arglist swank::result swank::arg 0 consp #:g4390 &rest swank::&unknown-junk eql #:g4395 #:g4393 swank::arglist.unknown-junk #:g4394 si::structure-set &allow-other-keys #:g4396 t #:g4397 &key #:g4398 #:g4399 (&optional &rest &body &aux) swank::memq (&whole &environment) #:g4403 #:g4401 swank::arglist.known-junk #:g4402 symbolp symbol-name #:&any string string= #:g4404 #:g4405 swank::&any lambda-list-keywords #:g4408 #:g4406 #:g4407 #:g4409 swank::decode-keyword-arg #:g4412 #:g4410 swank::arglist.keyword-args #:g4411 &optional swank::decode-optional-arg #:g4415 #:g4413 swank::arglist.optional-args #:g4414 &body #:g4416 #:g4417 #:g4418 #:g4419 #:g4420 #:g4421 &aux #:g4424 #:g4422 swank::arglist.aux-args #:g4423 nil swank::decode-required-arg #:g4427 #:g4425 swank::arglist.required-args #:g4426 &whole &environment #:g4431 #:g4429 #:g4430 #:g4434 #:g4432 swank::arglist.any-args #:g4433 (&key &optional &body &rest &aux nil &environment &whole swank::&any) si::ecase-error #:g4435 nreverse #:g4436 #:g4437 #:g4438 #:g4439 #:g4440 #:g4441 #:g4442 #:g4443 #:g4444 #:g4445 #:g4446 #:g4447 #:g4448 (or (and (not (swank::arglist.key-p swank::result)) (not (swank::arglist.any-p swank::result))) (swank::exactly-one-p (swank::arglist.key-p swank::result) (swank::arglist.any-p swank::result))) si::assert-failure swank::arglist.key-p swank::arglist.any-p swank::exactly-one-p #Y(swank::decode-arglist nil nil (24 45 1 26 57 0 60 944 10 1 45 2 13 0 15 3 19 2 4 39 8 11 5 73 36 1 38 18 13 0 15 6 19 2 4 39 3 38 7 13 0 1 7 17 8 43 1 58 60 901 75 45 9 19 0 10 45 11 75 45 12 57 13 61 2 2 647 10 6 16 14 39 23 10 6 45 15 10 0 4 12 10 0 5 51 0 10 0 51 7 22 43 1 38 11 13 6 1 16 51 3 75 51 6 22 51 1 13 3 1 17 17 18 39 34 10 1 45 19 10 3 45 20 13 1 13 0 19 1 21 3 45 22 13 1 15 1 9 12 13 0 19 4 23 43 3 38 555 13 1 1 24 17 18 39 26 10 2 45 25 11 26 45 27 13 1 15 1 9 7 13 0 19 4 23 43 1 43 1 38 522 13 1 1 28 17 18 39 30 10 2 45 29 11 26 45 30 13 1 15 1 9 3 13 0 19 4 23 43 1 43 1 10 1 51 3 38 485 13 1 15 31 19 2 32 39 7 10 1 51 3 38 470 13 1 15 33 19 2 32 39 38 10 1 51 3 10 1 45 34 10 3 45 35 13 1 13 0 19 1 36 3 45 37 13 1 15 1 9 11 13 0 19 4 23 43 3 38 424 10 1 16 38 39 14 10 1 16 39 12 1 40 16 41 12 19 2 42 39 30 10 2 45 43 11 26 45 44 13 1 15 1 9 9 13 0 19 4 23 43 1 43 1 1 45 51 3 38 374 13 1 14 46 19 2 32 39 38 1 17 51 3 10 1 45 47 10 3 45 48 13 1 13 0 19 1 21 3 45 49 13 1 15 1 9 12 13 0 19 4 23 43 3 38 328 10 3 45 50 10 0 42 28 37 13 2 19 1 51 45 52 10 4 45 53 13 1 13 0 19 1 54 3 45 55 13 1 15 1 9 4 13 0 19 4 23 43 3 38 281 42 56 37 13 2 19 1 57 45 58 10 4 45 59 13 1 13 0 19 1 60 3 45 61 13 1 15 1 9 2 13 0 19 4 23 43 3 38 242 42 62 49 10 3 45 63 11 26 45 64 13 1 15 1 9 6 13 0 19 4 23 43 1 43 1 10 3 45 65 10 3 45 66 13 1 15 1 9 5 13 0 19 4 23 43 1 43 1 38 191 42 16 26 10 3 45 67 10 3 45 68 13 1 15 1 9 5 13 0 19 4 23 43 1 43 1 38 163 42 69 37 13 2 19 1 57 45 70 10 4 45 71 13 1 13 0 19 1 72 3 45 73 13 1 15 1 9 8 13 0 19 4 23 43 3 38 124 42 74 37 13 2 19 1 75 45 76 10 4 45 77 13 1 13 0 19 1 78 3 45 79 13 1 15 1 9 1 13 0 19 4 23 43 3 38 85 41 80 4 42 81 37 75 51 4 10 2 45 82 10 4 45 83 13 1 13 0 19 1 36 3 45 84 13 1 15 1 9 11 13 0 19 4 23 43 3 38 43 42 45 34 10 2 45 85 10 4 45 86 13 1 13 0 19 1 87 3 45 88 13 1 15 1 9 10 13 0 19 4 23 43 3 38 7 13 0 1 89 17 90 43 1 10 6 76 39 4 35 0 1 35 0 0 10 2 45 91 13 0 19 1 78 16 92 45 93 13 1 15 1 9 1 13 0 19 4 23 43 2 10 2 45 94 13 0 19 1 60 16 92 45 95 13 1 15 1 9 2 13 0 19 4 23 43 2 10 2 45 96 13 0 19 1 54 16 92 45 97 13 1 15 1 9 4 13 0 19 4 23 43 2 10 2 45 98 13 0 19 1 72 16 92 45 99 13 1 15 1 9 8 13 0 19 4 23 43 2 10 2 45 100 13 0 19 1 87 16 92 45 101 13 1 15 1 9 10 13 0 19 4 23 43 2 10 2 45 102 13 0 19 1 36 16 92 45 103 13 1 15 1 9 11 13 0 19 4 23 43 2 10 2 45 104 13 0 19 1 21 16 92 45 105 13 1 15 1 9 12 13 0 19 4 23 43 2 38 6 15 106 19 1 107 13 2 19 1 108 76 39 7 13 2 19 1 109 76 40 16 13 2 19 1 108 12 13 2 19 1 109 12 19 2 110 76 40 -38 10 2 73 36 4 62 73 43 1 43 1 43 1 63 63 29) #36# #1# 20116) si::fset function "Parse the list ARGLIST and return an ARGLIST structure." si::set-documentation)) #1# 20116) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #38=#A(t (27) (swank::encode-arglist swank::decoded-arglist swank::encode-required-arg swank::arglist.required-args mapcar swank::arglist.optional-args (&optional) swank::encode-optional-arg swank::arglist.key-p (&key) swank::encode-keyword-arg swank::arglist.keyword-args swank::arglist.allow-other-keys-p (&allow-other-keys) swank::arglist.any-args swank::&any swank::arglist.rest swank::arglist.body-p &body &rest swank::arglist.aux-args &aux swank::arglist.known-junk swank::arglist.unknown-junk append #Y(swank::encode-arglist nil nil (24 45 1 26 33 2 12 13 0 19 1 3 12 19 2 4 12 13 0 19 1 5 73 39 4 1 6 73 12 33 7 12 13 0 19 1 5 12 19 2 4 12 13 0 19 1 8 73 39 4 1 9 73 12 33 10 12 13 0 19 1 11 12 19 2 4 12 13 0 19 1 12 73 39 4 1 13 73 12 13 0 19 1 14 73 39 11 15 15 13 0 19 1 14 7 2 73 12 13 0 19 1 16 76 39 5 75 73 38 30 13 0 19 1 17 39 13 15 18 13 0 19 1 16 6 2 73 38 11 15 19 13 0 19 1 16 6 2 73 12 13 0 19 1 20 73 39 11 15 21 13 0 19 1 20 6 2 73 12 13 0 19 1 22 12 13 0 19 1 23 12 19 11 24 29) #38# #1# 23199) si::fset)) #1# 23199) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 15 0 15 8 15 9 19 3 10 1 0 73 29) #39=#A(t (11) (swank::arglist-keywords swank::lambda-list swank::decode-arglist swank::decoded-arglist swank::arglist.keyword-args swank::arglist.allow-other-keys-p #Y(swank::arglist-keywords nil nil (24 45 1 26 13 0 19 1 2 45 3 13 0 19 1 4 12 13 0 19 1 5 12 72 2 43 1 29) #39# #1# 24386) si::fset function "Return the list of keywords in ARGLIST.
As a secondary value, return whether &allow-other-keys appears." si::set-documentation)) #1# 24386) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #40=#A(t (19) (swank::methods-keywords swank::methods swank::allow-other-keys swank::keywords si::%dolist-var method clos::method-lambda-list swank::arglist-keywords swank::aok swank::kw append :key swank::keyword-arg.keyword remove-duplicates #Y(swank::methods-keywords nil nil (24 45 1 26 77 77 46 2 46 3 10 2 45 4 75 45 5 38 53 10 1 4 51 0 13 0 19 1 6 12 19 1 7 47 1 8 45 9 13 4 13 0 19 2 10 12 14 11 33 12 12 19 3 13 51 4 10 5 40 3 10 1 51 5 43 2 10 1 5 51 1 10 1 40 -55 43 2 13 0 13 1 72 2 43 2 29) #40# #1# 24727) si::fset function "Collect all keywords in the arglists of METHODS.
As a secondary value, return whether &allow-other-keys appears somewhere." si::set-documentation)) #1# 24727) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 15 0 15 6 15 7 19 3 8 1 0 73 29) #41=#A(t (9) (swank::generic-function-keywords generic-function clos::generic-function-methods swank::methods-keywords #Y(swank::generic-function-keywords nil nil (24 45 1 26 13 0 19 1 2 12 19 1 3 29) #41# #1# 25302) si::fset function "Collect all keywords in the methods of GENERIC-FUNCTION.
As a secondary value, return whether &allow-other-keys appears somewhere." si::set-documentation)) #1# 25302) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #42=#A(t (15) (swank::applicable-methods-keywords generic-function swank::arguments class-of mapcar clos::compute-applicable-methods-using-classes swank::okp swank::amuc compute-applicable-methods swank::methods-keywords #Y(swank::applicable-methods-keywords nil nil (24 45 1 24 45 2 26 13 1 33 3 12 13 0 19 2 4 12 19 2 5 47 1 6 45 7 10 1 39 6 10 0 73 38 8 13 3 13 2 19 2 8 12 43 2 19 1 9 29) #42# #1# 25575) si::fset function "Collect all keywords in the methods of GENERIC-FUNCTION that are
applicable for argument of CLASSES.  As a secondary value, return
whether &allow-other-keys appears somewhere." si::set-documentation)) #1# 25575) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (swank::extra-keywords :delete-methods t :lambda-list (swank::operator &rest swank::args) :documentation "Return a list of extra keywords of OPERATOR (a
symbol) when applied to the (unevaluated) ARGS.
As a secondary value, return whether other keys are allowed.
As a tertiary value, return the initial sublist of ARGS that was needed
to determine the extra keywords." ensure-generic-function)) #1# 26098) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 1 11 12 14 12 19 6 13 29) #43=#A(t (14) (swank::extra-keywords (:around) (t) (swank::op &rest swank::args) swank::op swank::args call-next-method swank::enrichments swank::aok swank::keywords swank::sort-extra-keywords #Y(nil nil nil (24 45 4 27 45 5 19 0 6 47 2 7 47 1 8 45 9 13 0 19 1 10 12 13 1 13 2 72 3 43 3 29) #43# #1# 26439) t clos::install-method)) #1# 26439) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 15 0 15 29 15 30 19 3 31 1 0 73 29) #44=#A(t (32) (swank::make-package-comparator swank::reference-packages :test eq make-hash-table swank::package-use-table copy-list swank::queue swank::bfn swank::p 0 #:g4470 gethash #:g4474 1+ #:g4475 si::hash-set package-use-list nconc swank::p1 swank::p2 swank::bfn2 swank::bfn1 <= package-name string<= #Y(nil nil nil (24 45 19 24 45 20 26 13 1 13 2 19 2 12 12 13 0 13 2 19 2 12 12 46 21 46 22 10 0 39 3 10 1 39 10 13 0 13 1 19 2 23 38 31 10 0 39 6 10 0 73 38 22 10 1 39 5 75 73 38 14 10 3 16 24 12 10 2 16 24 12 19 2 25 43 2 29) #44# #1# 27229) #Y(swank::make-package-comparator nil nil (24 45 1 26 14 2 15 3 19 2 4 45 5 10 1 16 6 45 7 8 0 45 8 75 45 9 57 10 61 2 2 83 10 3 45 11 10 0 4 12 10 0 5 51 0 10 0 51 4 22 43 1 51 1 13 1 13 4 19 2 12 76 39 40 13 1 13 4 10 2 45 13 10 3 16 14 45 15 10 0 51 4 13 1 43 2 19 3 16 13 3 10 1 16 17 16 6 12 19 2 18 51 3 10 3 76 39 4 35 0 1 35 0 0 62 43 1 43 1 43 1 34 26 73 43 1 29) #44# #1# 27229) si::fset function "Returns a two-argument test function which compares packages
according to their used-by relation with REFERENCE-PACKAGES. Packages
will be sorted first which appear first in the PACKAGE-USE-LIST of the
reference packages." si::set-documentation)) #1# 27229) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #45=#A(t (12) (swank::sort-extra-keywords swank::kwds swank::keyword-package *package* swank::make-package-comparator :key symbol-package swank::keyword-arg.keyword swank::compose stable-sort #Y(swank::sort-extra-keywords nil nil (24 45 1 26 13 0 14 2 11 3 6 2 12 19 1 4 12 14 5 33 6 12 33 7 12 19 2 8 12 19 4 9 29) #45# #1# 28298) si::fset)) #1# 28298) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 1 0 73 29) #46=#A(t (14) (swank::keywords-of-operator swank::operator swank::ensure-list swank::arglist-from-form swank-backend::arglist :not-available eql swank::arglist.keyword-args swank::arglist.allow-other-keys-p #Y(swank::keywords-of-operator nil nil (24 45 1 26 13 0 19 1 2 12 19 1 3 45 4 13 0 11 5 17 6 39 6 11 5 73 38 15 13 0 19 1 7 12 13 0 19 1 8 12 72 2 43 1 29) #46# #1# 28487) si::fset function "Return a list of KEYWORD-ARGs that OPERATOR accepts.
This function is useful for writing EXTRA-KEYWORDS methods for
user-defined functions which are declared &ALLOW-OTHER-KEYS and which
forward keywords to OPERATOR." si::set-documentation)) #1# 28487) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 9 12 14 10 19 6 11 29) #47=#A(t (12) (swank::extra-keywords (t) (swank::operator &rest swank::args) swank::operator swank::args symbol-function generic-function typep swank::generic-function-keywords #Y(nil nil nil (24 45 3 27 45 4 10 1 16 5 45 5 13 0 15 6 19 2 7 39 8 13 0 19 1 8 38 3 75 73 43 1 29) #47# #1# 28930) t clos::install-method)) #1# 28930) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #48=#A(t (23) (swank::class-from-class-name-form swank::class-name-form listp length = quote eq cadr class-name find-class class clos::class-finalized-p #:g4480 #:g4481 0 program-error si::temp #Y(nil nil nil (24 45 16 26 10 0 51 2 35 1 0 29) #48# #1# 29204) si::*handler-clusters* clos::finalize-inheritance swank::c #Y(swank::class-from-class-name-form nil nil (24 45 1 26 10 0 16 2 39 21 10 0 16 3 12 9 2 19 2 4 39 9 10 0 4 12 1 5 17 6 73 39 80 10 0 16 7 45 8 13 0 77 19 2 9 45 10 10 0 39 7 13 0 19 1 11 76 39 49 57 12 60 45 75 45 13 57 14 61 1 23 15 15 34 17 3 6 1 12 11 18 3 48 18 13 3 19 1 19 36 2 44 1 10 1 45 20 75 73 43 1 36 2 62 43 1 63 10 0 73 43 2 29) #48# #1# 29204) si::fset)) #1# 29204) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #49=#A(t (29) (swank::extra-keywords/slots class clos::class-finalized-p clos::class-slots clos::class-direct-slots t swank::allow-other-keys-p swank::slots #:loop-list4488 swank::slot #:loop-list-head4489 #:loop-list-tail4490 0 #:g4491 swank::initarg clos::slot-definition-name clos::slot-definition-initfunction clos::slot-definition-initform swank::make-keyword-arg #Y(nil nil nil (24 45 14 26 13 0 13 5 19 1 15 12 13 5 19 1 16 73 39 6 13 5 19 1 17 12 19 3 18 29) #49# #1# 29820) clos::slot-definition-initargs mapcar copy-list #:g4492 rplacd last swank::slot-init-keywords #Y(swank::extra-keywords/slots nil nil (24 45 1 26 13 0 19 1 2 39 12 13 0 19 1 3 12 77 72 2 38 11 13 0 19 1 4 12 14 5 72 2 47 1 6 45 7 58 60 99 77 13 1 46 8 46 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 65 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 13 34 19 12 13 4 19 1 20 12 19 2 21 16 22 45 23 13 1 10 0 17 24 10 0 43 1 43 1 39 10 10 1 5 12 19 1 25 51 1 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 45 26 13 0 13 2 72 2 43 1 43 2 29) #49# #1# 29820) si::fset)) #1# 29820) #Y(si::bytecodes nil nil (15 0 1 33 12 19 2 34 1 0 73 29) #50=#A(t (35) (swank::extra-keywords/make-instance swank::operator swank::args swank::class-name-form swank::class-from-class-name-form class swank::extra-keywords/slots swank::class-aokp swank::slot-init-keywords allocate-instance swank::applicable-methods-keywords swank::ai-aokp swank::allocate-instance-keywords #:g4499 #:g4500 0 error si::temp #Y(nil nil nil (24 45 17 26 10 0 51 2 35 1 0 29) #50# #1# 30635) si::*handler-clusters* initialize-instance clos::class-prototype condition swank::ii-aokp swank::initialize-instance-keywords #:g4502 #:g4503 #Y(nil nil nil (24 45 17 26 10 0 51 2 35 1 0 29) #50# #1# 30635) shared-initialize t swank::si-aokp swank::shared-initialize-keywords append #Y(swank::extra-keywords/make-instance nil nil (24 45 1 27 45 2 10 0 76 76 73 39 227 10 0 4 45 3 13 0 19 1 4 45 5 10 0 73 39 208 13 0 19 1 6 47 1 7 45 8 33 9 12 10 2 6 1 12 19 2 10 47 1 11 45 12 57 13 60 58 75 45 14 57 15 61 1 32 15 16 34 18 3 6 1 12 11 19 3 48 19 33 20 12 13 7 19 1 21 6 1 12 19 2 10 36 2 44 1 10 1 45 22 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 23 45 24 57 25 60 61 75 45 26 57 15 61 1 35 15 16 34 27 3 6 1 12 11 19 3 48 19 33 28 12 13 9 19 1 21 12 11 29 6 2 12 19 2 10 36 2 44 1 10 1 45 22 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 30 45 31 13 6 13 4 13 2 13 0 19 4 32 12 10 7 73 40 14 10 5 73 40 9 10 3 73 40 4 10 1 73 12 10 9 6 1 12 72 3 43 2 43 2 43 2 43 2 43 2 29) #50# #1# 30635) si::fset)) #1# 30635) #Y(si::bytecodes nil nil (15 0 1 24 12 19 2 25 1 0 73 29) #51=#A(t (26) (swank::extra-keywords/change-class swank::operator swank::args swank::class-name-form swank::class-from-class-name-form class swank::extra-keywords/slots swank::class-aokp swank::slot-init-keywords #:g4508 #:g4509 0 error si::temp #Y(nil nil nil (24 45 13 26 10 0 51 2 35 1 0 29) #51# #1# 32018) si::*handler-clusters* shared-initialize clos::class-prototype t swank::applicable-methods-keywords condition swank::si-aokp swank::shared-initialize-keywords append #Y(swank::extra-keywords/change-class nil nil (24 45 1 27 45 2 10 0 76 76 73 39 120 10 0 4 45 3 13 0 19 1 4 45 5 10 0 73 39 101 13 0 19 1 6 47 1 7 45 8 57 9 60 61 75 45 10 57 11 61 1 35 15 12 34 14 3 6 1 12 11 15 3 48 15 33 16 12 13 5 19 1 17 12 11 18 6 2 12 19 2 19 36 2 44 1 10 1 45 20 77 13 0 72 2 43 1 36 2 62 73 43 1 63 47 1 21 45 22 13 2 13 0 19 2 23 12 14 18 10 5 6 1 12 72 3 43 2 43 2 43 2 29) #51# #1# 32018) si::fset)) #1# 32018) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #52=#A(t (15) (swank::extra-keywords ((eql make-instance)) (swank::operator &rest swank::args) swank::operator swank::args list swank::extra-keywords/make-instance apply values swank::primary-value values-list call-next-method #Y(nil nil nil (24 45 3 27 45 4 15 5 33 6 12 13 1 13 0 19 3 7 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 30 15 5 19 0 11 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 3 75 73 43 2 43 2 29) #52# #1# 33109) t clos::install-method)) #1# 33109) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #53=#A(t (15) (swank::extra-keywords ((eql make-condition)) (swank::operator &rest swank::args) swank::operator swank::args list swank::extra-keywords/make-instance apply values swank::primary-value values-list call-next-method #Y(nil nil nil (24 45 3 27 45 4 15 5 33 6 12 13 1 13 0 19 3 7 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 30 15 5 19 0 11 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 3 75 73 43 2 43 2 29) #53# #1# 33329) t clos::install-method)) #1# 33329) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #54=#A(t (15) (swank::extra-keywords ((eql error)) (swank::operator &rest swank::args) swank::operator swank::args list swank::extra-keywords/make-instance apply values swank::primary-value values-list call-next-method #Y(nil nil nil (24 45 3 27 45 4 15 5 33 6 12 13 1 13 0 19 3 7 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 30 15 5 19 0 11 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 3 75 73 43 2 43 2 29) #54# #1# 33550) t clos::install-method)) #1# 33550) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #55=#A(t (15) (swank::extra-keywords ((eql signal)) (swank::operator &rest swank::args) swank::operator swank::args list swank::extra-keywords/make-instance apply values swank::primary-value values-list call-next-method #Y(nil nil nil (24 45 3 27 45 4 15 5 33 6 12 13 1 13 0 19 3 7 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 30 15 5 19 0 11 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 3 75 73 43 2 43 2 29) #55# #1# 33762) t clos::install-method)) #1# 33762) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 12 12 14 13 19 6 14 29) #56=#A(t (15) (swank::extra-keywords ((eql warn)) (swank::operator &rest swank::args) swank::operator swank::args list swank::extra-keywords/make-instance apply values swank::primary-value values-list call-next-method #Y(nil nil nil (24 45 3 27 45 4 15 5 33 6 12 13 1 13 0 19 3 7 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 30 15 5 19 0 11 69 21 23 45 8 10 0 4 45 9 10 0 39 7 10 1 16 10 38 3 75 73 43 2 43 2 29) #56# #1# 33975) t clos::install-method)) #1# 33975) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #57=#A(t (14) (swank::extra-keywords ((eql cerror)) (swank::operator &rest swank::args) swank::operator swank::args swank::extra-keywords/make-instance apply swank::determiners swank::aok swank::keywords call-next-method #Y(nil nil nil (24 45 3 27 45 4 33 5 12 13 1 10 0 5 12 19 3 6 47 2 7 47 1 8 45 9 10 0 39 17 13 0 13 1 10 3 4 12 10 2 3 12 72 3 38 4 19 0 10 43 3 29) #57# #1# 34186) t clos::install-method)) #1# 34186) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #58=#A(t (14) (swank::extra-keywords ((eql change-class)) (swank::operator &rest swank::args) swank::operator swank::args swank::extra-keywords/change-class apply swank::determiners swank::aok swank::keywords call-next-method #Y(nil nil nil (24 45 3 27 45 4 33 5 12 13 1 10 0 5 12 19 3 6 47 2 7 47 1 8 45 9 10 0 39 17 13 0 13 1 10 3 4 12 10 2 3 12 72 3 38 4 19 0 10 43 3 29) #58# #1# 34539) t clos::install-method)) #1# 34539) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 15 0 15 21 15 22 19 3 23 1 0 73 29) #59=#A(t (24) (swank::enrich-decoded-arglist-with-keywords swank::decoded-arglist swank::keywords swank::allow-other-keys-p #:g4517 t #:g4518 swank-backend::arglist si::structure-set #:g4519 swank::arglist.keyword-args append :key swank::keyword-arg.keyword remove-duplicates #:g4520 #:g4521 swank::arglist.allow-other-keys-p #:g4522 #Y(swank::enrich-decoded-arglist-with-keywords nil nil (24 45 1 24 45 2 24 45 3 26 10 1 39 65 10 2 45 4 11 5 45 6 13 1 15 7 9 3 13 0 19 4 8 43 1 43 1 10 2 45 9 13 3 19 1 10 12 13 2 19 2 11 12 14 12 33 13 12 19 3 14 45 15 13 1 15 7 9 4 13 0 19 4 8 43 1 43 1 10 2 45 16 13 3 19 1 17 40 3 10 1 45 18 13 1 15 7 9 7 13 0 19 4 8 43 1 43 1 29) #59# #1# 34883) si::fset function "Modify DECODED-ARGLIST using KEYWORDS and ALLOW-OTHER-KEYS-P." si::set-documentation)) #1# 34883) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 1 0 73 29) #60=#A(t (13) (swank::enrich-decoded-arglist-with-extra-keywords swank::decoded-arglist swank::form swank::extra-keywords apply swank::determining-args swank::extra-aok swank::enrich-decoded-arglist-with-keywords #Y(swank::enrich-decoded-arglist-with-extra-keywords nil nil (24 45 1 24 45 2 26 33 3 12 13 0 19 2 4 47 2 5 47 1 6 45 3 13 4 13 0 13 1 19 3 7 13 4 13 2 10 0 73 40 4 10 1 73 12 72 3 43 3 29) #60# #1# 35511) si::fset function "Determine extra keywords from the function call FORM, and modify
DECODED-ARGLIST to include them.  As a secondary return value, return
the initial sublist of ARGS that was needed to determine the extra
keywords.  As a tertiary return value, return whether any enrichment
was done." si::set-documentation)) #1# 35511) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (swank::compute-enriched-decoded-arglist :delete-methods t :lambda-list (swank::operator-form swank::argument-forms) :documentation "Return three values: DECODED-ARGLIST, DETERMINING-ARGS, and
ANY-ENRICHMENT, just like enrich-decoded-arglist-with-extra-keywords.
If the arglist is not available, return :NOT-AVAILABLE." ensure-generic-function)) #1# 36275) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 11 12 14 12 19 6 13 29) #61=#A(t (14) (swank::compute-enriched-decoded-arglist (t t) (swank::operator-form swank::argument-forms) swank::operator-form swank::argument-forms swank-backend::arglist swank::decode-arglist swank::decoded-arglist :not-available eql swank::enrich-decoded-arglist-with-extra-keywords #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 12 19 1 6 45 7 13 0 11 8 17 9 39 6 11 8 73 38 12 13 0 13 2 10 1 3 12 19 2 10 43 1 29) #61# #1# 36569) t clos::install-method)) #1# 36569) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 16 12 14 15 19 6 17 29) #62=#A(t (18) (swank::compute-enriched-decoded-arglist ((eql with-open-file) t) (swank::operator-form swank::argument-forms) swank::operator-form swank::argument-forms call-next-method swank::determining-args swank::decoded-arglist swank::arglist.required-args open swank::open-arglist swank::first-arg swank::arglist-p swank::arglist.keyword-args swank::enrich-decoded-arglist-with-keywords t #Y(nil nil nil (24 45 3 24 45 4 26 19 0 5 47 1 6 45 7 13 0 19 1 8 4 12 15 9 77 19 2 0 12 46 10 46 11 13 0 19 1 12 39 6 13 1 19 1 12 39 13 13 0 13 1 19 1 13 12 77 19 3 14 43 2 13 0 13 1 14 15 72 3 43 2 29) #62# #1# 36949) clos::install-method)) #1# 36949) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 35 12 14 33 19 6 36 29) #63=#A(t (37) (swank::compute-enriched-decoded-arglist ((eql apply) t) (swank::operator-form swank::argument-forms) swank::operator-form swank::argument-forms swank::function-name-form listp swank::length= 'function swank::memq cadr swank-backend::function-name swank::valid-operator-symbol-p swank::function-arglist :required-args function :optional-args swank::arg swank::make-optional-arg #Y(nil nil nil (24 45 17 26 13 0 77 19 2 18 29) #63# #1# 37568) swank::arglist.required-args mapcar swank::arglist.optional-args append :key-p swank::arglist.key-p :keyword-args swank::arglist.keyword-args :rest swank::args :allow-other-keys-p swank::arglist.allow-other-keys-p swank::make-arglist t call-next-method #Y(nil nil nil (24 45 3 24 45 4 26 57 0 60 141 10 1 4 45 5 10 0 16 6 39 19 13 0 9 2 19 2 7 39 10 10 0 4 12 15 8 19 2 9 39 104 10 0 16 10 45 11 13 0 19 1 12 39 89 13 0 10 3 5 12 19 2 0 45 13 14 14 1 15 6 1 12 14 16 34 19 12 13 0 19 1 20 12 19 2 21 12 13 0 19 1 22 12 19 2 23 12 14 24 13 0 19 1 25 12 14 26 13 0 19 1 27 12 14 28 15 29 14 30 13 0 19 1 31 12 19 12 32 12 10 2 6 1 12 14 33 72 3 36 3 43 1 43 1 43 1 19 0 34 63 29) #63# #1# 37568) clos::install-method)) #1# 37568) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #64=#A(t (9) (swank::compute-enriched-decoded-arglist ((eql multiple-value-call) t) (swank::operator-form swank::argument-forms) swank::operator-form swank::argument-forms apply #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 19 2 0 29) #64# #1# 39245) t clos::install-method)) #1# 39245) #Y(si::bytecodes nil nil (15 0 1 41 12 19 2 42 15 0 15 43 15 44 19 3 45 1 0 73 29) #65=#A(t (46) (swank::delete-given-args swank::decoded-arglist swank::args #:decoded-arglist+4562 swank::do-decoded-arglist swank::arglist.provided-args si::%dolist-var #:provided-arg+4563 (eq (swank::pop-or-return swank::args) (pop (swank::arglist.provided-args swank::decoded-arglist))) si::assert-failure #:g4570 #:g4571 #:g4572 swank-backend::arglist si::structure-set eq swank::arglist.required-args #:required-arg+4564 #:g4576 #:g4577 #:g4578 swank::arglist.optional-args #:optional-arg+4565 #:g4582 #:g4583 #:g4584 swank::arglist.keyword-args #:key-arg+4566 swank::keyword-arg.keyword keyword swank::value swank::key #:g4590 0 atom #66=#:loop-desetq-temp cddr #:g4593 :key remove #:g4594 #Y(swank::delete-given-args nil nil (24 45 1 24 45 2 26 10 1 45 3 57 4 60 431 13 1 19 1 5 45 6 75 45 7 38 90 10 1 4 51 0 38 6 15 8 19 1 9 10 4 76 39 7 75 73 36 2 38 22 10 4 45 10 10 0 4 12 10 0 5 51 0 10 0 51 5 22 73 43 1 12 10 5 45 11 13 0 19 1 5 45 12 10 0 4 12 10 0 5 51 0 13 1 15 13 9 0 13 0 19 4 14 22 43 2 17 15 76 40 -76 10 1 5 51 1 10 1 40 -92 43 2 13 1 19 1 16 45 6 75 45 17 38 72 10 1 4 51 0 10 4 76 39 7 75 73 36 2 38 19 10 4 45 18 10 0 4 10 0 5 51 0 10 0 51 5 43 1 10 5 45 19 13 0 19 1 16 45 20 10 0 4 10 0 5 51 0 13 1 15 13 9 1 13 0 19 4 14 43 2 10 1 5 51 1 10 1 40 -74 43 2 13 1 19 1 21 45 6 75 45 22 38 72 10 1 4 51 0 10 4 76 39 7 75 73 36 2 38 19 10 4 45 23 10 0 4 10 0 5 51 0 10 0 51 5 43 1 10 5 45 24 13 0 19 1 21 45 25 10 0 4 10 0 5 51 0 13 1 15 13 9 2 13 0 19 4 14 43 2 10 1 5 51 1 10 1 40 -74 43 2 13 1 19 1 26 45 6 75 45 27 38 127 10 1 4 51 0 13 0 19 1 28 45 29 13 5 77 77 46 30 46 31 46 32 57 33 61 2 2 89 10 1 16 34 39 4 35 0 1 10 1 45 35 10 0 4 51 3 10 0 5 51 0 10 0 4 51 4 43 1 10 1 16 36 51 1 13 4 10 2 17 15 39 3 10 3 39 38 10 10 45 37 13 5 13 11 19 1 26 12 14 38 33 28 12 19 4 39 45 40 13 1 15 13 9 4 13 0 19 4 14 43 1 43 1 35 0 0 62 43 3 43 1 10 1 5 51 1 10 1 40 -129 43 2 63 43 1 10 1 73 29) #65# #1# 39418) si::fset function "Delete given ARGS from DECODED-ARGLIST." si::set-documentation)) #1# 39418) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #67=#A(t (7) (swank::remove-given-args swank::decoded-arglist swank::args swank::copy-arglist swank::delete-given-args #Y(swank::remove-given-args nil nil (24 45 1 24 45 2 26 13 1 19 1 3 12 13 0 19 2 4 29) #67# #1# 40427) si::fset)) #1# 40427) #Y(si::bytecodes nil nil (15 0 1 4 12 19 2 5 1 0 73 29) #68=#A(t (6) (swank::arglist-from-form swank::form :not-available swank::arglist-dispatch #Y(swank::arglist-from-form nil nil (24 45 1 26 10 0 76 39 6 11 2 73 38 12 10 0 4 12 10 0 5 12 19 2 3 29) #68# #1# 40585) si::fset)) #1# 40585) #Y(si::bytecodes nil nil (15 0 19 1 1 29) #A(t (2) (swank::arglist-dispatch export)) #1# 40737) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 19 5 5 15 0 15 0 77 15 6 15 7 1 22 12 14 2 19 6 23 12 19 2 24 29) #69=#A(t (25) (swank::arglist-dispatch :delete-methods t :lambda-list (swank::operator swank::arguments) ensure-generic-function (t t) (swank::operator swank::arguments) swank::operator swank::arguments symbolp swank::valid-operator-symbol-p :not-available swank::compute-enriched-decoded-arglist swank::determining-args swank::decoded-arglist swank-backend::arglist eql swank::delete-given-args #:g4599 #:g4600 si::structure-set #Y(nil nil nil (24 45 8 24 45 9 26 57 0 60 89 10 2 16 10 39 6 13 2 19 1 11 76 39 6 11 12 73 36 0 13 2 13 1 19 2 13 47 1 14 45 15 10 0 45 16 13 0 11 12 17 17 39 6 11 12 73 38 36 13 0 13 2 19 2 18 51 0 10 0 45 19 10 3 45 20 13 1 15 16 9 0 13 0 19 4 21 43 1 43 1 10 0 73 43 1 43 2 63 29) #69# #1# 40767) clos::install-method clos::associate-methods-to-gfun)) #1# 40767) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 39 12 14 36 19 6 40 29) #70=#A(t (41) (swank::arglist-dispatch ((eql defmethod) t) (swank::operator swank::arguments) swank::operator swank::arguments #:g4605 consp defmethod equal cadr swank::function-exists-p cddr rest swank::gf-name fdefinition swank::gf generic-function typep swank-backend::arglist swank::decode-arglist :not-available eql #:loop-list4606 swank::x #:loop-list-head4607 #:loop-list-tail4608 0 listp swank::empty-arg-p rplacd swank::qualifiers :provided-args :required-args :rest "body" :body-p t swank::make-arglist call-next-method #Y(nil nil nil (24 45 3 24 45 4 26 57 0 60 225 13 2 10 1 3 45 5 10 0 16 6 39 26 10 0 4 12 1 7 17 8 39 16 10 0 5 16 6 39 9 10 0 16 9 12 19 1 10 39 177 10 0 16 9 12 10 0 16 11 12 46 12 46 13 10 0 16 14 45 15 13 0 15 16 19 2 17 39 142 13 0 19 1 18 12 19 1 19 45 18 13 0 11 20 17 21 39 5 11 20 38 117 58 60 82 77 13 4 46 22 46 23 75 6 1 45 24 10 0 45 25 57 26 61 2 2 48 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 3 16 27 40 6 13 3 19 1 28 39 4 35 0 1 13 1 10 3 6 1 51 1 17 29 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 45 30 14 31 13 3 10 0 3 12 14 32 10 1 6 1 12 14 33 15 34 14 35 14 36 19 8 37 36 6 43 1 43 1 43 1 43 2 38 3 11 36 43 1 19 0 38 63 29) #70# #1# 41401) clos::install-method)) #1# 41401) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 26 12 14 23 19 6 27 29) #71=#A(t (28) (swank::arglist-dispatch ((eql define-compiler-macro) t) (swank::operator swank::arguments) swank::operator swank::arguments #:g4610 consp define-compiler-macro equal cadr swank::function-exists-p swank::gf-name fdefinition swank::gf swank-backend::arglist swank::decode-arglist :not-available eql :provided-args :required-args :rest "body" :body-p t swank::make-arglist call-next-method #Y(nil nil nil (24 45 3 24 45 4 26 57 0 60 119 13 2 10 1 3 45 5 10 0 16 6 39 26 10 0 4 12 1 7 17 8 39 16 10 0 5 16 6 39 9 10 0 16 9 12 19 1 10 39 71 10 0 16 9 45 11 10 0 16 12 45 13 13 0 19 1 14 12 19 1 15 45 14 13 0 11 16 17 17 39 5 11 16 38 28 14 18 10 2 6 1 12 14 19 10 0 6 1 12 14 20 15 21 14 22 14 23 19 8 24 36 4 43 1 43 1 43 1 38 3 11 23 43 1 19 0 25 63 29) #71# #1# 42176) clos::install-method)) #1# 42176) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 15 12 14 9 19 6 16 29) #72=#A(t (17) (swank::arglist-dispatch ((eql eval-when) t) (swank::operator swank::arguments) swank::operator swank::arguments (:compile-toplevel :load-toplevel :execute) swank::eval-when-args :required-args :any-p t :any-args swank::make-arglist :rest #:body :body-p #Y(nil nil nil (24 45 3 24 45 4 26 1 5 45 6 14 7 14 8 14 9 14 10 13 0 19 4 11 6 1 12 14 12 15 13 14 14 14 9 19 6 11 43 1 29) #72# #1# 42726) clos::install-method)) #1# 42726) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 31 12 14 32 19 6 33 29) #73=#A(t (34) (swank::arglist-dispatch ((eql declare) t) (swank::operator swank::arguments) swank::operator swank::arguments last declaration swank::arglist-for-type-declaration swank::typedecl-arglist swank::arglist-available-p consp declare equal cadr caadr cddr eq swank::typespec swank::decoded-arglist-for-type-specifier swank::typespec-arglist :not-available eql :required-args :rest #:variables swank::make-arglist cdadr swank::decl-args swank::decl-identifier swank::decoded-arglist-for-declaration #:declaration-specifiers #Y(nil nil nil (24 45 3 24 45 4 26 13 1 13 0 19 1 5 3 45 6 13 0 19 1 7 45 8 13 0 19 1 9 39 6 10 0 73 38 177 10 1 16 10 39 42 10 1 4 12 1 11 17 12 39 32 10 1 5 16 10 39 25 10 1 16 13 16 10 39 17 10 1 16 14 16 10 39 9 10 1 16 15 12 75 17 16 39 55 10 1 16 14 45 17 13 0 19 1 18 45 19 13 0 11 20 17 21 39 6 11 20 73 38 23 14 22 14 22 10 0 6 1 12 14 23 15 24 19 4 25 6 1 12 19 2 25 43 1 43 1 38 74 10 1 16 10 39 34 10 1 4 12 1 11 17 12 39 24 10 1 5 16 10 39 17 10 1 16 13 16 10 39 9 10 1 16 15 12 75 17 16 39 26 10 1 16 14 12 10 1 16 26 12 46 27 46 28 13 0 13 1 19 2 29 43 2 38 8 14 23 15 30 19 2 25 43 2 29) #73# #1# 43035) t clos::install-method)) #1# 43035) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 6 12 14 7 19 6 8 29) #74=#A(t (9) (swank::arglist-dispatch ((eql declaim) t) (swank::operator swank::arguments) swank::operator swank::arguments declare #Y(nil nil nil (24 45 3 24 45 4 26 15 5 13 0 19 2 0 29) #74# #1# 43925) t clos::install-method)) #1# 43925) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 1 0 73 29) #75=#A(t (30) (swank::arglist-for-type-declaration declaration swank::identifier swank::typespec swank::rest-var-name swank::decoded-arglist-for-type-specifier swank::typespec-arglist :not-available eql :required-args :provided-args :rest swank::make-arglist #Y(swank::%arglist-for-type-declaration nil nil (24 45 2 24 45 3 24 45 4 26 13 1 19 1 5 45 6 13 0 11 7 17 8 39 6 11 7 73 38 30 14 9 14 10 10 3 6 1 12 14 9 10 0 6 1 12 14 11 13 1 19 6 12 6 1 12 19 2 12 43 1 29) #75# #1# 44036) consp declare equal cadr caadr type cdadr cadadr cddr eq #:variables ftype #:function-names #:variables #Y(swank::arglist-for-type-declaration nil nil (24 45 1 26 30 1 13 10 1 16 14 39 61 10 1 4 12 1 15 17 16 39 51 10 1 5 16 14 39 44 10 1 16 17 16 14 39 36 10 1 16 18 12 1 19 17 16 39 25 10 1 16 20 16 14 39 17 10 1 16 21 16 14 39 9 10 1 16 22 12 75 17 23 39 21 10 1 16 21 45 3 15 19 13 0 15 24 32 1 18 3 43 1 38 195 10 1 16 14 39 61 10 1 4 12 1 15 17 16 39 51 10 1 5 16 14 39 44 10 1 16 17 16 14 39 36 10 1 16 18 12 1 25 17 16 39 25 10 1 16 20 16 14 39 17 10 1 16 21 16 14 39 9 10 1 16 22 12 75 17 23 39 21 10 1 16 21 45 3 15 25 13 0 15 26 32 1 18 3 43 1 38 107 10 1 16 14 39 42 10 1 4 12 1 15 17 16 39 32 10 1 5 16 14 39 25 10 1 16 17 16 14 39 17 10 1 16 18 16 14 39 9 10 1 16 22 12 75 17 23 39 55 10 1 16 18 45 3 13 0 19 1 5 45 6 13 0 11 7 17 8 39 6 11 7 73 38 23 14 9 14 9 10 0 6 1 12 14 11 15 27 19 4 12 6 1 12 19 2 12 43 1 43 1 38 4 11 7 73 43 1 29) #75# #1# 44036) si::fset)) #1# 44036) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 1 0 73 29) #76=#A(t (15) (swank::decoded-arglist-for-declaration swank::decl-identifier swank::decl-args swank-backend::declaration-arglist swank::decode-arglist swank-backend::arglist :not-available eql #:g4613 #:g4614 si::structure-set :required-args swank::make-arglist #Y(swank::decoded-arglist-for-declaration nil nil (24 45 1 24 45 2 26 13 1 19 1 3 12 19 1 4 45 5 13 0 11 6 17 7 39 6 11 6 73 38 36 10 0 45 8 10 3 6 1 45 9 13 1 15 5 9 0 13 0 19 4 10 43 1 43 1 14 11 10 0 6 1 12 19 2 12 43 1 29) #76# #1# 45253) si::fset)) #1# 45253) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #77=#A(t (19) (swank::decoded-arglist-for-type-specifier swank::type-specifier #:g4618 swank::arglist-dummy typep :not-available cons symbol swank-backend::type-specifier-arglist swank::decode-arglist swank-backend::arglist eql #:g4619 #:g4620 si::structure-set (swank::arglist-dummy cons symbol) si::etypecase-error #Y(swank::decoded-arglist-for-type-specifier nil nil (24 45 1 26 10 0 45 2 13 0 15 3 19 2 4 39 6 11 5 73 38 90 13 0 15 6 19 2 4 39 10 10 1 4 12 19 1 0 38 72 13 0 15 7 19 2 4 39 57 13 1 19 1 8 12 19 1 9 45 10 13 0 11 5 17 11 39 6 11 5 73 38 29 10 0 45 12 10 3 6 1 45 13 13 1 15 10 9 0 13 0 19 4 14 43 1 43 1 10 0 73 43 1 38 7 13 0 1 15 17 16 43 1 29) #77# #1# 45575) si::fset)) #1# 45575) #Y(si::bytecodes nil nil (15 0 1 30 12 19 2 31 15 0 15 32 15 33 19 3 34 15 0 1 0 16 35 12 19 2 36 29) #78=#A(t (37) (swank::autodoc swank::raw-form (nil :print-right-margin) swank::print-right-margin serious-condition swank::c swank::debug-on-swank-error *print-right-margin* "Arglist Error: \"~A\"" format #Y(nil nil nil (24 45 5 26 19 0 6 76 73 39 17 10 2 48 7 77 15 8 13 0 19 3 9 36 1 44 1 29) #78# #1# 45981) si::*handler-clusters* swank::parse-raw-form swank::find-subform-with-arglist swank::form-path swank::obj-at-cursor swank-backend::arglist swank::form swank::boundp-and-interesting swank::print-variable-to-string :not-available eql :print-right-margin :operator :highlight swank::form-path-to-arglist-path swank::decoded-arglist-to-string t #Y(nil nil nil (26 13 2 19 1 12 12 19 1 13 47 3 14 47 2 15 47 1 16 45 17 13 2 19 1 18 39 13 13 2 19 1 19 12 75 6 2 73 38 53 10 1 45 16 13 0 11 20 17 21 39 6 11 20 73 38 28 13 0 14 22 13 6 14 23 10 1 4 12 14 24 13 4 13 1 13 0 19 3 25 12 19 7 26 12 43 1 11 27 6 2 73 43 4 29) #78# #1# 45981) swank::call-with-buffer-syntax #Y(swank::autodoc nil nil (24 45 1 28 2 22 40 2 77 46 3 57 0 60 24 15 4 34 10 3 6 1 12 11 11 3 48 11 77 34 28 12 19 2 29 44 1 63 29) #78# #1# 45981) si::fset function "Return a list of two elements. 
First, a string representing the arglist for the deepest subform in
RAW-FORM that does have an arglist. The highlighted parameter is
wrapped in ===> X <===.

Second, a boolean value telling whether the returned string can be cached." si::set-documentation symbol-package export)) #1# 45981) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #79=#A(t (9) (swank::boundp-and-interesting symbol symbolp boundp (t nil) swank::memq keywordp #Y(swank::boundp-and-interesting nil nil (24 45 1 26 10 0 73 39 32 10 0 16 2 73 39 25 10 0 16 3 73 39 18 13 0 15 4 19 2 5 76 73 39 7 10 0 16 6 76 73 29) #79# #1# 48180) si::fset)) #1# 48180) #Y(si::bytecodes nil nil (15 0 1 28 12 19 2 29 15 0 15 30 15 31 19 3 32 1 0 73 29) #80=#A(t (33) (swank::print-variable-to-string symbol t symbol-value swank::value *print-readably* *print-lines* *print-length* *print-level* *print-pretty* swank::s #:g4626 #:g4627 0 serious-condition si::temp #Y(nil nil nil (24 45 15 26 35 1 0 29) #80# #1# 48363) si::*handler-clusters* "~A ~A~S" swank::*echo-area-prefix* format #:stream+4625 "<<error printing object>>" write-string #Y(si::.print-unreadable-object-body. nil nil (26 15 22 13 0 19 2 23 29) #80# #1# 48363) si::print-unreadable-object-function #Y(nil nil nil (24 45 10 26 57 11 60 71 75 45 12 57 13 61 1 31 15 14 34 16 3 6 1 12 11 17 3 48 17 13 3 15 18 13 5 14 19 13 4 19 5 20 36 2 44 1 10 3 45 21 30 1 24 13 6 13 1 14 2 14 2 32 0 12 19 5 25 43 1 43 1 36 2 62 73 43 1 63 29) #80# #1# 48363) swank::call/truncated-output-to-string #Y(swank::print-variable-to-string nil nil (24 45 1 26 14 2 9 4 9 10 9 1 77 10 0 16 3 12 46 4 49 5 49 6 49 7 49 8 49 9 9 75 34 26 12 19 2 27 43 1 44 5 29) #80# #1# 48363) si::fset function "Return a short description of VARIABLE-NAME, or NIL." si::set-documentation)) #1# 48363) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 15 0 15 23 15 24 19 3 25 15 0 1 0 16 26 12 19 2 27 29) #81=#A(t (28) (swank::complete-form swank::raw-form swank::parse-raw-form swank::find-immediately-containing-arglist swank::provided-args swank-backend::arglist :not-available eql swank::empty-arg-p :from-end t :count remove-if swank::delete-given-args :prefix "" :suffix "" swank::decoded-arglist-to-template-string #Y(nil nil nil (26 13 0 19 1 2 12 19 1 3 47 1 4 45 5 10 0 45 5 13 0 11 6 17 7 39 6 11 6 73 38 35 13 0 33 8 12 13 2 14 9 14 10 14 11 9 1 19 6 12 12 19 2 13 12 14 14 15 15 14 16 15 17 19 5 18 43 1 43 2 29) #81# #1# 48822) swank::call-with-buffer-syntax #Y(swank::complete-form nil nil (24 45 1 26 77 34 19 12 19 2 20 29) #81# #1# 48822) si::fset function "Read FORM-STRING in the current buffer package, then complete it
  by adding a template for the missing arguments." si::set-documentation symbol-package export)) #1# 48822) #Y(si::bytecodes nil nil (15 0 1 31 12 19 2 32 15 0 15 33 15 34 19 3 35 15 0 1 0 16 36 12 19 2 37 29) #82=#A(t (38) (swank::completions-for-keyword swank::keyword-string swank::raw-form swank::parse-raw-form swank::find-immediately-containing-arglist swank-backend::arglist swank::arglist-available-p swank::keyword-arg.keyword swank::arglist.keyword-args mapcar keywordp swank::arglist.any-args remove-if-not append swank::keywords swank::tokenize-symbol swank::keyword-name #\- swank::make-compound-prefix-matcher swank::find-matching-symbols-in-list swank::matching-keywords swank::completion-output-symbol-converter swank::converter symbol-name swank::strings "" swank::format-completion-set swank::completion-set swank::longest-compound-prefix #Y(nil nil nil (26 13 0 19 1 3 12 19 1 4 45 5 13 0 19 1 6 73 39 99 33 7 12 13 0 19 1 8 12 19 2 9 12 33 10 12 13 0 19 1 11 12 19 2 12 12 19 2 13 45 14 13 3 19 1 15 45 16 13 0 13 1 15 17 19 1 18 12 19 3 19 45 20 13 5 19 1 21 45 22 13 0 33 23 12 13 1 19 2 9 12 19 2 9 45 24 13 0 77 15 25 19 3 26 45 27 13 0 13 0 19 1 28 6 2 73 43 6 43 1 29) #82# #1# 49597) swank::call-with-buffer-syntax #Y(swank::completions-for-keyword nil nil (24 45 1 24 45 2 26 77 34 29 12 19 2 30 29) #82# #1# 49597) si::fset function "Return a list of possible completions for KEYWORD-STRING relative
to the context provided by RAW-FORM." si::set-documentation symbol-package export)) #1# 49597) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (swank::+cursor-marker+ si::*make-special swank::%cursor-marker%)) #1# 50951) #Y(si::bytecodes nil nil (15 0 1 47 12 19 2 48 15 0 15 49 15 50 19 3 51 1 0 73 29) #83=#A(t (52) (swank::find-subform-with-arglist swank::form swank::local-ops swank::extract-cursor-marker swank::form-path swank::obj-at-cursor :test assoc swank::entry swank::decode-arglist swank::arglist-from-form #Y(swank::yield-success nil nil (24 45 1 24 45 2 26 13 1 19 1 3 47 2 4 47 1 5 45 1 13 0 10 0 4 12 13 3 14 6 32 6 12 19 4 7 45 8 10 0 39 10 10 0 5 12 19 1 9 38 6 13 1 19 1 10 12 43 1 13 1 13 2 72 4 43 3 29) #83# #1# 51002) :not-available #Y(swank::yield-failure nil nil (26 77 14 12 72 2 29) #83# #1# 51002) swank::operator symbolp swank::valid-operator-symbol-p #Y(swank::operator-p nil nil (24 45 14 24 45 2 26 10 1 16 15 39 6 13 1 19 1 16 73 40 13 13 1 13 0 14 6 32 3 12 19 4 7 29) #83# #1# 51002) swank::op1 swank::op2 eq swank::arglist-dummy-p swank::arglist-dummy.string-representation string= #Y(swank::op= nil nil (24 45 18 24 45 19 26 10 1 16 15 39 5 10 0 16 15 39 9 13 1 10 0 17 20 38 31 13 1 19 1 21 39 6 13 0 19 1 21 73 39 16 13 1 19 1 22 12 13 0 19 1 22 12 19 2 23 29) #83# #1# 51002) (listp swank::form) si::assert-failure listp #:g4635 #:g4636 si::dm-too-few-arguments swank::args last swank::new-ops swank::last-subform swank::+cursor-marker+ swank::extract-local-op-arglists list nconc values swank::primary-value values-list (declare declaim) member 'function swank::memq #Y(swank::grovel-form nil nil (24 45 1 24 45 2 26 38 6 15 25 19 1 26 10 1 16 27 76 40 -11 10 1 45 28 10 0 45 29 10 0 76 39 6 13 1 19 1 30 10 0 4 12 10 0 5 51 0 22 45 14 10 1 45 31 13 5 19 1 32 4 12 77 46 33 46 34 13 0 11 35 17 20 39 27 13 3 13 6 32 10 18 2 39 11 13 7 13 6 32 12 18 2 38 5 32 11 18 0 38 207 13 3 13 6 32 10 18 2 76 39 11 13 0 13 6 32 8 18 2 38 186 13 3 13 2 19 2 36 51 1 39 75 15 37 13 0 13 1 13 6 19 2 38 12 32 8 18 2 69 21 23 45 39 10 0 4 45 40 10 0 39 7 10 1 16 41 38 35 15 37 13 9 13 8 32 14 18 2 69 21 23 45 39 10 0 4 45 40 10 0 39 7 10 1 16 41 38 3 75 73 43 2 43 2 38 101 13 3 15 42 19 2 43 39 11 13 7 13 6 32 12 18 2 38 82 13 3 15 44 19 2 45 39 7 32 11 18 0 38 67 15 37 13 0 13 6 32 8 18 2 69 21 23 45 39 10 0 4 45 40 10 0 39 7 10 1 16 41 38 35 15 37 13 9 13 8 32 14 18 2 69 21 23 45 39 10 0 4 45 40 10 0 39 7 10 1 16 41 38 3 75 73 43 2 43 2 43 2 43 4 29) #83# #1# 51002) #Y(swank::find-subform-with-arglist nil nil (24 45 1 26 31 5 11 13 17 24 46 10 5 76 39 7 32 3 18 0 38 8 13 5 77 32 0 18 2 43 5 29) #83# #1# 51002) si::fset function "Returns four values:

     The appropriate subform of `form' which is closest to the
     +CURSOR-MARKER+ and whose operator is valid and has an
     arglist. The +CURSOR-MARKER+ is removed from that subform.

     Second value is the arglist. Local function and macro definitions
     appearing in `form' into account.

     Third value is the object in front of +CURSOR-MARKER+.

     Fourth value is a form path to that object." si::set-documentation)) #1# 51002) #Y(si::bytecodes nil nil (15 0 1 30 12 19 2 31 15 0 15 32 15 33 19 3 34 1 0 73 29) #84=#A(t (35) (swank::extract-cursor-marker swank::form last swank::path swank::grovel swank::result-form cdr car #:g4652 0 atom #66# swank::+cursor-marker+ eql #:g4660 #:g4662 - #:g4661 rplaca nreconc nreverse consp swank::new-path swank::new-last swank::new-car #:g4664 #:g4666 + #:g4665 #Y(swank::grovel nil nil (24 45 1 24 45 2 24 45 3 26 57 4 60 225 75 45 5 13 4 77 77 46 6 46 7 46 8 57 9 61 2 2 188 10 1 16 10 39 4 35 0 1 10 1 45 11 10 0 4 51 3 10 0 5 51 0 10 0 51 4 43 1 10 1 5 51 1 13 2 11 12 17 13 39 50 10 6 45 14 8 1 45 15 10 1 4 12 13 0 19 2 16 45 17 13 2 10 0 17 18 10 0 43 3 13 4 10 3 17 19 12 13 7 10 6 16 20 12 72 3 36 5 38 54 10 2 16 21 39 48 13 2 13 7 9 0 10 6 3 12 32 9 18 3 47 2 22 47 1 23 45 24 10 2 39 20 13 0 10 7 3 12 10 6 17 19 12 13 1 13 2 72 3 36 8 43 3 13 2 10 4 3 51 4 10 2 51 7 10 6 45 25 8 1 45 26 10 1 4 12 13 0 19 2 27 45 28 13 2 10 0 17 18 10 0 43 3 35 0 0 10 4 16 20 12 77 77 72 3 36 5 62 73 43 3 43 1 63 29) #84# #1# 54261) #Y(swank::extract-cursor-marker nil nil (24 45 1 26 31 1 29 13 1 77 8 0 6 1 12 32 0 18 3 43 1 29) #84# #1# 54261) si::fset function "Returns three values: normalized `form' without +CURSOR-MARKER+,
the object in front of +CURSOR-MARKER+, and a form path to that
object." si::set-documentation)) #1# 54261) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 15 0 15 0 77 15 8 15 9 1 13 12 14 2 19 6 14 12 15 0 77 15 15 15 16 1 29 12 14 2 19 6 14 12 15 0 77 15 30 15 31 1 32 12 14 2 19 6 14 12 15 0 77 15 33 15 34 1 35 12 14 2 19 6 14 12 19 5 36 29) #85=#A(t (37) (swank::extract-local-op-arglists :delete-methods t :lambda-list (swank::operator swank::args) :documentation "If the form `(OPERATOR ,@ARGS) is a local operator binding form,
     return a list of pairs (OP . ARGLIST) for each locally bound op." ensure-generic-function ((eql macrolet) t) (swank::operator swank::args) swank::operator swank::args labels #Y(nil nil nil (24 45 10 24 45 11 26 15 12 13 0 19 2 0 29) #85# #1# 55741) clos::install-method ((eql labels) t) (swank::operator swank::args) #:g4673 #:g4674 si::dm-too-few-arguments swank::defs swank::body atom last swank::current-def flet cddr swank::def.body swank::%collect-op/argl-alist #Y(nil nil nil (24 45 10 24 45 11 26 10 0 45 17 10 0 45 18 10 0 76 39 6 13 1 19 1 19 10 0 4 12 10 0 5 51 0 22 45 20 10 1 45 21 10 1 16 22 40 4 10 0 76 76 73 39 54 13 1 19 1 23 4 45 24 10 0 16 22 39 5 75 73 38 34 10 1 76 76 39 10 15 25 13 5 19 2 0 38 19 10 0 16 26 45 27 10 0 73 39 6 13 3 19 1 28 43 1 43 1 43 4 29) #85# #1# 55741) ((eql flet) t) (swank::operator swank::args) #Y(nil nil nil (24 45 10 24 45 11 26 10 0 4 12 10 0 5 12 46 21 46 20 10 1 76 39 5 75 73 38 16 10 0 16 22 39 5 75 73 38 6 13 0 19 1 28 43 2 29) #85# #1# 55741) (t t) (swank::operator swank::args) #Y(nil nil nil (24 45 10 24 45 11 26 75 73 29) #85# #1# 55741) clos::associate-methods-to-gfun)) #1# 55741) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #86=#A(t (17) (swank::%collect-op/argl-alist swank::defs swank::x consp second #Y(nil nil nil (24 45 2 26 10 0 16 3 73 39 5 10 0 16 4 29) #86# #1# 57128) remove-if-not #:loop-list4678 swank-backend::arglist swank::name #:loop-list-head4679 #:loop-list-tail4680 0 #66# rplacd #Y(swank::%collect-op/argl-alist nil nil (24 45 1 26 34 5 12 13 0 19 2 6 51 0 58 60 90 77 77 13 1 46 7 46 8 46 9 75 6 1 45 10 10 0 45 11 57 12 61 2 2 52 10 5 2 39 4 35 0 1 10 5 4 45 13 10 0 4 51 4 10 0 5 51 0 10 0 4 51 5 43 1 10 5 5 51 5 13 1 13 3 10 4 3 6 1 51 1 17 14 35 0 0 10 2 5 73 36 6 62 73 43 2 43 3 63 29) #86# #1# 57128) si::fset)) #1# 57128) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 15 0 15 25 15 26 19 3 27 1 0 73 29) #87=#A(t (28) (swank::find-immediately-containing-arglist swank::form swank::form-path swank-backend::arglist swank::form-path-to-arglist-path swank::arglist-path swank::arglist-ref apply swank::argl swank::provided-arguments-ref swank::args swank::arglist-p listp #Y(swank::try nil nil (24 45 2 24 45 1 24 45 3 26 13 2 13 1 13 0 19 3 4 45 5 33 6 12 13 1 13 0 19 3 7 45 8 33 9 12 10 3 5 12 13 2 13 1 19 4 7 45 10 13 1 19 1 11 39 5 10 0 16 12 73 39 7 13 1 13 0 72 2 43 3 29) #87# #1# 57454) swank::find-subform-with-arglist swank::obj :not-available eql list values swank::primary-value values-list butlast #Y(swank::find-immediately-containing-arglist nil nil (24 45 1 26 30 1 13 13 1 19 1 14 47 3 2 47 2 15 47 1 3 45 1 10 1 45 3 13 0 11 16 17 17 39 6 11 16 73 38 102 15 18 13 4 13 1 13 0 32 5 18 3 69 21 23 45 19 10 0 4 45 20 10 0 39 7 10 1 16 21 38 68 15 18 13 6 19 1 22 12 13 3 13 2 32 7 18 3 69 21 23 45 19 10 0 4 45 20 10 0 39 7 10 1 16 21 38 30 15 18 11 16 73 69 21 23 45 19 10 0 4 45 20 10 0 39 7 10 1 16 21 38 3 75 73 43 2 43 2 43 2 43 1 43 4 43 1 29) #87# #1# 57454) si::fset function "Returns the arglist of the subform _immediately_ containing
+CURSOR-MARKER+ in `form'. Notice, however, that +CURSOR-MARKER+ may
be in a nested arglist (e.g. `(WITH-OPEN-FILE (<here>'), and the
arglist of the appropriate parent form (WITH-OPEN-FILE) will be
returned in that case." si::set-documentation)) #1# 57454) #Y(si::bytecodes nil nil (15 0 1 23 12 19 2 24 15 0 15 25 15 26 19 3 27 1 0 73 29) #88=#A(t (28) (swank::form-path-to-arglist-path swank::form-path swank::form swank-backend::arglist swank::path swank::args swank::idx swank::arglist-index swank::idx* swank::arglist-ref swank::arglist* swank::provided-arguments-ref swank::args* swank::arglist-p #Y(swank::convert nil nil (24 45 4 24 45 5 24 45 3 26 10 2 76 39 5 75 73 38 86 10 2 4 45 6 13 0 13 2 13 1 19 3 7 45 8 10 0 39 8 13 2 13 0 19 2 9 45 10 10 1 39 10 13 4 13 3 13 1 19 3 11 45 12 10 2 76 39 5 75 73 38 31 13 1 19 1 13 39 19 13 2 10 6 5 12 13 0 13 1 32 7 18 3 3 73 38 6 10 2 6 1 73 43 4 29) #88# #1# 58974) (0) equal #:g4683 #:g4684 si::dm-too-few-arguments car cdr 1- #Y(swank::form-path-to-arglist-path nil nil (24 45 1 24 45 2 24 45 3 26 31 1 14 10 3 76 39 5 75 73 38 58 13 3 1 15 17 16 39 5 75 73 38 46 10 3 45 17 10 0 45 18 10 0 76 39 6 13 1 19 1 19 10 0 4 12 10 0 5 51 0 22 45 20 10 1 45 21 10 1 16 22 12 10 0 3 73 43 4 12 10 2 5 12 13 1 32 0 18 3 43 1 29) #88# #1# 58974) si::fset function "Convert a form path to an arglist path consisting of arglist
indices." si::set-documentation)) #1# 58974) #Y(si::bytecodes nil nil (15 0 1 36 12 19 2 37 15 0 15 38 15 39 19 3 40 1 0 73 29) #89=#A(t (41) (swank::arglist-index swank::provided-argument-index swank::provided-arguments swank-backend::arglist swank::positional-args-number swank::arg-index swank::|POSITIONAL-ARGS#| #90=#:oo-4691 #:g4693 #:g4692 (swank::arglist.key-p #90#) #:g4695 #:g4694 (swank::arglist.rest #90#) < swank::arglist.key-p swank::arglist.rest (swank::arglist.rest swank-backend::arglist) si::assert-failure nth swank::argument subseq swank::provided-keys swank::value swank::key #:g4696 0 atom #66# cddr eq consp quote equal cadr symbol #Y(swank::arglist-index nil nil (24 45 1 24 45 2 24 45 3 26 13 0 19 1 4 12 13 2 46 5 46 6 10 2 45 7 13 2 13 1 19 2 14 39 6 10 2 73 38 190 13 0 19 1 15 76 39 7 13 0 19 1 16 76 39 5 75 73 38 170 13 0 19 1 15 76 39 21 38 6 15 17 19 1 18 13 3 19 1 16 76 40 -12 10 1 73 38 142 13 2 10 4 17 19 45 20 13 5 13 2 19 2 21 45 22 58 60 120 13 1 77 77 46 23 46 24 46 25 57 26 61 2 2 99 10 1 16 27 39 4 35 0 1 10 1 45 28 10 0 4 51 3 10 0 5 51 0 10 0 4 51 4 43 1 10 1 16 29 51 1 13 3 10 6 17 30 39 52 10 2 16 31 39 26 10 2 4 12 1 32 17 33 39 16 10 2 5 16 31 39 9 10 2 16 29 12 75 17 30 39 14 10 2 16 34 45 35 10 0 73 43 1 38 4 10 2 73 36 4 35 0 0 62 73 43 3 63 43 2 43 1 43 2 29) #89# #1# 60529) si::fset function "Return the arglist index into `arglist' for the parameter belonging
to the argument (NTH `provided-argument-index' `provided-arguments')." si::set-documentation)) #1# 60529) #Y(si::bytecodes nil nil (15 0 1 59 12 19 2 60 15 0 15 61 15 62 19 3 63 1 0 73 29) #91=#A(t (64) (swank::arglist-ref swank-backend::arglist swank::indices swank::index #:g4741 (integer 0 *) typep si::do-check-type #92=#:oo-4743 #:g4745 #:g4744 (swank::arglist.provided-args #92#) #:g4747 #:g4746 (swank::arglist.required-args #92#) #:g4749 #:g4748 (swank::arglist.optional-args #92#) #:g4751 #:g4750 (swank::arglist.rest #92#) swank::arglist.provided-args swank::arglist.required-args swank::optional-arg.arg-name swank::arglist.optional-args mapcar #:loop-list4752 swank::args swank::|ARGS#| 0 length < nth #:g4754 - swank::arglist.rest #Y(swank::ref-positional-arg nil nil (24 45 1 24 45 3 26 10 0 45 4 13 0 15 5 19 2 6 76 39 13 13 0 15 5 77 15 3 19 4 7 51 1 43 1 10 1 45 8 58 60 122 77 13 1 19 1 21 12 13 1 19 1 22 12 33 23 12 13 1 19 1 24 12 19 2 25 6 3 12 46 26 46 27 75 45 28 57 29 61 2 2 62 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 10 2 16 30 51 1 13 6 13 1 19 2 31 39 11 13 6 10 2 17 32 36 4 38 16 10 1 45 33 13 7 13 0 19 2 34 51 7 43 1 35 0 0 13 5 19 1 35 73 40 3 75 73 36 4 62 73 43 1 43 2 63 43 1 29) #91# #1# 61693) keyword swank::ref-keyword-arg consp quote equal cddr eq cadr symbol #:decoded-arglist+4755 swank::arglist.keyword-args si::%dolist-var #:key-arg+4756 swank::keyword-arg.keyword swank::keyword-arg.arg-name swank::arg swank::kw #Y(swank::ref-keyword-arg nil nil (24 45 1 24 45 37 26 57 38 60 120 10 1 16 39 39 26 10 1 4 12 1 40 17 41 39 16 10 1 5 16 39 39 9 10 1 16 42 12 75 17 43 39 13 10 1 16 44 45 45 10 0 43 1 38 3 10 1 45 37 10 3 45 46 13 0 19 1 47 45 48 75 45 49 38 42 10 1 4 51 0 13 0 19 1 50 12 13 0 19 1 51 12 46 52 46 53 13 0 10 5 17 43 39 6 10 1 73 36 6 43 2 10 1 5 51 1 10 1 40 -44 43 2 43 1 43 1 75 73 63 29) #91# #1# 61693) (swank::arglist-p swank-backend::arglist) si::assert-failure swank::arglist-p numberp #Y(swank::arglist-ref nil nil (24 45 1 27 45 2 30 2 36 54 10 2 45 48 75 45 3 38 52 10 1 4 51 0 38 6 15 55 19 1 56 13 5 19 1 57 76 40 -12 10 0 16 58 39 11 13 5 13 0 32 3 18 2 38 9 13 5 13 0 32 2 18 2 51 5 10 1 5 51 1 10 1 40 -54 43 2 10 3 73 43 2 29) #91# #1# 61693) si::fset function "Returns the parameter in ARGLIST along the INDICIES path. Numbers
represent positional parameters (required, optional), keywords
represent key parameters." si::set-documentation)) #1# 61693) #Y(si::bytecodes nil nil (15 0 1 24 12 19 2 25 15 0 15 26 15 27 19 3 28 1 0 73 29) #93=#A(t (29) (swank::provided-arguments-ref swank::provided-args swank-backend::arglist swank::indices #:g4761 typep si::do-check-type swank::index numberp nth swank::positional-args-number subseq swank::provided-keys swank::value swank::key #:g4764 0 atom #66# eq #Y(swank::ref nil nil (24 45 1 24 45 2 24 45 7 26 10 0 16 8 39 9 13 0 10 2 17 9 38 91 13 2 13 1 19 1 10 12 19 2 11 45 12 58 60 73 13 1 77 77 46 13 46 14 46 15 57 16 61 2 2 52 10 1 16 17 39 4 35 0 1 10 1 45 18 10 0 4 51 3 10 0 5 51 0 10 0 4 51 4 43 1 10 1 5 51 1 13 2 10 6 17 19 39 6 10 3 73 36 4 35 0 0 62 73 43 3 63 43 1 29) #93# #1# 63299) si::%dolist-var swank::idx swank::arglist-ref #Y(swank::provided-arguments-ref nil nil (24 45 1 24 45 2 27 45 3 10 1 45 4 13 0 15 2 19 2 5 76 39 13 13 0 15 2 77 15 2 19 4 6 51 2 43 1 30 1 20 10 1 45 21 75 45 22 38 32 10 1 4 51 0 13 5 13 4 13 0 32 2 18 3 51 5 13 4 13 0 19 2 23 51 4 10 1 5 51 1 10 1 40 -34 43 2 10 3 73 43 1 29) #93# #1# 63299) si::fset function "Returns the argument in PROVIDED-ARGUMENT along the INDICES path
relative to ARGLIST." si::set-documentation)) #1# 63299) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #94=#A(t (9) (swank::positional-args-number swank-backend::arglist swank::arglist.provided-args length swank::arglist.required-args swank::arglist.optional-args + #Y(swank::positional-args-number nil nil (24 45 1 26 13 0 19 1 2 16 3 12 13 0 19 1 4 16 3 12 13 0 19 1 5 16 3 12 19 3 6 29) #94# #1# 64055) si::fset)) #1# 64055) #Y(si::bytecodes nil nil (15 0 1 20 12 19 2 21 15 0 15 22 15 23 19 3 24 1 0 73 29) #95=#A(t (25) (swank::parse-raw-form swank::raw-form #:loop-list4769 swank::element #:loop-list-head4770 #:loop-list-tail4771 0 #:g4772 string typep swank::read-conversatively list symbol (eq swank::element swank::+cursor-marker+) si::assert-failure swank::+cursor-marker+ eq (string list symbol) si::etypecase-error rplacd #Y(swank::parse-raw-form nil nil (24 45 1 26 10 0 76 76 73 39 142 58 60 139 77 13 1 46 2 46 3 75 6 1 45 4 10 0 45 5 57 6 61 2 2 104 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 10 3 45 7 13 0 15 8 19 2 9 39 8 13 4 19 1 10 38 53 13 0 15 11 19 2 9 39 8 13 4 19 1 0 38 37 13 0 15 12 19 2 9 39 22 13 4 38 6 15 13 19 1 14 13 4 11 15 17 16 76 40 -13 22 38 7 13 0 1 17 17 18 43 1 6 1 51 1 17 19 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #95# #1# 64241) si::fset function "Parse a RAW-FORM into a Lisp form. I.e. substitute strings by
symbols if already interned. For strings not already interned, use
ARGLIST-DUMMY." si::set-documentation)) #1# 64241) #Y(si::bytecodes nil nil (15 0 1 34 12 19 2 35 15 0 15 29 15 36 19 3 37 1 0 73 29) #96=#A(t (38) (swank::read-conversatively string (#\  #\Tab #\Newline) string-left-trim length zerop aref #\' eql :quoted-symbol "#'" :end2 min search :sharpquoted-symbol char 1- #\" char= :string :symbol type swank::parse-symbol subseq t swank::found? symbol #:g4774 quote function > (:symbol :quoted-symbol :sharpquoted-symbol :string) si::ecase-error swank::make-arglist-dummy #Y(swank::read-conversatively nil nil (24 45 1 26 15 2 10 0 17 3 45 1 10 0 16 4 45 4 10 0 16 5 39 4 75 38 71 13 1 9 0 19 2 6 12 1 7 17 8 39 5 11 9 38 53 15 10 13 1 14 11 13 0 9 2 19 2 12 12 19 4 13 39 5 11 14 38 30 13 1 8 0 17 15 12 13 1 10 0 16 16 17 15 12 15 17 19 3 18 39 5 11 19 38 3 11 20 45 21 10 0 42 20 8 13 2 19 1 22 38 49 42 9 14 13 2 9 1 19 2 23 12 19 1 22 38 33 42 14 14 13 2 9 2 19 2 23 12 19 1 22 38 17 42 19 9 13 2 14 24 72 2 38 6 13 2 77 72 2 47 1 25 45 26 10 1 39 80 10 2 45 27 10 0 42 20 6 10 1 73 38 62 42 9 10 15 28 10 1 6 2 73 38 50 42 14 10 15 29 10 1 6 2 73 38 38 42 19 29 13 4 9 1 19 2 30 39 15 13 5 9 1 10 4 16 16 12 19 3 23 38 4 10 5 73 38 7 13 0 1 31 17 32 43 1 38 6 13 4 19 1 33 43 2 43 3 29) #96# #1# 64840) si::fset "Tries to find the symbol that's represented by STRING.

If it can't, this either means that STRING does not represent a
symbol, or that the symbol behind STRING would have to be freshly
interned. Because this function is supposed to be called from the
automatic arglist display stuff from Slime, interning freshly
symbols is a big no-no.

In such a case (that no symbol could be found), an object of type
ARGLIST-DUMMY is returned instead, which works as a placeholder
datum for subsequent logics to rely on." si::set-documentation)) #1# 64840) #Y(si::bytecodes nil nil (15 0 1 32 12 19 2 33 1 0 73 29) #97=#A(t (34) (swank::test-print-arglist swank-backend::arglist string :swank find-package *package* swank::decode-arglist :print-right-margin swank::decoded-arglist-to-string swank::actual string= "Test failed: ~S => ~S~%  Expected: ~S" warn #Y(swank::test nil nil (24 45 1 24 45 2 26 11 3 16 4 48 5 13 1 19 1 6 12 14 7 9 1000 19 3 8 45 9 13 0 13 1 19 2 10 76 73 39 12 15 11 13 2 13 0 13 1 19 4 12 43 1 44 1 29) #97# #1# 66714) #'cons "(function cons)" 'cons "(quote cons)" (&key #'#'+) "(&key (function #'+))" (&whole swank::x swank::y swank::z) "(y z)" (swank::x &aux swank::y swank::z) "(x)" (swank::x &environment swank::env swank::y) "(x y)" (&key (#'swank::f)) "(&key ((function ..)))" (eval-when (swank::&any :compile-toplevel :load-toplevel :execute) &body swank::body) "(eval-when (&any :compile-toplevel :load-toplevel :execute) &body body)" (declare (optimize swank::&any (speed 1) (safety 1))) "(declare (optimize &any (speed 1) (safety 1)))" #Y(swank::test-print-arglist nil nil (26 30 1 13 15 14 15 15 32 0 18 2 15 16 15 17 32 0 18 2 15 18 15 19 32 0 18 2 15 20 15 21 32 0 18 2 15 22 15 23 32 0 18 2 15 24 15 25 32 0 18 2 15 26 15 27 32 0 18 2 15 28 15 29 32 0 18 2 15 30 15 31 32 0 18 2 43 1 29) #97# #1# 66714) si::fset)) #1# 66714) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #98=#A(t (27) (swank::test-arglist-ref (swank::x &key ((:k (swank::y swank::z)))) swank::decode-arglist swank::sample swank::arglist-ref swank::x eq "Assertion failed: ~S~%" (eq (swank::arglist-ref swank::sample 0) 'swank::x) warn :k swank::y (eq (swank::arglist-ref swank::sample :k 0) 'swank::y) swank::z (eq (swank::arglist-ref swank::sample :k 1) 'swank::z) #99=(swank::a :k (swank::b swank::c)) swank::provided-arguments-ref swank::a (eq (swank::provided-arguments-ref '#99# swank::sample 0) 'swank::a) #100=(swank::a :k (swank::b swank::c)) swank::b (eq (swank::provided-arguments-ref '#100# swank::sample :k 0) 'swank::b) #101=(swank::a :k (swank::b swank::c)) swank::c (eq (swank::provided-arguments-ref '#101# swank::sample :k 1) 'swank::c) #Y(swank::test-arglist-ref nil nil (26 15 1 19 1 2 45 3 13 0 9 0 19 2 4 12 1 5 17 6 76 39 8 15 7 15 8 19 2 9 13 0 14 10 9 0 19 3 4 12 1 11 17 6 76 39 8 15 7 15 12 19 2 9 13 0 14 10 9 1 19 3 4 12 1 13 17 6 76 39 8 15 7 15 14 19 2 9 15 15 13 0 9 0 19 3 16 12 1 17 17 6 76 39 8 15 7 15 18 19 2 9 15 19 13 0 14 10 9 0 19 4 16 12 1 20 17 6 76 39 8 15 7 15 21 19 2 9 15 22 13 0 14 10 9 1 19 4 16 12 1 23 17 6 76 73 39 8 15 7 15 24 19 2 9 43 1 29) #98# #1# 67759) si::fset)) #1# 67759) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (swank::test-print-arglist)) #1# 68455) #Y(si::bytecodes nil nil (19 0 0 29) #A(t (1) (swank::test-arglist-ref)) #1# 68479) #Y(si::bytecodes nil nil (11 0 16 1 29) #A(t (2) (:swank-arglists provide)) #1# 68499))
