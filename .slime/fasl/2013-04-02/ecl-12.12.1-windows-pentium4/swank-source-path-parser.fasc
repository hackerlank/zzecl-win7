(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SWANK-BACKEND" si::select-package)) #1=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/swank-source-path-parser.lisp" 0) #Y(si::bytecodes nil nil (77 19 1 0 45 1 38 6 15 2 19 1 3 15 4 13 0 19 2 5 76 40 11 9 1 15 4 13 0 19 2 5 74 76 40 -27 38 7 15 6 19 1 3 75 15 7 13 0 19 2 5 76 76 40 -16 73 43 1 29) #A(t (8) (copy-readtable swank-backend::rt (or (not (get-macro-character #\  swank-backend::rt)) (nth-value 1 (get-macro-character #\  swank-backend::rt))) si::assert-failure #\  get-macro-character (not (get-macro-character #\\ swank-backend::rt)) #\\)) #1# 1139) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #2=#A(t (16) (swank-backend::make-sharpdot-reader swank-backend::orig-sharpdot-reader swank-backend::s swank-backend::c swank-backend::n #:g909 #:g910 0 error si::temp #Y(nil nil nil (24 45 9 26 10 0 51 2 35 1 0 29) #2# #1# 1383) si::*handler-clusters* condition #Y(nil nil nil (24 45 2 24 45 3 24 45 4 26 57 5 60 55 75 45 6 57 7 61 1 29 15 8 34 10 3 6 1 12 11 11 3 48 11 13 6 13 5 13 4 13 3 20 3 23 36 2 44 1 10 1 45 12 77 13 0 72 2 43 1 36 2 62 73 43 1 63 29) #2# #1# 1383) #Y(swank-backend::make-sharpdot-reader nil nil (24 45 1 26 34 13 73 29) #2# #1# 1383) si::fset)) #1# 1383) #Y(si::bytecodes nil nil (15 0 1 19 12 19 2 20 15 0 15 21 15 22 19 3 23 1 0 73 29) #3=#A(t (24) (swank-backend::make-source-recorder swank-backend::fn swank-backend::source-map stream char file-position 1- list swank-backend::end values swank-backend::start #:g919 #:g916 #:g917 gethash #:g918 si::hash-set values-list #Y(nil nil nil (24 45 3 24 45 4 26 13 1 19 1 5 16 6 12 15 7 13 3 13 1 13 0 20 2 23 69 21 23 12 13 1 19 1 5 12 46 8 46 9 46 10 10 1 76 76 39 40 13 0 10 2 3 45 11 10 2 4 45 12 10 7 45 13 13 2 13 1 13 0 19 2 14 3 45 15 13 2 13 1 13 0 19 3 16 43 4 10 1 16 17 43 3 29) #3# #1# 1768) #Y(swank-backend::make-source-recorder nil nil (24 45 1 24 45 2 26 34 18 73 29) #3# #1# 1768) si::fset function "Return a macro character function that does the same as FN, but
additionally stores the result together with the stream positions
before and after of calling FN in the hashtable SOURCE-MAP." si::set-documentation)) #1# 1768) #Y(si::bytecodes nil nil (15 0 1 32 12 19 2 33 15 0 15 34 15 35 19 3 36 1 0 73 29) #4=#A(t (37) (swank-backend::make-source-recording-readtable readtable swank-backend::source-map *readtable* #:g929 #:g930 0 error si::temp #Y(nil nil nil (24 45 8 26 10 0 51 2 35 1 0 29) #4# #1# 2444) si::*handler-clusters* #\# #\. get-dispatch-macro-character condition swank-backend::old-reader swank-backend::make-sharpdot-reader set-dispatch-macro-character #Y(swank-backend::install-special-sharpdot-reader nil nil (24 48 3 26 57 4 60 50 75 45 5 57 6 61 1 25 15 7 34 9 3 6 1 12 11 10 3 48 10 15 11 15 12 19 2 13 36 2 44 1 10 1 45 14 77 13 0 72 2 43 1 36 2 62 43 1 63 45 15 10 0 73 39 14 15 11 15 12 13 0 19 1 16 12 19 3 17 43 1 44 1 29) #4# #1# 2444) copy-readtable swank-backend::tab si::%dotimes-var swank-backend::code code-char char get-macro-character swank-backend::term swank-backend::fn swank-backend::make-source-recorder set-macro-character 1+ < #Y(swank-backend::make-source-recording-readtable nil nil (24 45 1 24 45 2 26 30 1 18 13 2 19 1 19 45 20 10 0 48 3 8 128 45 21 8 0 45 22 38 50 10 0 16 23 45 24 13 0 13 3 19 2 25 47 1 26 45 27 10 0 39 18 13 2 13 0 13 7 19 2 28 12 13 1 13 5 19 4 29 43 2 43 1 10 0 16 30 51 0 13 0 13 1 19 2 31 40 -57 43 2 13 0 32 1 18 1 10 0 73 43 1 44 1 43 1 29) #4# #1# 2444) si::fset function "Return a source position recording copy of READTABLE.
The source locations are stored in SOURCE-MAP." si::set-documentation)) #1# 2444) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 15 0 15 29 15 30 19 3 31 1 0 73 29) #5=#A(t (32) (swank-backend::read-and-record-source-map stream :test eq make-hash-table swank-backend::source-map *readtable* swank-backend::make-source-recording-readtable file-position swank-backend::start #:g939 #:g940 0 error si::temp #Y(nil nil nil (24 45 14 26 10 0 51 2 35 1 0 29) #5# #1# 3242) si::*handler-clusters* read condition swank-backend::form swank-backend::end gethash #:g945 #:g942 #:g943 #:g944 si::hash-set #Y(swank-backend::read-and-record-source-map nil nil (24 45 1 26 14 2 33 3 12 19 2 4 45 5 14 6 13 0 19 2 7 48 6 13 1 19 1 8 45 9 57 10 60 48 75 45 11 57 12 61 1 23 15 13 34 15 3 6 1 12 11 16 3 48 16 13 5 19 1 17 36 2 44 1 10 1 45 18 77 13 0 72 2 43 1 36 2 62 43 1 63 45 19 13 3 19 1 8 45 20 13 1 13 3 19 2 21 76 39 39 13 2 10 0 3 45 22 10 2 45 23 10 5 45 24 13 2 13 1 13 0 19 2 21 3 45 25 13 2 13 1 13 0 19 3 26 43 4 13 1 13 3 72 2 43 4 44 1 29) #5# #1# 3242) si::fset function "Read the next object from STREAM.
Return the object together with a hashtable that maps
subexpressions of the object to stream positions." si::set-documentation)) #1# 3242) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #6=#A(t (12) (swank-backend::skip-toplevel-forms swank-backend::n stream t *read-suppress* si::%dotimes-var swank-backend::i read 1+ < #Y(swank-backend::skip-toplevel-forms nil nil (24 45 1 24 45 2 26 11 3 48 4 10 1 45 5 8 0 45 6 38 13 13 2 19 1 7 10 0 16 8 51 0 75 13 0 13 1 19 2 9 40 -20 73 43 2 44 1 29) #6# #1# 3857) si::fset)) #1# 3857) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 15 0 15 8 15 9 19 3 10 1 0 73 29) #7=#A(t (11) (swank-backend::read-source-form swank-backend::n stream swank-backend::skip-toplevel-forms *read-suppress* swank-backend::read-and-record-source-map #Y(swank-backend::read-source-form nil nil (24 45 1 24 45 2 26 13 1 13 0 19 2 3 75 48 4 13 0 19 1 5 44 1 29) #7# #1# 3972) si::fset function "Read the Nth toplevel form number with source location recording.
Return the form and the source-map." si::set-documentation)) #1# 3972) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 1 0 73 29) #8=#A(t (17) (swank-backend::source-path-stream-position swank-backend::path stream swank-backend::check-source-path #:g948 #:g949 si::dm-too-few-arguments swank-backend::tlf-number swank-backend::read-source-form swank-backend::source-map swank-backend::form swank-backend::source-path-source-position #Y(swank-backend::source-path-stream-position nil nil (24 45 1 24 45 2 26 13 1 19 1 3 10 1 45 4 10 0 45 5 10 0 76 39 6 13 1 19 1 6 10 0 4 12 10 0 5 51 0 22 45 7 10 1 45 1 13 1 13 4 19 2 8 47 1 9 45 10 9 0 10 2 3 12 13 0 13 1 19 3 11 43 2 43 4 29) #8# #1# 4227) si::fset function "Search the source-path PATH in STREAM and return its position." si::set-documentation)) #1# 4227) #Y(si::bytecodes nil nil (15 0 1 7 12 19 2 8 1 0 73 29) #9=#A(t (9) (swank-backend::check-source-path swank-backend::path consp integerp every "The source-path ~S is not valid." error #Y(swank-backend::check-source-path nil nil (24 45 1 26 10 0 16 2 39 9 33 3 12 13 0 19 2 4 76 73 39 8 15 5 13 0 19 2 6 29) #9# #1# 4576) si::fset)) #1# 4576) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #10=#A(t (8) (swank-backend::source-path-string-position swank-backend::path string make-string-input-stream swank-backend::s swank-backend::source-path-stream-position #Y(swank-backend::source-path-string-position nil nil (24 45 1 24 45 2 26 13 0 9 0 77 19 3 3 45 4 13 2 13 0 19 2 5 43 1 29) #10# #1# 4736) si::fset)) #1# 4736) #Y(si::bytecodes nil nil (15 0 1 24 12 19 2 25 1 0 73 29) #11=#A(t (26) (swank-backend::source-path-file-position swank-backend::path swank-backend::filename swank-backend::buffer swank-backend::toplevel-number open swank-backend::file 1+ swank-backend::skip-toplevel-forms file-position swank-backend::endpos :element-type character :initial-element #\  make-array (file-position swank-backend::file 0) si::assert-failure :end read-sequence close :abort t swank-backend::source-path-string-position #Y(swank-backend::source-path-file-position nil nil (24 45 1 24 45 2 26 10 1 4 12 77 46 3 46 4 13 2 19 1 5 45 6 64 78 10 1 16 7 12 13 0 19 2 8 13 0 19 1 9 45 10 10 0 6 1 12 14 11 15 12 14 13 15 14 19 5 15 51 3 38 6 15 16 19 1 17 13 1 9 0 19 2 9 76 40 -14 13 3 13 1 14 18 13 0 19 4 19 43 1 69 10 0 39 6 13 0 19 1 20 70 65 10 0 39 10 13 0 14 21 14 22 19 3 20 66 43 1 13 3 13 1 19 2 23 43 2 29) #11# #1# 4870) si::fset)) #1# 4870) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 15 0 15 27 15 28 19 3 29 1 0 73 29) #12=#A(t (30) (swank-backend::source-path-source-position swank-backend::path swank-backend::form swank-backend::source-map #:loop-list958 swank-backend::n swank-backend::f #:loop-list-head959 #:loop-list-tail960 0 rplacd nth swank-backend::forms reverse #:loop-list961 swank-backend::positions gethash #:g962 #:g963 si::dm-too-few-arguments #:g964 #:g965 swank-backend::start swank-backend::end si::dm-too-many-arguments #Y(swank-backend::source-path-source-position nil nil (24 45 1 24 45 2 24 45 3 26 58 60 101 77 13 3 46 4 46 5 75 45 6 75 6 1 45 7 10 0 45 8 57 9 61 2 24 62 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 10 8 51 3 13 1 10 3 6 1 51 1 17 10 10 5 2 39 4 35 0 1 10 5 4 51 4 10 5 5 51 5 13 4 10 3 17 11 51 3 35 0 0 10 2 5 73 36 6 62 43 2 43 1 43 2 63 45 12 58 60 149 77 10 1 16 13 12 46 14 46 2 75 45 15 57 9 61 2 2 44 10 3 2 39 4 35 0 1 10 3 4 51 2 10 3 5 51 3 13 2 13 6 19 2 16 51 1 10 1 39 5 10 1 5 76 39 4 35 0 1 35 0 0 10 1 45 17 10 0 45 18 10 0 76 39 6 13 1 19 1 19 10 0 4 12 10 0 5 51 0 22 45 20 10 0 45 21 10 0 76 39 6 13 3 19 1 19 10 0 4 12 10 0 5 51 0 22 45 22 10 1 45 23 10 4 39 6 13 5 19 1 24 13 1 13 0 72 2 36 10 43 6 62 73 43 1 43 2 63 43 1 29) #12# #1# 5625) si::fset function "Return the start position of PATH from FORM and SOURCE-MAP.  All
subforms along the path are considered and the start and end position
of the deepest (i.e. smallest) possible form is returned." si::set-documentation)) #1# 5625))
