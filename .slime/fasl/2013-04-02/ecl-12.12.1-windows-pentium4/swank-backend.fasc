(#Y(si::bytecodes nil nil (15 0 77 77 15 1 77 77 15 2 77 77 77 19 10 3 29) #A(t (4) (#1="SWANK-BACKEND" ("COMMON-LISP") ("*DEBUG-SWANK-BACKEND*" "SLDB-CONDITION" "COMPILER-CONDITION" "ORIGINAL-CONDITION" "MESSAGE" "SOURCE-CONTEXT" "CONDITION" "SEVERITY" "WITH-COMPILATION-HOOKS" "LOCATION" "LOCATION-P" "LOCATION-BUFFER" "LOCATION-POSITION" "POSITION-P" "POSITION-POS" "PRINT-OUTPUT-TO-STRING" "QUIT-LISP" "REFERENCES" "UNBOUND-SLOT-FILLER" "DECLARATION-ARGLIST" "TYPE-SPECIFIER-ARGLIST" "WITH-STRUCT" "WHEN-LET" "*PENDING-SLIME-INTERRUPTS*" "CHECK-SLIME-INTERRUPTS" "*INTERRUPT-QUEUED-HANDLER*" "EMACS-INSPECT" "LABEL-VALUE-LINE" "LABEL-VALUE-LINE*" "WITH-SYMBOL") si::dodefpackage)) #2=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/swank-backend.lisp" 0) #Y(si::bytecodes nil nil (15 0 77 77 77 77 77 15 1 77 77 77 19 10 2 29) #A(t (3) ("SWANK-MOP" ("STANDARD-GENERIC-FUNCTION" "STANDARD-SLOT-DEFINITION" "STANDARD-METHOD" "STANDARD-CLASS" "EQL-SPECIALIZER" "EQL-SPECIALIZER-OBJECT" "CLASS-DEFAULT-INITARGS" "CLASS-DIRECT-DEFAULT-INITARGS" "CLASS-DIRECT-SLOTS" "CLASS-DIRECT-SUBCLASSES" "CLASS-DIRECT-SUPERCLASSES" "CLASS-FINALIZED-P" "CLASS-NAME" "CLASS-PRECEDENCE-LIST" "CLASS-PROTOTYPE" "CLASS-SLOTS" "SPECIALIZER-DIRECT-METHODS" "GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER" "GENERIC-FUNCTION-DECLARATIONS" "GENERIC-FUNCTION-LAMBDA-LIST" "GENERIC-FUNCTION-METHODS" "GENERIC-FUNCTION-METHOD-CLASS" "GENERIC-FUNCTION-METHOD-COMBINATION" "GENERIC-FUNCTION-NAME" "METHOD-GENERIC-FUNCTION" "METHOD-FUNCTION" "METHOD-LAMBDA-LIST" "METHOD-SPECIALIZERS" "METHOD-QUALIFIERS" "SLOT-DEFINITION-ALLOCATION" "SLOT-DEFINITION-DOCUMENTATION" "SLOT-DEFINITION-INITARGS" "SLOT-DEFINITION-INITFORM" "SLOT-DEFINITION-INITFUNCTION" "SLOT-DEFINITION-NAME" "SLOT-DEFINITION-TYPE" "SLOT-DEFINITION-READERS" "SLOT-DEFINITION-WRITERS" "SLOT-BOUNDP-USING-CLASS" "SLOT-VALUE-USING-CLASS" "SLOT-MAKUNBOUND-USING-CLASS" "COMPUTE-APPLICABLE-METHODS-USING-CLASSES" "FINALIZE-INHERITANCE") si::dodefpackage)) #2# 1463) #Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) (#1# si::select-package)) #2# 2947) #Y(si::bytecodes nil nil (1 0 16 1 75 52 0 15 0 15 2 15 3 19 3 4 1 0 73 29) #A(t (5) (swank-backend::*debug-swank-backend* si::*make-special variable "If this is true, backends should not catch errors but enter the
debugger where appropriate. Also, they should not perform backtrace
magic but really show every frame including SWANK related ones." si::set-documentation)) #2# 2978) #Y(si::bytecodes nil nil (1 0 16 1 75 52 0 15 0 15 2 15 3 19 3 4 1 0 73 29) #A(t (5) (swank-backend::*interface-functions* si::*make-special variable "The names of all interface functions." si::set-documentation)) #2# 3245) #Y(si::bytecodes nil nil (1 0 16 1 75 52 0 15 0 15 2 15 3 19 3 4 1 0 73 29) #A(t (5) (swank-backend::*unimplemented-interfaces* si::*make-special variable "List of interface functions that are not implemented.
DEFINTERFACE adds to this list and DEFIMPLEMENTATION removes." si::set-documentation)) #2# 3332) #Y(si::bytecodes nil nil (15 0 1 86 12 14 76 9 4 19 4 87 15 0 15 88 15 89 19 3 90 1 0 73 29) #3=#A(t (91) (swank-backend::definterface #:g171 #:g170 #:g172 si::dm-too-few-arguments swank-backend::name swank-backend::args documentation swank-backend::default-body #:g245 string typep "a documentation string" si::do-check-type (every #'symbolp swank-backend::args) "Complex lambda-list not supported: ~S ~S" si::assert-failure symbolp every setf get quote 'swank-backend::default lambda #Y(swank-backend::gen-default-impl nil nil (26 15 19 15 20 15 21 10 8 6 2 12 1 22 6 3 12 15 23 13 7 10 5 7 3 6 3 73 29) #3# #2# 3503) #:g254 #:g255 swank-backend::req swank-backend::opt swank-backend::key rest si::dm-too-many-arguments #:loop-list256 swank-backend::k #:loop-list-head257 #:loop-list-tail258 0 #:g259 copy-list #:g260 rplacd last (nil) append #Y(swank-backend::args-as-list nil nil (24 45 6 26 13 0 32 3 18 1 45 25 10 0 45 26 10 0 76 39 6 13 1 19 1 4 10 0 4 12 10 0 5 51 0 22 45 27 10 1 76 39 6 13 2 19 1 4 10 1 4 12 10 1 5 51 1 22 45 28 10 2 76 39 6 13 3 19 1 4 10 2 4 12 10 2 5 51 2 22 45 29 10 3 76 39 6 13 4 19 1 4 10 3 4 12 10 3 5 51 3 22 45 30 10 4 39 6 13 5 19 1 31 13 3 13 2 58 60 99 77 13 2 46 32 46 33 75 6 1 45 34 10 0 45 35 57 36 61 2 2 64 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 10 1 45 37 13 4 32 14 18 1 12 10 4 6 2 16 38 45 39 13 1 10 0 17 40 10 0 43 1 43 1 39 10 10 1 5 12 19 1 41 51 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 10 0 73 40 4 1 42 73 12 19 4 43 43 6 29) #3# #2# 3503) (&optional &key &rest) :initial-element make-array #Y(swank-backend::parse-lambda-list nil nil (24 45 6 26 13 0 15 45 9 4 14 46 77 19 3 47 12 32 2 18 3 29) #3# #2# 3503) swank-backend::keywords swank-backend::vars list reverse map member #:g268 #:g265 length #:g266 aref #:g267 si::aset #Y(swank-backend::parse nil nil (24 45 6 24 45 49 24 45 50 26 10 2 76 39 15 15 51 33 52 12 13 0 19 3 53 16 52 38 85 10 2 4 12 13 1 19 2 54 39 24 10 2 5 12 10 2 4 12 13 1 19 2 54 5 12 13 0 32 4 18 3 38 51 10 2 4 45 55 10 1 45 56 10 3 16 57 45 58 13 2 13 1 13 0 19 2 59 3 45 60 13 2 13 1 13 0 19 3 61 43 4 10 2 5 12 13 1 13 0 32 4 18 3 29) #3# #2# 3503) swank-backend::s :keyword intern #Y(swank-backend::kw nil nil (24 45 63 26 10 0 16 10 12 14 64 19 2 65 29) #3# #2# 3503) progn defun let swank-backend::f or 'swank-backend::implementation 'swank-backend::default cond apply t error #4="~S not implemented" pushnew swank-backend::*interface-functions* swank-backend::*unimplemented-interfaces* eval-when (:compile-toplevel :load-toplevel :execute) export :swank-backend #Y(swank-backend::definterface nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 76 39 6 13 4 19 1 4 10 2 4 12 10 2 5 51 2 22 45 7 10 3 45 8 10 1 45 9 13 0 15 10 19 2 11 76 39 14 13 0 15 10 15 12 15 7 19 4 13 51 2 43 1 38 14 15 14 77 77 15 15 13 3 13 2 19 6 16 33 17 12 13 2 19 2 18 76 40 -23 31 5 24 44 48 62 66 15 67 15 68 13 8 13 7 13 6 15 69 15 70 15 71 15 20 15 21 10 8 6 2 12 1 72 6 3 12 15 20 15 21 10 8 6 2 12 1 73 6 3 6 3 6 2 6 1 12 15 74 15 70 15 75 15 70 13 7 32 3 18 1 7 3 6 2 12 15 76 15 77 15 78 15 21 10 8 6 2 6 3 6 2 6 3 6 3 6 5 12 15 79 15 21 10 8 6 2 12 1 80 6 3 12 10 5 76 39 17 15 79 15 21 10 8 6 2 12 1 81 6 3 73 38 5 32 4 18 0 12 15 82 15 83 15 84 15 21 10 8 6 2 12 11 85 6 3 6 3 12 15 21 10 8 6 2 6 6 73 43 5 29) #3# #2# 3503) si::fset function "Define an interface function for the backend to implement.
A function is defined with NAME, ARGS, and DOCUMENTATION.  This
function first looks for a function to call in NAME's property list
that is indicated by 'IMPLEMENTATION; failing that, it looks for a
function indicated by 'DEFAULT. If neither is present, an error is
signaled.

If a DEFAULT-BODY is supplied, then a function with the same body and
ARGS will be added to NAME's property list as the property indicated
by 'DEFAULT.

Backends implement these functions using DEFIMPLEMENTATION." si::set-documentation)) #2# 3503) #Y(si::bytecodes nil nil (15 0 1 28 12 14 29 9 3 19 4 30 1 0 73 29) #5=#A(t (31) (swank-backend::defimplementation #:g270 #:g269 #:g271 si::dm-too-few-arguments swank-backend::name swank-backend::args swank-backend::body (every #'symbolp swank-backend::args) "Complex lambda-list not supported: ~S ~S" si::assert-failure symbolp every progn setf get quote 'swank-backend::implementation flet function if member swank-backend::*interface-functions* setq swank-backend::*unimplemented-interfaces* remove warn "DEFIMPLEMENTATION of undefined interface (~S)" #Y(swank-backend::defimplementation nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 45 7 38 14 15 8 77 77 15 9 13 2 13 1 19 6 10 33 11 12 13 1 19 2 12 76 40 -23 15 13 15 14 15 15 15 16 10 2 6 2 12 1 17 6 3 12 15 18 13 2 13 1 10 0 7 3 6 1 12 15 19 10 2 6 2 6 3 6 3 12 15 20 15 21 15 16 10 2 6 2 12 1 22 6 3 12 15 23 15 24 15 25 15 16 10 2 6 2 12 1 24 6 3 6 3 12 15 26 15 27 15 16 10 2 6 2 6 3 6 4 12 15 16 10 2 6 2 6 4 73 29) #5# #2# 5834) t si::fset)) #2# 5834) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 1 0 73 29) #6=#A(t (14) (swank-backend::warn-unimplemented-interfaces t *print-pretty* "These Swank interfaces are unimplemented:~% ~:<~{~A~^ ~:_~}~:>" swank-backend::*unimplemented-interfaces* copy-list string< sort warn #Y(swank-backend::warn-unimplemented-interfaces nil nil (26 11 1 48 2 15 3 11 4 16 5 12 33 6 12 19 2 7 6 1 12 19 2 8 44 1 29) #6# #2# 6403) si::fset function "Warn the user about unimplemented backend features.
The portable code calls this function at startup." si::set-documentation)) #2# 6403) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 1 0 73 29) #7=#A(t (13) (swank-backend::import-to-swank-mop swank-backend::symbol-list si::%dolist-var swank-backend::sym symbol-name :swank-mop find-symbol swank-backend::swank-mop-sym unintern import export #Y(swank-backend::import-to-swank-mop nil nil (24 45 1 26 10 0 45 2 75 45 3 38 50 10 1 4 51 0 10 0 16 4 12 14 5 19 2 6 45 7 10 0 39 8 13 0 14 5 19 2 8 13 1 14 5 19 2 9 13 1 14 5 19 2 10 43 1 10 1 5 51 1 10 1 40 -52 75 73 43 2 29) #7# #2# 6736) si::fset)) #2# 6736) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 15 0 15 23 15 24 19 3 25 1 0 73 29) #8=#A(t (26) (swank-backend::import-swank-mop-symbols package swank-backend::except :swank-mop (:inherited :internal :external) t si::packages-iterator #:g274 #:g275 swank-backend::s :test string= member string find-symbol swank-backend::real-symbol "Symbol ~A not found in package ~A" si::assert-failure unintern import export #Y(swank-backend::import-swank-mop-symbols nil nil (24 45 1 24 45 2 26 58 60 117 14 3 15 4 14 5 19 3 6 45 7 75 45 8 75 45 9 38 90 13 2 20 0 23 51 1 55 0 1 10 1 76 39 5 75 73 36 3 13 0 13 4 14 10 33 11 12 19 4 12 76 39 56 10 0 16 13 12 13 5 19 2 14 45 15 38 14 15 15 77 77 15 16 13 1 13 6 19 6 17 10 0 76 40 -17 13 1 14 3 19 2 18 13 0 14 3 19 2 19 13 0 14 3 19 2 20 43 1 75 39 -91 75 73 43 3 63 29) #8# #2# 7019) si::fset function "Import the mop symbols from PACKAGE to SWANK-MOP.
EXCEPT is a list of symbol names which should be ignored." si::set-documentation)) #2# 7019) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 1 3 52 0 1 0 73 29) #A(t (4) (swank-backend::*gray-stream-symbols* si::*make-special boundp (:fundamental-character-output-stream :stream-write-char :stream-write-string :stream-fresh-line :stream-force-output :stream-finish-output :fundamental-character-input-stream :stream-read-char :stream-peek-char :stream-read-line :stream-listen :stream-unread-char :stream-clear-input :stream-line-column :stream-read-char-no-hang))) #2# 7521) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 1 0 73 29) #9=#A(t (19) (swank-backend::import-from package swank-backend::symbol-names *package* swank-backend::to-package si::%dolist-var swank-backend::name string find-symbol swank-backend::found symbol "Symbol ~A not found in package ~A" si::assert-failure import #Y(swank-backend::import-from nil nil (24 45 1 24 45 2 25 40 3 14 3 46 4 26 10 1 45 5 75 45 6 38 55 10 1 4 51 0 10 0 16 7 12 13 4 19 2 8 47 1 9 45 10 38 14 15 9 77 77 15 11 13 2 13 6 19 6 12 10 1 76 40 -17 13 0 13 4 19 2 13 43 2 10 1 5 51 1 10 1 40 -57 75 73 43 2 29) #9# #2# 8290) si::fset function "Import the list of SYMBOL-NAMES found in the package PACKAGE." si::set-documentation)) #2# 8290) #Y(si::bytecodes nil nil (15 0 1 38 12 14 39 9 3 19 4 40 15 0 15 41 15 42 19 3 43 1 0 73 29) #10=#A(t (44) (swank-backend::with-struct #:g277 #:g276 #:g278 si::dm-too-few-arguments #:g279 #:g280 swank-backend::conc-name swank-backend::names swank-backend::obj swank-backend::body #:g299 symbol typep si::do-check-type swank-backend::slot string symbol-name concatenate symbol-package intern #Y(swank-backend::reader nil nil (24 45 15 26 15 16 10 4 16 17 12 10 0 16 17 12 19 3 18 12 10 4 16 19 12 19 2 20 29) #10# #2# 8654) "OO-" gensym swank-backend::tmp let symbol-macrolet #:loop-list301 swank-backend::name #:loop-list-head302 #:loop-list-tail303 0 #:g304 cons second "Malformed syntax in WITH-STRUCT: ~A" error rplacd #Y(swank-backend::with-struct nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 45 8 10 4 76 39 6 13 6 19 1 4 10 4 4 12 10 4 5 51 4 22 45 9 10 5 45 10 10 3 45 11 13 0 15 12 19 2 13 76 39 13 13 0 15 12 77 15 7 19 4 14 51 4 43 1 30 1 21 15 22 19 1 23 45 24 15 25 13 0 10 3 6 2 6 1 12 15 26 58 60 135 77 13 5 46 27 46 28 75 6 1 45 29 10 0 45 30 57 31 61 2 2 100 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 10 3 45 32 13 0 15 12 19 2 13 39 18 13 4 13 4 32 8 18 1 12 10 7 6 2 6 2 38 39 13 0 15 33 19 2 13 39 23 10 4 4 12 10 4 16 34 12 32 8 18 1 12 10 7 6 2 6 2 38 8 15 35 13 4 19 2 36 43 1 6 1 51 1 17 37 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 10 2 7 3 6 3 73 43 1 43 1 29) #10# #2# 8654) t si::fset function "Like with-slots but works only for structs." si::set-documentation)) #2# 8654) #Y(si::bytecodes nil nil (15 0 1 13 12 14 14 9 2 19 4 15 1 0 73 29) #11=#A(t (16) (swank-backend::when-let #:g306 #:g305 #:g307 si::dm-too-few-arguments #:g308 #:g309 swank-backend::var swank-backend::value swank-backend::body si::dm-too-many-arguments let when #Y(swank-backend::when-let nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 76 39 6 13 4 19 1 4 10 0 4 12 10 0 5 51 0 22 45 7 10 1 76 39 6 13 5 19 1 4 10 1 4 12 10 1 5 51 1 22 45 8 10 4 45 9 10 3 39 6 13 7 19 1 10 15 11 13 2 10 1 6 2 6 1 12 15 12 13 2 10 0 7 3 6 3 73 29) #11# #2# 9473) t si::fset)) #2# 9473) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 1 0 73 29) #12=#A(t (13) (swank-backend::with-symbol swank-backend::name package find-package string find-symbol (:and) (:or) #Y(swank-backend::with-symbol nil nil (24 45 1 24 45 2 26 10 0 16 3 39 11 10 1 16 4 12 13 0 19 2 5 39 6 1 6 73 38 4 1 7 73 29) #12# #2# 9572) si::fset function "Generate a form suitable for testing with #+." si::set-documentation)) #2# 9572) #Y(si::bytecodes nil nil (15 0 15 1 15 2 19 3 3 29) #A(t (4) (swank-backend::octet (deftype swank-backend::octet nil '#13=(unsigned-byte 8)) #13# si::do-deftype)) #2# 9775) #Y(si::bytecodes nil nil (15 0 15 1 15 2 19 3 3 29) #A(t (4) (swank-backend::octets (deftype swank-backend::octets nil '#14=(simple-array swank-backend::octet (*))) #14# si::do-deftype)) #2# 9832) #Y(si::bytecodes nil nil (15 0 1 26 12 19 2 27 1 0 73 29) #15=#A(t (28) (swank-backend::utf8-decode-aux swank-backend::buffer swank-backend::index swank-backend::limit swank-backend::byte0 swank-backend::n - < swank-backend::code swank-backend::i 1+ + aref byte ldb = ash "Invalid encoding" error <= code-char 55296 57343 "Invalid Unicode code point: #x~x" char-code-limit "Can't represent code point: #x~x ~
                            (char-code-limit is #x~x)" #Y(swank-backend::utf8-decode-aux nil nil (24 45 1 24 45 2 24 45 3 24 45 4 24 45 5 26 13 2 13 3 19 2 6 12 13 0 19 2 7 39 8 77 13 3 72 2 38 168 9 0 13 1 46 8 46 9 38 76 10 0 16 10 12 13 6 13 5 13 0 19 2 11 12 19 2 12 45 13 9 2 8 6 17 13 12 10 0 17 14 12 9 2 19 2 15 39 25 13 2 8 6 17 16 12 9 6 8 0 17 13 12 10 0 17 14 12 19 2 11 38 6 15 17 19 1 18 12 43 1 53 1 53 0 13 0 13 2 19 2 15 39 -83 13 1 9 255 19 2 19 39 7 10 1 16 20 38 46 15 21 13 1 15 22 19 3 19 39 10 15 23 13 1 19 2 18 38 26 13 1 14 24 19 2 7 39 5 10 1 16 20 73 40 10 15 25 13 1 14 24 19 3 18 12 13 5 13 2 19 2 11 12 72 2 43 2 29) #15# #2# 9879) si::fset)) #2# 9879) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #16=#A(t (17) (swank-backend::utf8-decode swank-backend::buffer swank-backend::index swank-backend::limit = aref swank-backend::b <= code-char 1+ byte ldb swank-backend::utf8-decode-aux "Invalid encoding" error #Y(swank-backend::utf8-decode nil nil (24 45 1 24 45 2 24 45 3 26 13 1 13 0 19 2 4 39 8 77 13 1 72 2 38 275 13 2 13 1 19 2 5 45 6 13 0 9 127 19 2 7 39 15 10 0 16 8 12 10 2 16 9 12 72 2 38 241 9 3 8 5 17 10 12 10 0 17 11 12 9 6 19 2 4 39 29 13 3 10 2 16 9 12 13 1 9 5 8 0 17 10 12 10 0 17 11 12 9 1 19 5 12 38 194 9 4 8 4 17 10 12 10 0 17 11 12 9 14 19 2 4 39 29 13 3 10 2 16 9 12 13 1 9 4 8 0 17 10 12 10 0 17 11 12 9 2 19 5 12 38 147 9 5 8 3 17 10 12 10 0 17 11 12 9 30 19 2 4 39 29 13 3 10 2 16 9 12 13 1 9 3 8 0 17 10 12 10 0 17 11 12 9 3 19 5 12 38 100 9 6 8 2 17 10 12 10 0 17 11 12 9 62 19 2 4 39 29 13 3 10 2 16 9 12 13 1 9 2 8 0 17 10 12 10 0 17 11 12 9 4 19 5 12 38 53 9 7 8 1 17 10 12 10 0 17 11 12 9 126 19 2 4 39 29 13 3 10 2 16 9 12 13 1 9 1 8 0 17 10 12 10 0 17 11 12 9 5 19 5 12 38 6 15 13 19 1 14 43 1 29) #16# #2# 11081) si::fset)) #2# 11081) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #17=#A(t (16) (swank-backend::utf8-decode-into swank-backend::buffer swank-backend::index swank-backend::limit string swank-backend::start swank-backend::end 0 = swank-backend::utf8-decode swank-backend::i swank-backend::c si::aset 1+ #Y(swank-backend::utf8-decode-into nil nil (24 45 1 24 45 2 24 45 3 24 45 4 24 45 5 24 45 6 26 58 60 80 57 7 61 1 1 13 3 13 2 19 2 8 39 11 13 6 13 3 72 2 36 1 38 50 13 7 13 6 13 5 19 3 9 47 1 10 45 11 10 0 39 22 13 6 13 5 13 0 19 3 12 10 1 51 8 10 5 16 13 51 5 38 9 13 8 13 5 72 2 36 3 43 2 35 0 0 62 73 63 29) #17# #2# 12252) si::fset)) #2# 12252) #Y(si::bytecodes nil nil (15 0 1 17 12 19 2 18 1 0 73 29) #18=#A(t (19) (swank-backend::default-utf8-to-string swank-backend::octets length swank-backend::limit make-string swank-backend::str swank-backend::utf8-decode-into swank-backend::s swank-backend::i = adjust-array 0 - + swank-backend::end swank-backend::s2 swank-backend::i2 #Y(swank-backend::default-utf8-to-string nil nil (24 45 1 26 10 0 16 2 45 3 13 0 19 1 4 45 5 13 2 9 0 13 1 13 0 9 0 13 1 19 6 6 47 1 7 45 8 13 0 13 3 19 2 9 39 24 13 3 13 1 19 2 9 39 6 10 2 73 38 8 13 2 13 1 19 2 10 38 94 58 60 91 57 11 61 1 1 10 4 16 2 12 13 5 13 2 19 2 12 12 19 2 13 45 14 13 5 13 0 19 2 10 51 5 13 7 13 3 13 6 13 5 13 4 13 0 19 6 6 47 1 15 45 16 13 0 13 8 19 2 9 39 12 13 7 13 1 19 2 10 36 4 38 9 10 0 51 5 10 1 51 6 43 2 43 1 35 0 0 62 73 63 43 2 43 2 29) #18# #2# 13021) si::fset)) #2# 13021) #Y(si::bytecodes nil nil (15 0 1 33 12 14 14 9 6 19 4 34 1 0 73 29) #19=#A(t (35) (swank-backend::utf8-encode-aux #:g327 #:g326 #:g328 si::dm-too-few-arguments swank-backend::code swank-backend::buffer swank-backend::start swank-backend::end swank-backend::n si::dm-too-many-arguments cond < - t setf aref dpb ldb byte 1- * #:loop-limit338 swank-backend::i #:loop-list-head339 #:loop-list-tail340 0 > + ((byte 6 0) 191) rplacd 1+ append #Y(swank-backend::utf8-encode-aux nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 1 76 39 6 13 3 19 1 4 10 1 4 12 10 1 5 51 1 22 45 6 10 2 76 39 6 13 4 19 1 4 10 2 4 12 10 2 5 51 2 22 45 7 10 3 76 39 6 13 5 19 1 4 10 3 4 12 10 3 5 51 3 22 45 8 10 4 76 39 6 13 6 19 1 4 10 4 4 12 10 4 5 51 4 22 45 9 10 5 39 6 13 7 19 1 10 15 11 15 12 15 13 13 1 10 2 6 3 12 10 0 6 3 12 10 2 6 2 12 15 14 15 15 15 16 13 3 10 2 6 3 12 15 17 15 18 15 19 9 7 13 0 19 2 13 12 9 6 10 0 16 20 12 19 2 21 6 3 12 10 4 6 3 12 15 19 9 7 13 0 19 2 13 12 8 0 6 3 12 9 0 9 1 9 7 13 0 19 2 13 17 19 12 9 255 19 3 17 6 4 6 3 12 58 60 125 9 0 13 1 9 2 19 2 13 12 46 22 46 23 75 6 1 45 24 10 0 45 25 57 26 61 2 2 83 13 3 13 4 19 2 27 39 4 35 0 1 13 1 15 15 15 16 13 9 15 28 13 8 13 6 9 1 13 3 19 3 13 6 3 6 3 12 15 17 15 18 15 19 9 6 9 6 13 3 19 2 21 6 3 12 10 10 6 3 12 1 29 7 3 6 3 6 1 51 1 17 30 10 3 16 31 51 3 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 12 15 28 13 2 10 0 6 3 6 1 12 19 2 32 7 3 6 3 73 29) #19# #2# 13737) si::fset)) #2# 13737) #Y(si::bytecodes nil nil (15 0 1 25 12 19 2 26 1 0 73 29) #20=#A(t (27) (swank-backend::utf8-encode char swank-backend::buffer swank-backend::start swank-backend::end char-code swank-backend::code <= < si::aset 1+ - byte ldb dpb + 55296 57343 "Invalid Unicode code point (surrogate): #x~x" error 65535 2097151 67108863 2147483647 "Can't encode ~s (~x)" #Y(swank-backend::utf8-encode nil nil (24 45 1 24 45 2 24 45 3 24 45 4 26 10 3 16 5 45 6 13 0 9 127 19 2 7 39 30 13 2 13 1 19 2 8 39 16 13 3 13 2 13 0 19 3 9 10 2 16 10 38 4 10 2 73 38 950 13 0 9 2047 19 2 7 39 100 13 1 13 2 19 2 11 12 9 2 19 2 8 39 6 10 2 73 38 78 13 3 13 2 9 5 8 6 17 12 12 10 0 17 13 12 9 5 8 0 17 12 12 9 223 19 3 14 12 19 3 9 13 3 13 2 9 1 19 2 15 12 9 6 8 0 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 2 9 2 19 2 15 38 842 15 16 13 0 15 17 19 3 7 39 10 15 18 13 0 19 2 19 38 822 13 0 15 20 19 2 7 39 138 13 1 13 2 19 2 11 12 9 3 19 2 8 39 6 10 2 73 38 116 13 3 13 2 9 4 8 12 17 12 12 10 0 17 13 12 9 4 8 0 17 12 12 9 239 19 3 14 12 19 3 9 13 3 13 2 9 2 19 2 15 12 9 6 8 0 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 1 19 2 15 12 9 6 8 6 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 2 9 3 19 2 15 38 676 13 0 15 21 19 2 7 39 176 13 1 13 2 19 2 11 12 9 4 19 2 8 39 6 10 2 73 38 154 13 3 13 2 9 3 8 18 17 12 12 10 0 17 13 12 9 3 8 0 17 12 12 9 247 19 3 14 12 19 3 9 13 3 13 2 9 3 19 2 15 12 9 6 8 0 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 2 19 2 15 12 9 6 8 6 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 1 19 2 15 12 9 6 8 12 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 2 9 4 19 2 15 38 492 13 0 15 22 19 2 7 39 214 13 1 13 2 19 2 11 12 9 5 19 2 8 39 6 10 2 73 38 192 13 3 13 2 9 2 8 24 17 12 12 10 0 17 13 12 9 2 8 0 17 12 12 9 251 19 3 14 12 19 3 9 13 3 13 2 9 4 19 2 15 12 9 6 8 0 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 3 19 2 15 12 9 6 8 6 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 2 19 2 15 12 9 6 8 12 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 1 19 2 15 12 9 6 8 18 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 2 9 5 19 2 15 38 270 13 0 15 23 19 2 7 39 252 13 1 13 2 19 2 11 12 9 6 19 2 8 39 6 10 2 73 38 230 13 3 13 2 9 1 8 30 17 12 12 10 0 17 13 12 9 1 8 0 17 12 12 9 253 19 3 14 12 19 3 9 13 3 13 2 9 5 19 2 15 12 9 6 8 0 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 4 19 2 15 12 9 6 8 6 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 3 19 2 15 12 9 6 8 12 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 2 19 2 15 12 9 6 8 18 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 3 13 2 9 1 19 2 15 12 9 6 8 24 17 12 12 10 0 17 13 12 9 6 8 0 17 12 12 9 191 19 3 14 12 19 3 9 13 2 9 6 19 2 15 38 10 15 24 13 4 13 0 19 3 19 43 1 29) #20# #2# 14348) si::fset)) #2# 14348) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 1 0 73 29) #21=#A(t (16) (swank-backend::utf8-encode-into string swank-backend::start swank-backend::end swank-backend::buffer swank-backend::index swank-backend::limit 0 = char swank-backend::utf8-encode swank-backend::i2 #:g472 + #Y(swank-backend::utf8-encode-into nil nil (24 45 1 24 45 2 24 45 3 24 45 4 24 45 5 24 45 6 26 58 60 108 57 7 61 1 1 13 6 13 5 19 2 8 39 11 13 6 13 3 72 2 36 1 38 78 13 3 13 2 19 2 8 39 11 13 6 13 3 72 2 36 1 38 59 13 7 10 6 17 9 12 13 4 13 3 13 2 19 4 10 45 11 13 0 13 4 19 2 8 39 11 13 7 13 4 72 2 36 2 38 20 10 0 51 4 8 1 45 12 13 8 13 0 19 2 13 51 8 43 1 43 1 35 0 0 62 73 63 29) #21# #2# 15206) si::fset)) #2# 15206) #Y(si::bytecodes nil nil (15 0 1 21 12 19 2 22 1 0 73 29) #22=#A(t (23) (swank-backend::default-string-to-utf8 string length swank-backend::len :element-type swank-backend::octet make-array swank-backend::b swank-backend::utf8-encode-into swank-backend::i swank-backend::s = 0 - + swank-backend::limit adjust-array swank-backend::octets coerce swank-backend::i2 swank-backend::s2 #Y(swank-backend::default-string-to-utf8 nil nil (24 45 1 26 10 0 16 2 45 3 13 0 14 4 15 5 19 3 6 45 7 13 2 9 0 13 1 13 0 9 0 13 1 19 6 8 47 1 9 45 10 13 0 13 3 19 2 11 39 6 10 2 73 38 104 58 60 101 57 12 61 1 1 10 4 16 2 12 13 5 13 2 19 2 13 12 19 2 14 45 15 13 5 13 0 19 2 16 12 1 17 17 18 51 5 13 7 13 3 13 6 13 5 13 4 13 0 19 6 8 47 1 19 45 20 13 0 13 8 19 2 11 39 17 13 7 13 1 19 2 16 12 1 17 17 18 36 4 38 9 10 1 51 6 10 0 51 5 43 2 43 1 35 0 0 62 73 63 43 2 43 2 29) #22# #2# 15768) si::fset)) #2# 15768) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #23=#A(t (24) (swank-backend::string-to-utf8 string swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::string-to-utf8 nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #23# #2# 16444) si::fset function "Convert the string STRING to a (simple-array (unsigned-byte 8))" si::set-documentation swank-backend::*interface-functions* adjoin #:g476 #:g477 swank-backend::default-string-to-utf8 #Y(nil nil nil (24 45 1 26 13 0 19 1 18 29) #23# #2# 16444) #:g478 si::putprop :swank-backend export)) #2# 16444) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #24=#A(t (24) (swank-backend::utf8-to-string swank-backend::octets swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::utf8-to-string nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #24# #2# 16590) si::fset function "Convert the (simple-array (unsigned-byte 8)) OCTETS to a string." si::set-documentation swank-backend::*interface-functions* adjoin #:g480 #:g481 swank-backend::default-utf8-to-string #Y(nil nil nil (24 45 1 26 13 0 19 1 18 29) #24# #2# 16590) #:g482 si::putprop :swank-backend export)) #2# 16590) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #25=#A(t (24) (swank-backend::codepoint-length string swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::codepoint-length nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #25# #2# 16737) si::fset function "Return the number of codepoints in STRING.
With some Lisps, like cmucl, LENGTH returns the number of UTF-16 code
units, but other Lisps return the number of codepoints. The slime
protocol wants string lengths in terms of codepoints." si::set-documentation swank-backend::*interface-functions* adjoin #:g484 #:g485 length #Y(nil nil nil (24 45 1 26 10 0 16 18 29) #25# #2# 16737) #:g486 si::putprop :swank-backend export)) #2# 16737) #Y(si::bytecodes nil nil (15 0 1 13 12 19 2 14 15 0 15 15 15 16 19 3 17 15 0 14 18 19 2 19 52 18 15 0 14 20 19 2 19 52 20 15 0 14 21 19 2 22 1 0 73 29) #26=#A(t (23) (swank-backend::create-socket swank-backend::host swank-backend::port (nil :backlog) swank-backend::backlog swank-backend::implementation get swank-backend::default swank-backend::f :backlog apply #4# error #Y(swank-backend::create-socket nil nil (24 45 1 24 45 2 28 3 22 40 2 77 46 4 15 0 15 5 19 2 6 40 8 15 0 15 7 19 2 6 45 8 10 0 39 17 13 0 13 3 13 2 14 9 13 1 77 19 6 10 38 8 15 11 15 0 19 2 12 43 1 29) #26# #2# 17097) si::fset function "Create a listening TCP socket on interface HOST and port PORT.
BACKLOG queue length for incoming connections." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 17097) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #27=#A(t (19) (swank-backend::local-port swank-backend::socket swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::local-port nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #27# #2# 17292) si::fset function "Return the local port number of SOCKET." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 17292) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #28=#A(t (19) (swank-backend::close-socket swank-backend::socket swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::close-socket nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #28# #2# 17375) si::fset function "Close the socket SOCKET." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 17375) #Y(si::bytecodes nil nil (15 0 1 16 12 19 2 17 15 0 15 18 15 19 19 3 20 15 0 14 21 19 2 22 52 21 15 0 14 23 19 2 22 52 23 15 0 14 24 19 2 25 1 0 73 29) #29=#A(t (26) (swank-backend::accept-connection swank-backend::socket (nil :timeout :buffering :external-format) swank-backend::external-format swank-backend::buffering swank-backend::timeout swank-backend::implementation get swank-backend::default swank-backend::f :external-format :buffering :timeout apply #4# error #Y(swank-backend::accept-connection nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 2 77 46 4 22 40 2 77 46 5 15 0 15 6 19 2 7 40 8 15 0 15 8 19 2 7 45 9 10 0 39 23 13 0 13 4 14 10 13 3 14 11 13 2 14 12 13 1 77 19 9 13 38 8 15 14 15 0 19 2 15 43 1 29) #29# #2# 17445) si::fset function "Accept a client connection on the listening socket SOCKET.  
Return a stream for the new connection.
If EXTERNAL-FORMAT is nil return a binary stream
otherwise create a character stream.
BUFFERING can be one of:
  nil   ... no buffering
  t     ... enable buffering
  :line ... enable buffering with automatic flushing on eol." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 17445) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #30=#A(t (20) (swank-backend::add-sigio-handler swank-backend::socket swank-backend::fn swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::add-sigio-handler nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #30# #2# 17910) si::fset function "Call FN whenever SOCKET is readable." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 17910) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #31=#A(t (19) (swank-backend::remove-sigio-handlers swank-backend::socket swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::remove-sigio-handlers nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #31# #2# 18000) si::fset function "Remove all sigio handlers for SOCKET." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 18000) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #32=#A(t (20) (swank-backend::add-fd-handler swank-backend::socket swank-backend::fn swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::add-fd-handler nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #32# #2# 18092) si::fset function "Call FN when Lisp is waiting for input and SOCKET is readable." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 18092) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #33=#A(t (19) (swank-backend::remove-fd-handlers swank-backend::socket swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::remove-fd-handlers nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #33# #2# 18205) si::fset function "Remove all fd-handlers for SOCKET." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 18205) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #34=#A(t (22) (swank-backend::preferred-communication-style swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::preferred-communication-style nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #34# #2# 18291) si::fset function "Return one of the symbols :spawn, :sigio, :fd-handler, or NIL." si::set-documentation swank-backend::*interface-functions* adjoin #:g504 #:g505 #Y(nil nil nil (26 75 73 29) #34# #2# 18291) #:g506 si::putprop :swank-backend export)) #2# 18291) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #35=#A(t (24) (swank-backend::set-stream-timeout stream swank-backend::timeout swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::set-stream-timeout nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #35# #2# 18417) si::fset function "Set the 'stream 'timeout.  The timeout is either the real number
  specifying the timeout in seconds or 'nil for no timeout." si::set-documentation swank-backend::*interface-functions* adjoin #:g508 #:g509 #Y(nil nil nil (24 45 1 24 45 2 26 75 73 29) #35# #2# 18417) #:g510 si::putprop :swank-backend export)) #2# 18417) #Y(si::bytecodes nil nil (15 0 15 1 77 77 19 4 2 1 0 73 29) #A(t (3) (swank-backend::network-error (simple-error) clos::load-defclass)) #2# 18646) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #36=#A(t (22) (swank-backend::emacs-connected swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::emacs-connected nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #36# #2# 18743) si::fset function "Hook called when the first connection from Emacs is established.
Called from the INIT-FN of the socket server that accepts the
connection.

This is intended for setting up extra context, e.g. to discover
that the calling thread is the one that interacts with Emacs." si::set-documentation swank-backend::*interface-functions* adjoin #:g512 #:g513 #Y(nil nil nil (26 75 73 29) #36# #2# 18743) #:g514 si::putprop :swank-backend export)) #2# 18743) #Y(si::bytecodes nil nil (15 0 8 2 17 1 1 0 73 29) #A(t (2) (swank-backend::+sigint+ si::*make-constant)) #2# 19065) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #37=#A(t (18) (swank-backend::getpid swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::getpid nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #37# #2# 19117) si::fset function "Return the (Unix) process ID of this superior Lisp." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 19117) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 1 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 4 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #38=#A(t (22) (swank-backend::install-sigint-handler function swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::install-sigint-handler nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #38# #2# 19202) si::fset "Call FUNCTION on SIGINT (instead of invoking the debugger).
Return old signal handler." si::set-documentation swank-backend::*interface-functions* adjoin #:g518 #:g519 #Y(nil nil nil (24 45 1 26 75 73 29) #38# #2# 19202) #:g520 si::putprop :swank-backend export)) #2# 19202) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 2 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 5 45 17 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #39=#A(t (25) (swank-backend::call-with-user-break-handler swank-backend::handler function swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::call-with-user-break-handler nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #39# #2# 19385) si::fset "Install the break handler HANDLER while executing FUNCTION." si::set-documentation swank-backend::*interface-functions* adjoin #:g522 #:g523 swank-backend::install-sigint-handler swank-backend::old-handler #Y(nil nil nil (24 45 1 24 45 2 26 13 1 19 1 18 45 19 64 7 13 1 20 0 23 65 13 0 19 1 18 66 43 1 29) #39# #2# 19385) #:g524 si::putprop :swank-backend export)) #2# 19385) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #40=#A(t (18) (swank-backend::quit-lisp swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::quit-lisp nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #40# #2# 19659) si::fset function "Exit the current lisp image." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 19659) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #41=#A(t (23) (swank-backend::lisp-implementation-type-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::lisp-implementation-type-name nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #41# #2# 19724) si::fset function "Return a short name for the Lisp implementation." si::set-documentation swank-backend::*interface-functions* adjoin #:g528 #:g529 lisp-implementation-type #Y(nil nil nil (26 19 0 17 29) #41# #2# 19724) #:g530 si::putprop :swank-backend export)) #2# 19724) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 22 45 23 13 2 13 0 13 1 19 3 24 43 1 43 2 15 0 14 25 19 2 26 1 0 73 29) #42=#A(t (27) (swank-backend::lisp-implementation-program swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::lisp-implementation-program nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #42# #2# 19859) si::fset function "Return the argv[0] of the running Lisp process, or NIL." si::set-documentation swank-backend::*interface-functions* adjoin #:g532 #:g533 swank-backend::command-line-args swank-backend::file probe-file truename namestring #Y(nil nil nil (26 19 0 17 4 45 18 10 0 39 5 10 0 16 19 73 39 7 10 0 16 20 16 21 43 1 29) #42# #2# 19859) #:g534 si::putprop :swank-backend export)) #2# 19859) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #43=#A(t (19) (swank-backend::socket-fd swank-backend::socket-stream swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::socket-fd nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #43# #2# 20090) si::fset function "Return the file descriptor for SOCKET-STREAM." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 20090) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #44=#A(t (20) (swank-backend::make-fd-stream swank-backend::fd swank-backend::external-format swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::make-fd-stream nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #44# #2# 20185) si::fset function "Create a character stream for the file descriptor FD." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 20185) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #45=#A(t (19) (swank-backend::dup swank-backend::fd swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::dup nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #45# #2# 20298) si::fset function "Duplicate a file descriptor.
If the syscall fails, signal a condition.
See dup(2)." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 20298) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #46=#A(t (20) (swank-backend::exec-image swank-backend::image-file swank-backend::args swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::exec-image nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #46# #2# 20415) si::fset function "Replace the current process with a new process image.
The new image is created by loading the previously dumped
core file IMAGE-FILE.
ARGS is a list of strings passed as arguments to
the new image.
This is thin wrapper around exec(3)." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 20415) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #47=#A(t (22) (swank-backend::command-line-args swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::command-line-args nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #47# #2# 20707) si::fset function "Return a list of strings as passed by the OS." si::set-documentation swank-backend::*interface-functions* adjoin #:g544 #:g545 #Y(nil nil nil (26 75 73 29) #47# #2# 20707) #:g546 si::putprop :swank-backend export)) #2# 20707) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #48=#A(t (24) (swank-backend::filename-to-pathname swank-backend::filename swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::filename-to-pathname nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #48# #2# 20804) si::fset function "Return a pathname for FILENAME.
A filename in Emacs may for example contain asterisks which should not
be translated to wildcards." si::set-documentation swank-backend::*interface-functions* adjoin #:g548 #:g549 parse-namestring #Y(nil nil nil (24 45 1 26 13 0 19 1 18 29) #48# #2# 20804) #:g550 si::putprop :swank-backend export)) #2# 20804) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #49=#A(t (24) (swank-backend::pathname-to-filename pathname swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::pathname-to-filename nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #49# #2# 21059) si::fset function "Return the filename for PATHNAME." si::set-documentation swank-backend::*interface-functions* adjoin #:g552 #:g553 namestring #Y(nil nil nil (24 45 1 26 10 0 16 18 29) #49# #2# 21059) #:g554 si::putprop :swank-backend export)) #2# 21059) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #50=#A(t (25) (swank-backend::default-directory swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::default-directory nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #50# #2# 21173) si::fset function "Return the default directory." si::set-documentation swank-backend::*interface-functions* adjoin #:g556 #:g557 *default-pathname-defaults* truename directory-namestring #Y(nil nil nil (26 11 17 16 18 16 19 29) #50# #2# 21173) #:g558 si::putprop :swank-backend export)) #2# 21173) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 22 45 23 13 2 13 0 13 1 19 3 24 43 1 43 2 15 0 14 25 19 2 26 1 0 73 29) #51=#A(t (27) (swank-backend::set-default-directory directory swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::set-default-directory nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #51# #2# 21312) si::fset function "Set the default directory.
This is used to resolve filenames without directory component." si::set-documentation swank-backend::*interface-functions* adjoin #:g560 #:g561 merge-pathnames truename *default-pathname-defaults* swank-backend::default-directory #Y(nil nil nil (24 45 1 26 13 0 19 1 18 16 19 52 20 19 0 21 29) #51# #2# 21312) #:g562 si::putprop :swank-backend export)) #2# 21312) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #52=#A(t (23) (swank-backend::call-with-syntax-hooks swank-backend::fn swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::call-with-syntax-hooks nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #52# #2# 21560) si::fset function "Call FN with hooks to handle special syntax." si::set-documentation swank-backend::*interface-functions* adjoin #:g565 #:g566 #Y(nil nil nil (24 45 1 26 13 0 20 0 23 29) #52# #2# 21560) #:g567 si::putprop :swank-backend export)) #2# 21560) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #53=#A(t (22) (swank-backend::default-readtable-alist swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::default-readtable-alist nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #53# #2# 21675) si::fset function "Return a suitable initial value for SWANK:*READTABLE-ALIST*." si::set-documentation swank-backend::*interface-functions* adjoin #:g569 #:g570 #Y(nil nil nil (26 75 73 29) #53# #2# 21675) #:g571 si::putprop :swank-backend export)) #2# 21675) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #54=#A(t (19) (swank-backend::call-with-compilation-hooks swank-backend::func swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::call-with-compilation-hooks nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #54# #2# 21793) si::fset function "Call FUNC with hooks to record compiler conditions." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 21793) #Y(si::bytecodes nil nil (15 0 1 12 12 14 13 9 2 19 4 14 15 0 15 15 15 16 19 3 17 1 0 73 29) #55=#A(t (18) (swank-backend::with-compilation-hooks #:g575 #:g574 #:g576 si::dm-too-few-arguments #:g577 #:g578 ignore swank-backend::body swank-backend::call-with-compilation-hooks lambda progn #Y(swank-backend::with-compilation-hooks nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 76 39 6 13 2 19 1 4 10 0 4 12 10 0 5 51 0 22 45 5 10 0 45 6 10 0 45 7 10 3 45 8 15 9 15 10 77 15 11 10 0 7 2 6 3 6 2 73 29) #55# #2# 21926) t si::fset function "Execute BODY as in CALL-WITH-COMPILATION-HOOKS." si::set-documentation)) #2# 21926) #Y(si::bytecodes nil nil (15 0 1 18 12 19 2 19 15 0 15 20 15 21 19 3 22 15 0 14 23 19 2 24 52 23 15 0 14 25 19 2 24 52 25 15 0 14 26 19 2 27 1 0 73 29) #56=#A(t (28) (swank-backend::swank-compile-string string (nil :policy :filename :position :buffer) swank-backend::buffer position swank-backend::filename swank-backend::policy swank-backend::implementation get swank-backend::default swank-backend::f :buffer :position :filename :policy apply #4# error #Y(swank-backend::swank-compile-string nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 2 77 46 4 22 40 2 77 46 5 22 40 2 77 46 6 15 0 15 7 19 2 8 40 8 15 0 15 9 19 2 8 45 10 10 0 39 27 13 0 13 5 14 11 13 4 14 12 13 3 14 13 13 2 14 14 13 1 77 19 11 15 38 8 15 16 15 0 19 2 17 43 1 29) #56# #2# 22134) si::fset function "Compile source from STRING.
During compilation, compiler conditions must be trapped and
resignalled as COMPILER-CONDITIONs.

If supplied, BUFFER and POSITION specify the source location in Emacs.

Additionally, if POSITION is supplied, it must be added to source
positions reported in compiler conditions.

If FILENAME is specified it may be used by certain implementations to
rebind *DEFAULT-PATHNAME-DEFAULTS* which may improve the recording of
source information.

If POLICY is supplied, and non-NIL, it may be used by certain
implementations to compile with optimization qualities of its
value.

Should return T on successful compilation, NIL otherwise.
" si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 22134) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 15 0 15 17 15 18 19 3 19 15 0 14 20 19 2 21 52 20 15 0 14 22 19 2 21 52 22 15 0 14 23 19 2 24 1 0 73 29) #57=#A(t (25) (swank-backend::swank-compile-file swank-backend::input-file swank-backend::output-file swank-backend::load-p swank-backend::external-format (nil :policy) swank-backend::policy swank-backend::implementation get swank-backend::default swank-backend::f :policy apply #4# error #Y(swank-backend::swank-compile-file nil nil (24 45 1 24 45 2 24 45 3 24 45 4 28 5 22 40 2 77 46 6 15 0 15 7 19 2 8 40 8 15 0 15 9 19 2 8 45 10 10 0 39 21 13 0 13 5 13 4 13 3 13 2 14 11 13 1 77 19 8 12 38 8 15 13 15 0 19 2 14 43 1 29) #57# #2# 22945) si::fset function "Compile INPUT-FILE signalling COMPILE-CONDITIONs.
If LOAD-P is true, load the file after compilation.
EXTERNAL-FORMAT is a value returned by find-external-format or
:default.

If POLICY is supplied, and non-NIL, it may be used by certain
implementations to compile with optimization qualities of its
value.

Should return OUTPUT-TRUENAME, WARNINGS-P and FAILURE-p
like `compile-file'" si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 22945) #Y(si::bytecodes nil nil (15 0 15 1 15 2 19 3 3 29) #A(t (4) (swank-backend::severity (deftype swank-backend::severity nil '#58=(member :error :read-error :warning :style-warning :note :redefinition)) #58# si::do-deftype)) #2# 23535) #Y(si::bytecodes nil nil (15 0 15 1 15 2 77 19 4 3 1 0 73 29) #A(t (4) (swank-backend::compiler-condition (condition) ((:writers ((setf swank-backend::original-condition)) :readers (swank-backend::original-condition) :initargs (:original-condition) :type (or null condition) :name swank-backend::original-condition) (:writers ((setf swank-backend::severity)) :readers (swank-backend::severity) :initargs (:severity) :type swank-backend::severity :name swank-backend::severity) (:writers ((setf swank-backend::message)) :readers (swank-backend::message) :initargs (:message) :name swank-backend::message) (:writers ((setf swank-backend::source-context)) :readers (swank-backend::source-context) :initform nil :type (or null string) :initargs (:source-context) :name swank-backend::source-context) (:writers ((setf swank-backend::references)) :readers (swank-backend::references) :initform nil :initargs (:references) :name swank-backend::references) (:writers ((setf swank-backend::location)) :readers (swank-backend::location) :initargs (:location) :name swank-backend::location)) clos::load-defclass)) #2# 23637) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 21 45 22 13 2 13 0 13 1 19 3 23 43 1 43 2 15 0 14 24 19 2 25 1 0 73 29) #59=#A(t (26) (swank-backend::find-external-format swank-backend::coding-system swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::find-external-format nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #59# #2# 24631) si::fset function "Return a \"external file format designator\" for CODING-SYSTEM.
CODING-SYSTEM is Emacs-style coding system name (a string),
e.g. \"latin-1-unix\"." si::set-documentation swank-backend::*interface-functions* adjoin #:g584 #:g585 "iso-latin-1-unix" equal :default #Y(nil nil nil (24 45 1 26 13 0 1 18 17 19 39 6 11 20 73 38 3 75 73 29) #59# #2# 24631) #:g586 si::putprop :swank-backend export)) #2# 24631) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 53 45 54 13 2 13 0 13 1 19 3 55 43 1 43 2 15 0 14 56 19 2 57 1 0 73 29) #60=#A(t (58) (swank-backend::guess-external-format pathname swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::guess-external-format nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #60# #2# 24916) si::fset function "Detect the external format for the file with name pathname.
Return nil if the file contains no special markers." si::set-documentation swank-backend::*interface-functions* adjoin #:g588 #:g589 :if-does-not-exist :external-format "latin-1-unix" swank-backend::find-external-format :default open swank-backend::s read-line swank-backend::line "-*-" search swank-backend::p "-*-" length + swank-backend::start "-*-" :start2 swank-backend::end swank-backend::%search-coding file-length swank-backend::len min make-string swank-backend::buf - file-position read-sequence "Local Variables:" :from-end t "End:" < close :abort #Y(nil nil nil (24 45 1 26 13 0 14 18 77 14 19 15 20 19 1 21 73 40 4 11 22 73 12 19 5 23 45 24 64 187 10 0 73 39 170 13 0 77 19 2 25 45 26 15 27 13 0 19 2 28 45 29 10 0 39 41 13 0 1 30 16 31 12 19 2 32 45 33 15 34 13 2 14 35 13 0 19 4 28 45 36 10 0 39 10 13 3 13 1 13 0 19 3 37 43 2 43 2 73 40 104 10 0 16 38 45 39 13 0 9 3000 19 2 40 12 19 1 41 45 42 13 2 13 1 10 0 16 31 12 19 2 43 12 19 2 44 13 0 13 2 19 2 45 15 46 13 0 14 47 14 48 19 4 28 12 15 49 13 0 14 47 14 48 19 4 28 12 46 36 46 33 10 0 73 39 25 10 1 73 39 20 13 0 13 1 19 2 50 73 39 10 13 2 13 0 13 1 19 3 37 43 2 43 2 69 10 0 39 6 13 0 19 1 51 70 65 10 0 39 10 13 0 14 52 14 48 19 3 51 66 43 1 29) #60# #2# 24916) #:g590 si::putprop :swank-backend export)) #2# 24916) #Y(si::bytecodes nil nil (15 0 1 27 12 19 2 28 1 0 73 29) #61=#A(t (29) (swank-backend::%search-coding swank-backend::str swank-backend::start swank-backend::end "coding:" :start2 :end2 search swank-backend::p "coding:" length #:g598 + 0 < aref (#\  #\Tab) member #:g602 swank-backend::c (#\  #\Tab #\Newline) find #Y(nil nil nil (24 45 19 26 13 0 15 20 19 2 21 29) #61# #2# 26107) :start position-if subseq swank-backend::find-external-format #Y(swank-backend::%search-coding nil nil (24 45 1 24 45 2 24 45 3 26 15 4 13 2 14 5 13 1 14 6 13 0 19 6 7 45 8 10 0 73 39 100 1 9 16 10 45 11 13 1 13 0 19 2 12 51 1 43 1 57 13 61 2 2 47 13 1 13 2 19 2 14 39 14 13 4 13 1 19 2 15 12 15 16 19 2 17 76 39 4 35 0 1 8 1 45 18 13 2 13 0 19 2 12 51 2 43 1 35 0 0 62 34 22 12 13 3 14 23 13 0 19 4 24 45 3 13 4 13 1 13 0 19 3 25 12 19 1 26 43 1 43 1 29) #61# #2# 26107) si::fset)) #2# 26107) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #62=#A(t (19) (swank-backend::make-output-stream write-string swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::make-output-stream nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #62# #2# 26563) si::fset function "Return a new character output stream.
The stream calls WRITE-STRING when output is ready." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 26563) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #63=#A(t (19) (swank-backend::make-input-stream swank-backend::read-string swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::make-input-stream nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #63# #2# 26730) si::fset function "Return a new character input stream.
The stream calls READ-STRING when input is needed." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 26730) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #64=#A(t (24) (swank-backend::arglist swank-backend::name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::arglist nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #64# #2# 26874) si::fset function "Return the lambda list for the symbol NAME. NAME can also be
a lisp function object, on lisps which support this.

The result can be a list or the :not-available keyword if the
arglist cannot be determined." si::set-documentation swank-backend::*interface-functions* adjoin #:g608 #:g609 :not-available #Y(nil nil nil (24 45 1 26 11 18 73 29) #64# #2# 26874) #:g610 si::putprop :swank-backend export)) #2# 26874) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 15 0 15 0 77 15 8 15 9 1 41 12 14 2 19 6 42 12 19 2 43 29) #65=#A(t (44) (swank-backend::declaration-arglist :delete-methods t :lambda-list (swank-backend::decl-identifier) :documentation "Return the argument list of the declaration specifier belonging to the
declaration identifier DECL-IDENTIFIER. If the arglist cannot be determined,
the keyword :NOT-AVAILABLE is returned.

The different SWANK backends can specialize this generic function to
include implementation-dependend declaration specifiers, or to provide
additional information on the specifiers defined in ANSI Common Lisp." ensure-generic-function (t) (swank-backend::decl-identifier) swank-backend::decl-identifier dynamic-extent (&rest swank-backend::variables) ignore (&rest swank-backend::variables) ignorable (&rest swank-backend::variables) special (&rest swank-backend::variables) inline (&rest swank-backend::function-names) notinline (&rest swank-backend::function-names) declaration (&rest swank-backend::names) optimize (swank-backend::&any compilation-speed debug safety space speed) type (swank-backend::type-specifier &rest swank-backend::args) ftype (swank-backend::type-specifier &rest swank-backend::function-names) symbol :type swank-backend::describe-symbol-for-emacs member #Y(swank-backend::typespec-p nil nil (24 45 31 26 14 32 13 0 19 1 33 12 19 2 34 29) #65# #2# 27196) symbolp (&rest swank-backend::variables) listp (&rest swank-backend::variables) :not-available #Y(nil nil nil (24 45 10 26 10 0 42 11 6 1 12 73 38 121 42 13 6 1 14 73 38 113 42 15 6 1 16 73 38 105 42 17 6 1 18 73 38 97 42 19 6 1 20 73 38 89 42 21 6 1 22 73 38 81 42 23 6 1 24 73 38 73 42 25 6 1 26 73 38 65 42 27 6 1 28 73 38 57 42 29 6 1 30 73 38 49 30 1 35 10 1 16 36 39 7 13 1 32 0 18 1 39 6 1 37 73 38 25 10 1 16 38 39 9 10 1 4 12 32 0 18 1 39 6 1 39 73 38 4 11 40 73 43 1 29) #65# #2# 27196) clos::install-method clos::associate-methods-to-gfun)) #2# 27196) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 15 0 15 0 77 15 8 15 9 1 17 12 14 2 19 6 18 12 19 2 19 29) #66=#A(t (20) (swank-backend::type-specifier-arglist :delete-methods t :lambda-list (swank-backend::typespec-operator) :documentation "Return the argument list of the type specifier belonging to
TYPESPEC-OPERATOR.. If the arglist cannot be determined, the keyword
:NOT-AVAILABLE is returned.

The different SWANK backends can specialize this generic function to
include implementation-dependend declaration specifiers, or to provide
additional information on the specifiers defined in ANSI Common Lisp." ensure-generic-function (t) (swank-backend::typespec-operator) swank-backend::typespec-operator #:g614 symbol typep swank-backend::*type-specifier-arglists* assoc :not-available #Y(nil nil nil (24 45 10 26 10 0 45 11 13 0 15 12 19 2 13 39 17 13 1 14 14 19 2 15 5 73 40 4 11 16 73 38 4 11 16 73 43 1 29) #66# #2# 28661) clos::install-method clos::associate-methods-to-gfun)) #2# 28661) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 23 45 24 13 2 13 0 13 1 19 3 25 43 1 43 2 15 0 14 26 19 2 27 1 0 73 29) #67=#A(t (28) (swank-backend::type-specifier-p symbol swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::type-specifier-p nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #67# #2# 29403) si::fset function "Determine if SYMBOL is a type-specifier." si::set-documentation swank-backend::*interface-functions* adjoin #:g616 #:g617 type documentation swank-backend::type-specifier-arglist :not-available eq #Y(nil nil nil (24 45 1 26 13 0 15 18 19 2 19 73 40 13 13 0 19 1 20 12 11 21 17 22 76 73 29) #67# #2# 29403) #:g618 si::putprop :swank-backend export)) #2# 29403) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 1 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 4 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #68=#A(t (22) (swank-backend::function-name function swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::function-name nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #68# #2# 29595) si::fset "Return the name of the function object FUNCTION.

The result is either a symbol, a list, or NIL if no function name is
available." si::set-documentation swank-backend::*interface-functions* adjoin #:g620 #:g621 #Y(nil nil nil (24 45 1 26 75 73 29) #68# #2# 29595) #:g622 si::putprop :swank-backend export)) #2# 29595) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 26 45 27 13 2 13 0 13 1 19 3 28 43 1 43 2 15 0 14 29 19 2 30 1 0 73 29) #69=#A(t (31) (swank-backend::valid-function-name-p swank-backend::form swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::valid-function-name-p nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #69# #2# 29814) si::fset function "Is FORM syntactically valid to name a function?
   If true, FBOUNDP should not signal a type-error for FORM." si::set-documentation swank-backend::*interface-functions* adjoin #:g624 #:g625 list cddr #Y(swank-backend::length=2 nil nil (24 45 18 26 10 0 5 76 76 73 39 7 10 0 16 19 76 73 29) #69# #2# 29814) symbolp consp setf eq second #Y(nil nil nil (24 45 1 26 30 1 20 10 1 16 21 73 40 34 10 1 16 22 73 39 27 13 1 32 0 18 1 73 39 18 10 1 4 12 1 23 17 24 73 39 7 10 1 16 25 16 21 43 1 29) #69# #2# 29814) #:g626 si::putprop :swank-backend export)) #2# 29814) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #70=#A(t (19) (swank-backend::macroexpand-all swank-backend::form swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::macroexpand-all nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #70# #2# 30198) si::fset function "Recursively expand all macros in FORM.
Return the resulting form." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 30198) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 26 45 27 13 2 13 0 13 1 19 3 28 43 1 43 2 15 0 14 29 19 2 30 1 0 73 29) #71=#A(t (31) (swank-backend::compiler-macroexpand-1 swank-backend::form swank-backend::env swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::compiler-macroexpand-1 nil nil (24 45 1 25 40 2 77 46 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #71# #2# 30312) si::fset function "Call the compiler-macro for form.
If FORM is a function call for which a compiler-macro has been
defined, invoke the expander function using *macroexpand-hook* and
return the results and T.  Otherwise, return the original form and
NIL." si::set-documentation swank-backend::*interface-functions* adjoin #:g630 #:g631 consp swank-backend::valid-function-name-p compiler-macro-function swank-backend::fun *macroexpand-hook* swank-backend::result eq #Y(nil nil nil (24 45 1 25 40 2 77 46 2 26 10 1 16 19 39 17 10 1 4 12 19 1 20 39 8 10 1 4 12 19 1 21 45 22 10 0 39 30 14 23 13 0 13 2 13 1 20 3 23 45 24 13 0 13 0 10 3 17 25 76 12 72 2 43 1 38 6 13 2 77 72 2 43 1 29) #71# #2# 30312) #:g632 si::putprop :swank-backend export)) #2# 30312) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 25 45 26 13 2 13 0 13 1 19 3 27 43 1 43 2 15 0 14 28 19 2 29 1 0 73 29) #72=#A(t (30) (swank-backend::compiler-macroexpand swank-backend::form swank-backend::env swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::compiler-macroexpand nil nil (24 45 1 25 40 2 77 46 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #72# #2# 30911) si::fset function "Repetitively call `compiler-macroexpand-1'." si::set-documentation swank-backend::*interface-functions* adjoin #:g634 #:g635 swank-backend::expanded swank-backend::compiler-macroexpand-1 swank-backend::newly-expanded swank-backend::new-form t #Y(swank-backend::frob nil nil (24 45 1 24 45 19 26 13 1 13 3 19 2 20 47 1 21 45 22 10 1 39 11 13 0 14 23 32 4 18 2 38 7 13 0 13 2 72 2 43 2 29) #72# #2# 30911) #Y(nil nil nil (24 45 1 25 40 2 77 46 2 26 31 1 24 13 2 13 1 32 0 18 2 43 1 29) #72# #2# 30911) #:g636 si::putprop :swank-backend export)) #2# 30911) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #73=#A(t (25) (swank-backend::format-string-expand swank-backend::control-string swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::format-string-expand nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #73# #2# 31257) si::fset function "Expand the format string CONTROL-STRING." si::set-documentation swank-backend::*interface-functions* adjoin #:g638 #:g639 formatter macroexpand #Y(nil nil nil (24 45 1 26 15 18 10 0 6 2 12 19 1 19 29) #73# #2# 31257) #:g640 si::putprop :swank-backend export)) #2# 31257) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #74=#A(t (19) (swank-backend::describe-symbol-for-emacs symbol swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::describe-symbol-for-emacs nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #74# #2# 31405) si::fset function "Return a property list describing SYMBOL.

The property list has an entry for each interesting aspect of the
symbol. The recognised keys are:

  :VARIABLE :FUNCTION :SETF :SPECIAL-OPERATOR :MACRO :COMPILER-MACRO
  :TYPE :CLASS :ALIEN-TYPE :ALIEN-STRUCT :ALIEN-UNION :ALIEN-ENUM

The value of each property is the corresponding documentation string,
or NIL (or the obsolete :NOT-DOCUMENTED). It is legal to include keys
not listed here (but slime-print-apropos in Emacs must know about
them).

Properties should be included if and only if they are applicable to
the symbol. For example, only (and all) fbound symbols should include
the :FUNCTION property.

Example:
(describe-symbol-for-emacs 'vector)
  => (:CLASS :NOT-DOCUMENTED
      :TYPE :NOT-DOCUMENTED
      :FUNCTION \"Constructs a simple-vector from the given objects.\")" si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 31405) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #75=#A(t (20) (swank-backend::describe-definition swank-backend::name type swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::describe-definition nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #75# #2# 32316) si::fset function "Describe the definition NAME of TYPE.
TYPE can be any value returned by DESCRIBE-SYMBOL-FOR-EMACS.

Return a documentation string, or NIL if none is available." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 32316) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 1 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 4 45 16 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #76=#A(t (23) (swank-backend::install-debugger-globally function swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::install-debugger-globally nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #76# #2# 32534) si::fset "Install FUNCTION as the debugger for all threads/processes. This
usually involves setting *DEBUGGER-HOOK* and, if the implementation
permits, hooking into BREAK as well." si::set-documentation swank-backend::*interface-functions* adjoin #:g646 #:g647 *debugger-hook* #Y(nil nil nil (24 45 1 26 10 0 52 17 73 29) #76# #2# 32534) #:g648 si::putprop :swank-backend export)) #2# 32534) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #77=#A(t (19) (swank-backend::call-with-debugging-environment swank-backend::debugger-loop-fn swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::call-with-debugging-environment nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #77# #2# 32822) si::fset function "Call DEBUGGER-LOOP-FN in a suitable debugging environment.

This function is called recursively at each debug level to invoke the
debugger loop. The purpose is to setup any necessary environment for
other debugger callbacks that will be called within the debugger loop.

For example, this is a reasonable place to compute a backtrace, switch
to safe reader/printer settings, and so on." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 32822) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #78=#A(t (25) (swank-backend::call-with-debugger-hook swank-backend::hook swank-backend::fun swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::call-with-debugger-hook nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #78# #2# 33290) si::fset function "Call FUN and use HOOK as debugger hook. HOOK can be NIL.

HOOK should be called for both BREAK and INVOKE-DEBUGGER." si::set-documentation swank-backend::*interface-functions* adjoin #:g652 #:g653 *debugger-hook* #Y(nil nil nil (24 45 1 24 45 2 26 10 1 48 19 13 0 20 0 23 44 1 29) #78# #2# 33290) #:g654 si::putprop :swank-backend export)) #2# 33290) #Y(si::bytecodes nil nil (15 0 15 1 14 2 1 9 12 1 10 7 3 12 1 11 6 2 12 14 12 1 13 6 2 12 19 4 14 1 0 73 29) #79=#A(t (15) (swank-backend::sldb-condition (condition) :initfunction condition stream #80="Condition in debugger code~@[: ~A~]" swank-backend::original-condition format #Y(nil nil nil (24 45 3 24 45 4 26 13 0 15 5 13 1 19 1 6 12 19 3 7 29) #79# #2# 33519) #Y(nil nil nil (26 34 8 73 29) #79# #2# 33519) (:initform (lambda (condition stream) (format stream #80# (swank-backend::original-condition condition))) :name si::report-function) (:writers ((setf swank-backend::original-condition)) :readers (swank-backend::original-condition) :initargs (:original-condition) :name swank-backend::original-condition) :documentation "Wrapper for conditions that should not be debugged.

When a condition arises from the internals of the debugger, it is not
desirable to debug it -- we'd risk entering an endless loop trying to
debug the debugger! Instead, such conditions can be reported to the
user without (re)entering the debugger by wrapping them as
`sldb-condition's." clos::load-defclass)) #2# 33519) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #81=#A(t (20) (swank-backend::compute-backtrace swank-backend::start swank-backend::end swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::compute-backtrace nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #81# #2# 34196) si::fset function "Returns a backtrace of the condition currently being debugged,
that is an ordered list consisting of frames. ``Ordered list''
means that an integer I can be mapped back to the i-th frame of this
backtrace.

START and END are zero-based indices constraining the number of frames
returned. Frame zero is defined as the frame which invoked the
debugger. If END is nil, return the frames from START to the end of
the stack." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 34196) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #82=#A(t (20) (swank-backend::print-frame swank-backend::frame stream swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::print-frame nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #82# #2# 34824) si::fset function "Print frame to stream." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 34824) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #83=#A(t (23) (swank-backend::frame-restartable-p swank-backend::frame swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-restartable-p nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #83# #2# 34897) si::fset function "Is the frame FRAME restartable?.
Return T if `restart-frame' can safely be called on the frame." si::set-documentation swank-backend::*interface-functions* adjoin #:g660 #:g661 #Y(nil nil nil (24 45 1 26 75 73 29) #83# #2# 34897) #:g662 si::putprop :swank-backend export)) #2# 34897) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #84=#A(t (19) (swank-backend::frame-source-location swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-source-location nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #84# #2# 35080) si::fset function "Return the source location for the frame associated to FRAME-NUMBER." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 35080) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #85=#A(t (23) (swank-backend::frame-catch-tags swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-catch-tags nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #85# #2# 35209) si::fset function "Return a list of catch tags for being printed in a debugger stack
frame." si::set-documentation swank-backend::*interface-functions* adjoin #:g666 #:g667 #Y(nil nil nil (24 45 1 26 75 73 29) #85# #2# 35209) #:g668 si::putprop :swank-backend export)) #2# 35209) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #86=#A(t (19) (swank-backend::frame-locals swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-locals nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #86# #2# 35380) si::fset function "Return a list of ((&key NAME ID VALUE) ...) where each element of
the list represents a local variable in the stack frame associated to
FRAME-NUMBER.

NAME, a symbol; the name of the local variable.

ID, an integer; used as primary key for the local variable, unique
relatively to the frame under operation.

value, an object; the value of the local variable." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 35380) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #87=#A(t (20) (swank-backend::frame-var-value swank-backend::frame-number swank-backend::var-id swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-var-value nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #87# #2# 35800) si::fset function "Return the value of the local variable associated to VAR-ID
relatively to the frame associated to FRAME-NUMBER." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 35800) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #88=#A(t (19) (swank-backend::disassemble-frame swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::disassemble-frame nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #88# #2# 35974) si::fset function "Disassemble the code for the FRAME-NUMBER.
The output should be written to standard output.
FRAME-NUMBER is a non-negative integer." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 35974) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #89=#A(t (20) (swank-backend::eval-in-frame swank-backend::form swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::eval-in-frame nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #89# #2# 36164) si::fset function "Evaluate a Lisp form in the lexical context of a stack frame
in the debugger.

FRAME-NUMBER must be a positive integer with 0 indicating the
frame which invoked the debugger.

The return value is the result of evaulating FORM in the
appropriate context." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 36164) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #90=#A(t (23) (swank-backend::frame-package swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-package nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #90# #2# 36483) si::fset function "Return the package corresponding to the frame at FRAME-NUMBER.
Return nil if the backend can't figure it out." si::set-documentation swank-backend::*interface-functions* adjoin #:g678 #:g679 #Y(nil nil nil (24 45 1 26 75 73 29) #90# #2# 36483) #:g680 si::putprop :swank-backend export)) #2# 36483) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #91=#A(t (19) (swank-backend::frame-call swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::frame-call nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #91# #2# 36688) si::fset function "Return a string representing a call to the entry point of a frame." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 36688) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #92=#A(t (20) (swank-backend::return-from-frame swank-backend::frame-number swank-backend::form swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::return-from-frame nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #92# #2# 36804) si::fset function "Unwind the stack to the frame FRAME-NUMBER and return the value(s)
produced by evaluating FORM in the frame context to its caller.

Execute any clean-up code from unwind-protect forms above the frame
during unwinding.

Return a string describing the error if it's not possible to return
from the frame." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 36804) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #93=#A(t (19) (swank-backend::restart-frame swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::restart-frame nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #93# #2# 37175) si::fset function "Restart execution of the frame FRAME-NUMBER with the same arguments
as it was called originally." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 37175) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #94=#A(t (24) (swank-backend::format-sldb-condition condition swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::format-sldb-condition nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #94# #2# 37325) si::fset function "Format a condition for display in SLDB." si::set-documentation swank-backend::*interface-functions* adjoin #:g688 #:g689 princ-to-string #Y(nil nil nil (24 45 1 26 10 0 16 18 29) #94# #2# 37325) #:g690 si::putprop :swank-backend export)) #2# 37325) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #95=#A(t (23) (swank-backend::condition-extras condition swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::condition-extras nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #95# #2# 37453) si::fset function "Return a list of extra for the debugger.
The allowed elements are of the form:
  (:SHOW-FRAME-SOURCE frame-number)
  (:REFERENCES &rest refs)
" si::set-documentation swank-backend::*interface-functions* adjoin #:g692 #:g693 #Y(nil nil nil (24 45 1 26 75 73 29) #95# #2# 37453) #:g694 si::putprop :swank-backend export)) #2# 37453) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #96=#A(t (22) (swank-backend::gdb-initial-commands swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::gdb-initial-commands nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #96# #2# 37691) si::fset function "List of gdb commands supposed to be executed first for the
   ATTACH-GDB restart." si::set-documentation swank-backend::*interface-functions* adjoin #:g696 #:g697 #Y(nil nil nil (26 75 73 29) #96# #2# 37691) #:g698 si::putprop :swank-backend export)) #2# 37691) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #97=#A(t (19) (swank-backend::activate-stepping swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::activate-stepping nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #97# #2# 37828) si::fset function "Prepare the frame FRAME-NUMBER for stepping." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 37828) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #98=#A(t (19) (swank-backend::sldb-break-on-return swank-backend::frame-number swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::sldb-break-on-return nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #98# #2# 37929) si::fset function "Set a breakpoint in the frame FRAME-NUMBER." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 37929) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #99=#A(t (19) (swank-backend::sldb-break-at-start symbol swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::sldb-break-at-start nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #99# #2# 38032) si::fset function "Set a breakpoint on the beginning of the function for SYMBOL." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 38032) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #100=#A(t (23) (swank-backend::sldb-stepper-condition-p condition swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::sldb-stepper-condition-p nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #100# #2# 38146) si::fset function "Return true if SLDB was invoked due to a single-stepping condition,
false otherwise. " si::set-documentation swank-backend::*interface-functions* adjoin #:g706 #:g707 #Y(nil nil nil (24 45 1 26 75 73 29) #100# #2# 38146) #:g708 si::putprop :swank-backend export)) #2# 38146) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #101=#A(t (18) (swank-backend::sldb-step-into swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::sldb-step-into nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #101# #2# 38334) si::fset function "Step into the current single-stepper form." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 38334) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #102=#A(t (18) (swank-backend::sldb-step-next swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::sldb-step-next nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #102# #2# 38418) si::fset function "Step to the next form in the current function." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 38418) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #103=#A(t (18) (swank-backend::sldb-step-out swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::sldb-step-out nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #103# #2# 38506) si::fset function "Stop single-stepping temporarily, but resume it once the current function
returns." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 38506) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 4 9 0 77 15 8 19 15 9 15 10 1 14 12 19 2 15 1 0 73 29) #104=#A(t (16) (:location "LOCATION-" list t (swank-backend::buffer position swank-backend::hints) ((si::typed-structure-name :location) (swank-backend::buffer nil t nil 1 nil) (position nil t nil 2 nil) (swank-backend::hints nil t nil 3 nil)) swank-backend::copy-location ((swank-backend::make-location (swank-backend::buffer position &optional swank-backend::hints))) swank-backend::location-p si::define-structure swank-backend::make-location swank-backend::buffer position swank-backend::hints #Y(swank-backend::make-location nil nil (24 45 11 24 45 12 25 40 2 77 46 13 26 15 0 13 2 13 1 10 0 6 4 73 29) #104# #2# 38630) si::fset)) #2# 38630) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 2 9 0 77 15 8 19 15 9 15 10 1 13 12 19 2 14 1 0 73 29) #105=#A(t (15) (:error "ERROR-" list t (swank-backend::message) ((si::typed-structure-name :error) (swank-backend::message nil t nil 1 nil)) swank-backend::copy-error (swank-backend::make-error) swank-backend::error-p si::define-structure swank-backend::make-error (nil :message) #:message #Y(swank-backend::make-error nil nil (28 11 22 40 2 77 46 12 15 0 10 0 6 2 73 29) #105# #2# 39075) si::fset)) #2# 39075) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 2 9 0 77 15 8 19 15 9 15 10 1 13 12 19 2 14 1 0 73 29) #106=#A(t (15) (:file "FILE-" list t (swank-backend::name) ((si::typed-structure-name :file) (swank-backend::name nil t nil 1 nil)) swank-backend::copy-file (swank-backend::make-file) swank-backend::file-p si::define-structure swank-backend::make-file (nil :name) #:name #Y(swank-backend::make-file nil nil (28 11 22 40 2 77 46 12 15 0 10 0 6 2 73 29) #106# #2# 39142) si::fset)) #2# 39142) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 2 9 0 77 15 8 19 15 9 15 10 1 13 12 19 2 14 1 0 73 29) #107=#A(t (15) (:buffer "BUFFER-" list t (swank-backend::name) ((si::typed-structure-name :buffer) (swank-backend::name nil t nil 1 nil)) swank-backend::copy-buffer (swank-backend::make-buffer) swank-backend::buffer-p si::define-structure swank-backend::make-buffer (nil :name) #:name #Y(swank-backend::make-buffer nil nil (28 11 22 40 2 77 46 12 15 0 10 0 6 2 73 29) #107# #2# 39246) si::fset)) #2# 39246) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 2 9 0 77 15 8 19 15 9 15 10 1 13 12 19 2 14 1 0 73 29) #108=#A(t (15) (:etags-file "ETAGS-FILE-" list t (swank-backend::filename) ((si::typed-structure-name :etags-file) (swank-backend::filename nil t nil 1 nil)) swank-backend::copy-etags-file (swank-backend::make-etags-file) swank-backend::etags-file-p si::define-structure swank-backend::make-etags-file (nil :filename) #:filename #Y(swank-backend::make-etags-file nil nil (28 11 22 40 2 77 46 12 15 0 10 0 6 2 73 29) #108# #2# 39313) si::fset)) #2# 39313) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 2 9 0 77 15 8 19 15 9 15 10 1 13 12 19 2 14 1 0 73 29) #109=#A(t (15) (:position "POSITION-" list t (swank-backend::pos) ((si::typed-structure-name :position) (swank-backend::pos nil t nil 1 nil)) swank-backend::copy-position (swank-backend::make-position) swank-backend::position-p si::define-structure swank-backend::make-position (nil :pos) #:pos #Y(swank-backend::make-position nil nil (28 11 22 40 2 77 46 12 15 0 10 0 6 2 73 29) #109# #2# 39384) si::fset)) #2# 39384) #Y(si::bytecodes nil nil (15 0 15 1 15 2 15 3 15 4 15 5 15 6 77 77 77 15 7 9 3 9 0 77 15 8 19 15 9 15 10 1 14 12 19 2 15 1 0 73 29) #110=#A(t (16) (:tag "TAG-" list t (swank-backend::tag1 swank-backend::tag2) ((si::typed-structure-name :tag) (swank-backend::tag1 nil t nil 1 nil) (swank-backend::tag2 nil t nil 2 nil)) swank-backend::copy-tag (swank-backend::make-tag) swank-backend::tag-p si::define-structure swank-backend::make-tag (nil :tag2 :tag1) #:tag1 #:tag2 #Y(swank-backend::make-tag nil nil (28 11 22 40 2 77 46 12 22 40 2 77 46 13 15 0 13 1 10 0 6 3 73 29) #110# #2# 39487) si::fset)) #2# 39487) #Y(si::bytecodes nil nil (15 0 1 18 12 14 19 9 1 19 4 20 15 0 15 11 15 21 19 3 22 1 0 73 29) #111=#A(t (23) (swank-backend::converting-errors-to-error-location #:g716 #:g715 #:g717 swank-backend::body "CONVERTING-ERRORS+" gensym swank-backend::gblock block handler-bind error function lambda (swank-backend::e) if swank-backend::*debug-swank-backend* return-from (swank-backend::make-error-location swank-backend::e) #Y(swank-backend::converting-errors-to-error-location nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 45 4 15 5 19 1 6 45 7 15 8 13 0 15 9 15 10 15 11 15 12 15 13 15 14 15 15 77 15 16 13 0 1 17 6 3 6 4 6 3 6 2 6 2 6 1 12 10 1 7 3 6 3 73 43 1 29) #111# #2# 39557) t si::fset "Catches errors during BODY and converts them to an error location." si::set-documentation)) #2# 39557) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 1 0 73 29) #112=#A(t (17) (swank-backend::make-error-location swank-backend::datum swank-backend::args condition typep :error "Error: ~A" format symbolp "Error: ~A" make-condition apply (stringp swank-backend::datum) si::assert-failure stringp #Y(swank-backend::make-error-location nil nil (24 45 1 27 45 2 13 1 15 3 19 2 4 39 16 14 5 77 15 6 13 1 19 3 7 6 2 73 38 61 10 1 16 8 39 25 14 5 77 15 9 33 10 12 13 1 13 0 19 3 11 12 19 3 7 6 2 73 38 31 38 6 15 12 19 1 13 10 1 16 14 76 40 -11 14 5 33 7 12 77 13 1 13 0 19 4 11 6 2 73 29) #112# #2# 40073) si::fset)) #2# 40073) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #113=#A(t (19) (swank-backend::find-definitions swank-backend::name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::find-definitions nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #113# #2# 40451) si::fset function "Return a list ((DSPEC LOCATION) ...) for NAME's definitions.

NAME is a \"definition specifier\".

DSPEC is a \"definition specifier\" describing the
definition, e.g., FOO or (METHOD FOO (STRING NUMBER)) or
(DEFVAR FOO).

LOCATION is the source location for the definition." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 40451) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #114=#A(t (25) (swank-backend::find-source-location swank-backend::object swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::find-source-location nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #114# #2# 40782) si::fset function "Returns the source location of OBJECT, or NIL.

That is the source location of the underlying datastructure of
OBJECT. E.g. on a STANDARD-OBJECT, the source location of the
respective DEFCLASS definition is returned, on a STRUCTURE-CLASS the
respective DEFSTRUCT definition, and so on." si::set-documentation swank-backend::*interface-functions* adjoin #:g721 #:g722 "FIND-DEFINITIONS is not yet implemented on ~
                        this implementation." swank-backend::make-error-location #Y(nil nil nil (24 45 1 26 15 18 19 1 19 29) #114# #2# 40782) #:g723 si::putprop :swank-backend export)) #2# 40782) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #115=#A(t (23) (swank-backend::buffer-first-change swank-backend::filename swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::buffer-first-change nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #115# #2# 41447) si::fset function "Called for effect the first time FILENAME's buffer is modified.
CMUCL/SBCL use this to cache the unmodified file and use the
unmodified text to improve the precision of source locations." si::set-documentation swank-backend::*interface-functions* adjoin #:g725 #:g726 #Y(nil nil nil (24 45 1 26 75 73 29) #115# #2# 41447) #:g727 si::putprop :swank-backend export)) #2# 41447) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #116=#A(t (24) (swank-backend::who-calls swank-backend::function-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::who-calls nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #116# #2# 41728) si::fset function "Return the call sites of FUNCTION-NAME (a symbol).
The results is a list ((DSPEC LOCATION) ...)." si::set-documentation swank-backend::*interface-functions* adjoin #:g729 #:g730 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #116# #2# 41728) #:g731 si::putprop :swank-backend export)) #2# 41728) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #117=#A(t (24) (swank-backend::calls-who swank-backend::function-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::calls-who nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #117# #2# 41949) si::fset function "Return the call sites of FUNCTION-NAME (a symbol).
The results is a list ((DSPEC LOCATION) ...)." si::set-documentation swank-backend::*interface-functions* adjoin #:g733 #:g734 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #117# #2# 41949) #:g735 si::putprop :swank-backend export)) #2# 41949) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #118=#A(t (24) (swank-backend::who-references swank-backend::variable-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::who-references nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #118# #2# 42152) si::fset function "Return the locations where VARIABLE-NAME (a symbol) is referenced.
See WHO-CALLS for a description of the return value." si::set-documentation swank-backend::*interface-functions* adjoin #:g737 #:g738 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #118# #2# 42152) #:g739 si::putprop :swank-backend export)) #2# 42152) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #119=#A(t (24) (swank-backend::who-binds swank-backend::variable-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::who-binds nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #119# #2# 42383) si::fset function "Return the locations where VARIABLE-NAME (a symbol) is bound.
See WHO-CALLS for a description of the return value." si::set-documentation swank-backend::*interface-functions* adjoin #:g741 #:g742 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #119# #2# 42383) #:g743 si::putprop :swank-backend export)) #2# 42383) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #120=#A(t (24) (swank-backend::who-sets swank-backend::variable-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::who-sets nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #120# #2# 42604) si::fset function "Return the locations where VARIABLE-NAME (a symbol) is set.
See WHO-CALLS for a description of the return value." si::set-documentation swank-backend::*interface-functions* adjoin #:g745 #:g746 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #120# #2# 42604) #:g747 si::putprop :swank-backend export)) #2# 42604) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #121=#A(t (24) (swank-backend::who-macroexpands swank-backend::macro-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::who-macroexpands nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #121# #2# 42822) si::fset function "Return the locations where MACRO-NAME (a symbol) is expanded.
See WHO-CALLS for a description of the return value." si::set-documentation swank-backend::*interface-functions* adjoin #:g749 #:g750 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #121# #2# 42822) #:g751 si::putprop :swank-backend export)) #2# 42822) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #122=#A(t (24) (swank-backend::who-specializes class-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::who-specializes nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #122# #2# 43044) si::fset function "Return the locations where CLASS-NAME (a symbol) is specialized.
See WHO-CALLS for a description of the return value." si::set-documentation swank-backend::*interface-functions* adjoin #:g753 #:g754 :not-implemented #Y(nil nil nil (24 45 1 26 11 18 73 29) #122# #2# 43044) #:g755 si::putprop :swank-backend export)) #2# 43044) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #123=#A(t (19) (swank-backend::list-callers swank-backend::function-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::list-callers nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #123# #2# 43268) si::fset function "List the callers of FUNCTION-NAME.
This function is like WHO-CALLS except that it is expected to use
lower-level means. Whereas WHO-CALLS is usually implemented with
special compiler support, LIST-CALLERS is usually implemented by
groveling for constants in function objects throughout the heap.

The return value is as for WHO-CALLS." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 43268) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #124=#A(t (19) (swank-backend::list-callees swank-backend::function-name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::list-callees nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #124# #2# 43686) si::fset function "List the functions called by FUNCTION-NAME.
See LIST-CALLERS for a description of the return value." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 43686) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #125=#A(t (19) (swank-backend::profile swank-backend::fname swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::profile nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #125# #2# 43839) si::fset function "Marks symbol FNAME for profiling." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 43839) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #126=#A(t (18) (swank-backend::profiled-functions swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::profiled-functions nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #126# #2# 44002) si::fset function "Returns a list of profiled functions." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 44002) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #127=#A(t (19) (swank-backend::unprofile swank-backend::fname swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::unprofile nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #127# #2# 44085) si::fset function "Marks symbol FNAME as not profiled." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 44085) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #128=#A(t (25) (swank-backend::unprofile-all swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::unprofile-all nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #128# #2# 44162) si::fset function "Marks all currently profiled functions as not profiled." si::set-documentation swank-backend::*interface-functions* adjoin #:g767 #:g768 swank-backend::profiled-functions si::%dolist-var swank-backend::unprofile #Y(nil nil nil (26 19 0 17 45 18 75 45 4 38 16 10 1 4 51 0 13 0 19 1 19 10 1 5 51 1 10 1 40 -18 75 73 43 2 29) #128# #2# 44162) #:g769 si::putprop :swank-backend export)) #2# 44162) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #129=#A(t (18) (swank-backend::profile-report swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::profile-report nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #129# #2# 44314) si::fset function "Prints profile report." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 44314) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 15 0 14 15 19 2 14 52 15 15 0 14 16 19 2 17 1 0 73 29) #130=#A(t (18) (swank-backend::profile-reset swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::profile-reset nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #130# #2# 44378) si::fset function "Resets profile counters." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 44378) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 15 0 14 16 19 2 17 52 16 15 0 14 18 19 2 17 52 18 15 0 14 19 19 2 20 1 0 73 29) #131=#A(t (21) (swank-backend::profile-package package swank-backend::callers-p swank-backend::methods swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::profile-package nil nil (24 45 1 24 45 2 24 45 3 26 15 0 15 4 19 2 5 40 8 15 0 15 6 19 2 5 45 7 10 0 39 15 13 0 13 3 13 2 13 1 77 19 5 8 38 8 15 9 15 0 19 2 10 43 1 29) #131# #2# 44443) si::fset function "Wrap profiling code around all functions in PACKAGE.  If a function
is already profiled, then unprofile and reprofile (useful to notice
function redefinition.)

If CALLERS-P is T names have counts of the most common calling
functions recorded.

When called with arguments :METHODS T, profile all methods of all
generic functions having names in the given package.  Generic functions
themselves, that is, their dispatch functions, are left alone." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 44443) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 15 0 14 16 19 2 15 52 16 15 0 14 17 19 2 18 1 0 73 29) #132=#A(t (19) (swank-backend::toggle-trace swank-backend::spec swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::toggle-trace nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #132# #2# 44965) si::fset function "Toggle tracing of the function(s) given with SPEC.
SPEC can be:
 (setf NAME)                            ; a setf function
 (:defmethod NAME QUALIFIER... (SPECIALIZER...)) ; a specific method
 (:defgeneric NAME)                     ; a generic function with all methods
 (:call CALLER CALLEE)                  ; trace calls from CALLER to CALLEE.
 (:labels TOPLEVEL LOCAL) 
 (:flet TOPLEVEL LOCAL) " si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 44965) #Y(si::bytecodes nil nil (15 0 14 1 14 2 14 3 15 4 15 5 15 6 19 7 7 29) #A(t (8) (swank-backend::emacs-inspect :delete-methods t :lambda-list (swank-backend::object) :documentation "Explain to Emacs how to inspect OBJECT.

Returns a list specifying how to render the object for inspection.

Every element of the list must be either a string, which will be
inserted into the buffer as is, or a list of the form:

 (:value object &optional format) - Render an inspectable
 object. If format is provided it must be a string and will be
 rendered in place of the value, otherwise use princ-to-string.

 (:newline) - Render a \\n

 (:action label lambda &key (refresh t)) - Render LABEL (a text
 string) which when clicked will call LAMBDA. If REFRESH is
 non-NIL the currently inspected object will be re-inspected
 after calling the lambda.
" ensure-generic-function)) #2# 45430) #Y(si::bytecodes nil nil (15 0 77 15 1 15 2 1 15 12 14 16 14 17 15 18 19 8 19 29) #133=#A(t (20) (swank-backend::emacs-inspect (t) (swank-backend::object) swank-backend::object "Type: " :value type-of (:newline) "Don't know how to inspect the object, dumping output of CL:DESCRIBE:" (:newline) (:newline) make-string-output-stream swank-backend::desc describe get-output-stream-string #Y(nil nil nil (24 45 3 26 15 4 14 5 10 0 16 6 6 2 12 15 7 15 8 15 9 15 10 19 0 11 45 12 13 1 13 0 19 2 13 10 0 16 14 43 1 6 7 73 29) #133# #2# 46190) t :documentation "Generic method for inspecting any kind of object.

Since we don't know how to deal with OBJECT we simply dump the
output of CL:DESCRIBE." clos::install-method)) #2# 46190) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #134=#A(t (23) (swank-backend::eval-context swank-backend::object swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::eval-context nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #134# #2# 46597) si::fset function "Return a list of bindings corresponding to OBJECT's slots." si::set-documentation swank-backend::*interface-functions* adjoin #:g779 #:g780 #Y(nil nil nil (24 45 1 26 75 73 29) #134# #2# 46597) #:g781 si::putprop :swank-backend export)) #2# 46597) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 1 0 73 29) #135=#A(t (15) (swank-backend::label-value-line swank-backend::label swank-backend::value (nil :newline) t swank-backend::newline princ-to-string ": " :value ((:newline)) #Y(swank-backend::label-value-line nil nil (24 45 1 24 45 2 28 3 22 40 3 14 4 46 5 10 2 16 6 12 15 7 14 8 10 1 6 2 12 10 0 39 5 1 9 38 2 75 7 4 73 29) #135# #2# 46737) si::fset function "Create a control list which prints \"LABEL: VALUE\" in the inspector.
If NEWLINE is non-NIL a `(:newline)' is added to the result." si::set-documentation)) #2# 46737) #Y(si::bytecodes nil nil (15 0 1 15 12 14 16 9 1 19 4 17 1 0 73 29) #136=#A(t (18) (swank-backend::label-value-line* #:g783 #:g782 #:g784 swank-backend::label-values append #:loop-list794 swank-backend::value swank-backend::label #:loop-list-head795 #:loop-list-tail796 0 #:loop-desetq-temp swank-backend::label-value-line rplacd #Y(swank-backend::label-value-line* nil nil (24 45 1 24 45 2 26 10 1 5 45 3 10 0 45 4 15 5 58 60 92 77 77 13 1 46 6 46 7 46 8 75 6 1 45 9 10 0 45 10 57 11 61 2 2 55 10 5 2 39 4 35 0 1 10 5 4 45 12 10 0 4 51 4 10 0 5 51 0 10 0 4 51 5 43 1 10 5 5 51 5 13 1 15 13 13 3 10 4 6 3 6 1 51 1 17 14 35 0 0 10 2 5 73 36 6 62 43 2 43 3 63 7 2 73 29) #136# #2# 47077) t si::fset)) #2# 47077) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #137=#A(t (24) (swank-backend::describe-primitive-type swank-backend::object swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::describe-primitive-type nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #137# #2# 47250) si::fset function "Return a string describing the primitive type of object." si::set-documentation swank-backend::*interface-functions* adjoin #:g798 #:g799 "N/A" #Y(nil nil nil (24 45 1 26 1 18 73 29) #137# #2# 47250) #:g800 si::putprop :swank-backend export)) #2# 47250) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #138=#A(t (23) (swank-backend::initialize-multiprocessing swank-backend::continuation swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::initialize-multiprocessing nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #138# #2# 47401) si::fset function "Initialize multiprocessing, if necessary and then invoke CONTINUATION.

Depending on the impleimentaion, this function may never return." si::set-documentation swank-backend::*interface-functions* adjoin #:g802 #:g803 #Y(nil nil nil (24 45 1 26 13 0 20 0 23 29) #138# #2# 47401) #:g804 si::putprop :swank-backend export)) #2# 47401) #Y(si::bytecodes nil nil (15 0 1 12 12 19 2 13 15 0 15 14 15 15 19 3 16 15 0 14 17 19 2 18 52 17 15 0 14 19 19 2 18 52 19 15 0 14 20 19 2 21 1 0 73 29) #139=#A(t (22) (swank-backend::spawn swank-backend::fn (nil :name) swank-backend::name swank-backend::implementation get swank-backend::default swank-backend::f :name apply #4# error #Y(swank-backend::spawn nil nil (24 45 1 28 2 22 40 2 77 46 3 15 0 15 4 19 2 5 40 8 15 0 15 6 19 2 5 45 7 10 0 39 15 13 0 13 2 14 8 13 1 77 19 5 9 38 8 15 10 15 0 19 2 11 43 1 29) #139# #2# 47758) si::fset function "Create a new thread to call FN." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 47758) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #140=#A(t (23) (swank-backend::thread-id swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::thread-id nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #140# #2# 47834) si::fset function "Return an Emacs-parsable object to identify THREAD.

Ids should be comparable with equal, i.e.:
 (equal (thread-id <t1>) (thread-id <t2>)) <==> (eq <t1> <t2>)" si::set-documentation swank-backend::*interface-functions* adjoin #:g808 #:g809 #Y(nil nil nil (24 45 1 26 10 0 73 29) #140# #2# 47834) #:g810 si::putprop :swank-backend export)) #2# 47834) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #141=#A(t (24) (swank-backend::find-thread swank-backend::id swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::find-thread nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #141# #2# 48048) si::fset function "Return the thread for ID.
ID should be an id previously obtained with THREAD-ID.
Can return nil if the thread no longer exists." si::set-documentation swank-backend::*interface-functions* adjoin #:g812 #:g813 swank-backend::current-thread #Y(nil nil nil (24 45 1 26 19 0 18 29) #141# #2# 48048) #:g814 si::putprop :swank-backend export)) #2# 48048) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #142=#A(t (24) (swank-backend::thread-name swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::thread-name nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #142# #2# 48263) si::fset function "Return the name of THREAD.
Thread names are short strings meaningful to the user. They do not
have to be unique." si::set-documentation swank-backend::*interface-functions* adjoin #:g816 #:g817 "The One True Thread" #Y(nil nil nil (24 45 1 26 1 18 73 29) #142# #2# 48263) #:g818 si::putprop :swank-backend export)) #2# 48263) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #143=#A(t (24) (swank-backend::thread-status swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::thread-status nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #143# #2# 48479) si::fset function "Return a string describing THREAD's state." si::set-documentation swank-backend::*interface-functions* adjoin #:g820 #:g821 "" #Y(nil nil nil (24 45 1 26 1 18 73 29) #143# #2# 48479) #:g822 si::putprop :swank-backend export)) #2# 48479) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #144=#A(t (23) (swank-backend::thread-attributes swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::thread-attributes nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #144# #2# 48606) si::fset function "Return a plist of implementation-dependent attributes for THREAD" si::set-documentation swank-backend::*interface-functions* adjoin #:g824 #:g825 #Y(nil nil nil (24 45 1 26 75 73 29) #144# #2# 48606) #:g826 si::putprop :swank-backend export)) #2# 48606) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #145=#A(t (22) (swank-backend::current-thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::current-thread nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #145# #2# 48757) si::fset function "Return the currently executing thread." si::set-documentation swank-backend::*interface-functions* adjoin #:g828 #:g829 #Y(nil nil nil (26 8 0 73 29) #145# #2# 48757) #:g830 si::putprop :swank-backend export)) #2# 48757) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 15 0 14 13 19 2 14 52 13 1 0 45 15 1 3 45 16 34 17 45 18 13 2 13 0 13 1 19 3 19 43 1 43 2 15 0 14 20 19 2 21 1 0 73 29) #146=#A(t (22) (swank-backend::all-threads swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::all-threads nil nil (26 15 0 15 1 19 2 2 40 8 15 0 15 3 19 2 2 45 4 10 0 39 9 13 0 77 19 2 5 38 8 15 6 15 0 19 2 7 43 1 29) #146# #2# 48842) si::fset function "Return a fresh list of all threads." si::set-documentation swank-backend::*interface-functions* adjoin #:g832 #:g833 #Y(nil nil nil (26 75 73 29) #146# #2# 48842) #:g834 si::putprop :swank-backend export)) #2# 48842) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 20 45 21 13 2 13 0 13 1 19 3 22 43 1 43 2 15 0 14 23 19 2 24 1 0 73 29) #147=#A(t (25) (swank-backend::thread-alive-p swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::thread-alive-p nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #147# #2# 48923) si::fset function "Test if THREAD is termintated." si::set-documentation swank-backend::*interface-functions* adjoin #:g836 #:g837 swank-backend::all-threads member #Y(nil nil nil (24 45 1 26 13 0 19 0 18 12 19 2 19 29) #147# #2# 48923) #:g838 si::putprop :swank-backend export)) #2# 48923) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #148=#A(t (20) (swank-backend::interrupt-thread swank-backend::thread swank-backend::fn swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::interrupt-thread nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #148# #2# 49034) si::fset function "Cause THREAD to execute FN." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 49034) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #149=#A(t (23) (swank-backend::kill-thread swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::kill-thread nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #149# #2# 49114) si::fset function "Terminate THREAD immediately.
Don't execute unwind-protected sections, don't raise conditions.
(Do not pass go, do not collect $200.)" si::set-documentation swank-backend::*interface-functions* adjoin #:g842 #:g843 #Y(nil nil nil (24 45 1 26 75 73 29) #149# #2# 49114) #:g844 si::putprop :swank-backend export)) #2# 49114) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #150=#A(t (24) (swank-backend::send swank-backend::thread swank-backend::object swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::send nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #150# #2# 49330) si::fset function "Send OBJECT to thread THREAD." si::set-documentation swank-backend::*interface-functions* adjoin #:g846 #:g847 #Y(nil nil nil (24 45 1 24 45 2 26 10 0 73 29) #150# #2# 49330) #:g848 si::putprop :swank-backend export)) #2# 49330) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 21 45 22 13 2 13 0 13 1 19 3 23 43 1 43 2 15 0 14 24 19 2 25 1 0 73 29) #151=#A(t (26) (swank-backend::receive swank-backend::timeout swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::receive nil nil (25 40 2 77 46 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #151# #2# 49443) si::fset function "Return the next message from current thread's mailbox." si::set-documentation swank-backend::*interface-functions* adjoin #:g850 #:g851 t constantly swank-backend::receive-if #Y(nil nil nil (25 40 2 77 46 1 26 11 18 16 19 12 13 0 19 2 20 29) #151# #2# 49443) #:g852 si::putprop :swank-backend export)) #2# 49443) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #152=#A(t (20) (swank-backend::receive-if swank-backend::predicate swank-backend::timeout swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::receive-if nil nil (24 45 1 25 40 2 77 46 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #152# #2# 49588) si::fset function "Return the first message satisfiying PREDICATE." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 49588) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #153=#A(t (24) (swank-backend::register-thread swank-backend::name swank-backend::thread swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::register-thread nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #153# #2# 49700) si::fset function "Associate the thread THREAD with the symbol NAME.
The thread can then be retrieved with `find-registered'.
If THREAD is nil delete the association." si::set-documentation swank-backend::*interface-functions* adjoin #:g856 #:g857 #Y(nil nil nil (24 45 1 24 45 2 26 75 73 29) #153# #2# 49700) #:g858 si::putprop :swank-backend export)) #2# 49700) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #154=#A(t (23) (swank-backend::find-registered swank-backend::name swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::find-registered nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #154# #2# 49944) si::fset function "Find the thread that was registered for the symbol NAME.
Return nil if the no thread was registred or if the tread is dead." si::set-documentation swank-backend::*interface-functions* adjoin #:g860 #:g861 #Y(nil nil nil (24 45 1 26 75 73 29) #154# #2# 49944) #:g862 si::putprop :swank-backend export)) #2# 49944) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 21 45 22 13 2 13 0 13 1 19 3 23 43 1 43 2 15 0 14 24 19 2 25 1 0 73 29) #155=#A(t (26) (swank-backend::set-default-initial-binding swank-backend::var swank-backend::form swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::set-default-initial-binding nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #155# #2# 50149) si::fset function "Initialize special variable VAR by default with FORM.

Some implementations initialize certain variables in each newly
created thread.  This function sets the form which is used to produce
the initial value." si::set-documentation swank-backend::*interface-functions* adjoin #:g864 #:g865 eval set #Y(nil nil nil (24 45 1 24 45 2 26 13 1 10 0 16 19 17 20 29) #155# #2# 50149) #:g866 si::putprop :swank-backend export)) #2# 50149) #Y(si::bytecodes nil nil (1 0 16 1 1 0 73 29) #A(t (2) (swank-backend::*pending-slime-interrupts* si::*make-special)) #2# 50448) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #156=#A(t (10) (swank-backend::check-slime-interrupts swank-backend::*pending-slime-interrupts* boundp #:g868 t #Y(swank-backend::check-slime-interrupts nil nil (26 1 1 16 2 39 3 11 1 73 39 26 11 1 45 3 10 0 4 12 10 0 5 51 0 10 0 52 1 43 1 20 0 23 11 4 73 29) #156# #2# 50587) si::fset function "Execute pending interrupts if any.
This should be called periodically in operations which
can take a long time to complete.
Return a boolean indicating whether any interrupts was processed." si::set-documentation)) #2# 50587) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 4 75 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank-backend::*interrupt-queued-handler* si::*make-special boundp variable "Function to call on queued interrupts.
Interrupts get queued when an interrupt occurs while interrupt
handling is disabled.

Backends can use this function to abort slow operations." si::set-documentation)) #2# 50971) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #157=#A(t (20) (swank-backend::wait-for-input swank-backend::streams swank-backend::timeout swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::wait-for-input nil nil (24 45 1 25 40 2 77 46 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #157# #2# 51205) si::fset function "Wait for input on a list of streams.  Return those that are ready.
STREAMS is a list of streams
TIMEOUT nil, t, or real number. If TIMEOUT is t, return those streams
which are ready (or have reached end-of-file) without waiting.
If TIMEOUT is a number and no streams is ready after TIMEOUT seconds,
return nil.

Return :interrupt if an interrupt occurs while waiting." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 51205) #Y(si::bytecodes nil nil (15 0 1 11 12 19 2 12 15 0 15 13 15 14 19 3 15 15 0 14 16 19 2 17 52 16 1 0 45 18 1 5 45 19 34 22 45 23 13 2 13 0 13 1 19 3 24 43 1 43 2 15 0 14 25 19 2 26 1 0 73 29) #158=#A(t (27) (swank-backend::make-lock (nil :name) swank-backend::name swank-backend::implementation get swank-backend::default swank-backend::f :name apply #4# error #Y(swank-backend::make-lock nil nil (28 1 22 40 2 77 46 2 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 14 7 13 1 77 19 4 8 38 8 15 9 15 0 19 2 10 43 1 29) #158# #2# 51646) si::fset function "Make a lock for thread synchronization.
Only one thread may hold the lock (via CALL-WITH-LOCK-HELD) at a time
but that thread may hold it more than once." si::set-documentation swank-backend::*interface-functions* adjoin #:g872 #:g873 (nil :name) :null-lock #Y(nil nil nil (28 20 22 40 2 77 46 2 11 21 73 29) #158# #2# 51646) #:g874 si::putprop :swank-backend export)) #2# 51646) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 2 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 5 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #159=#A(t (23) (swank-backend::call-with-lock-held swank-backend::lock function swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::call-with-lock-held nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #159# #2# 52002) si::fset "Call FUNCTION with LOCK held, queueing if necessary." si::set-documentation swank-backend::*interface-functions* adjoin #:g876 #:g877 #Y(nil nil nil (24 45 1 24 45 2 26 13 0 20 0 23 29) #159# #2# 52002) #:g878 si::putprop :swank-backend export)) #2# 52002) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #160=#A(t (24) (swank-backend::make-weak-key-hash-table swank-backend::args swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::make-weak-key-hash-table nil nil (27 45 1 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 10 13 0 13 1 19 2 6 38 8 15 7 15 0 19 2 8 43 1 29) #160# #2# 52204) si::fset function "Like MAKE-HASH-TABLE, but weak w.r.t. the keys." si::set-documentation swank-backend::*interface-functions* adjoin #:g880 #:g881 make-hash-table #Y(nil nil nil (27 45 1 33 18 12 13 0 19 2 6 29) #160# #2# 52204) #:g882 si::putprop :swank-backend export)) #2# 52204) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 19 45 20 13 2 13 0 13 1 19 3 21 43 1 43 2 15 0 14 22 19 2 23 1 0 73 29) #161=#A(t (24) (swank-backend::make-weak-value-hash-table swank-backend::args swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::make-weak-value-hash-table nil nil (27 45 1 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 10 13 0 13 1 19 2 6 38 8 15 7 15 0 19 2 8 43 1 29) #161# #2# 52378) si::fset function "Like MAKE-HASH-TABLE, but weak w.r.t. the values." si::set-documentation swank-backend::*interface-functions* adjoin #:g884 #:g885 make-hash-table #Y(nil nil nil (27 45 1 33 18 12 13 0 19 2 6 29) #161# #2# 52378) #:g886 si::putprop :swank-backend export)) #2# 52378) #Y(si::bytecodes nil nil (15 0 1 9 12 19 2 10 15 0 15 11 15 12 19 3 13 15 0 14 14 19 2 15 52 14 1 0 45 16 1 4 45 17 34 18 45 19 13 2 13 0 13 1 19 3 20 43 1 43 2 15 0 14 21 19 2 22 1 0 73 29) #162=#A(t (23) (swank-backend::hash-table-weakness swank-backend::hashtable swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::hash-table-weakness nil nil (24 45 1 26 15 0 15 2 19 2 3 40 8 15 0 15 4 19 2 3 45 5 10 0 39 11 13 0 13 1 77 19 3 6 38 8 15 7 15 0 19 2 8 43 1 29) #162# #2# 52525) si::fset function "Return nil or one of :key :value :key-or-value :key-and-value" si::set-documentation swank-backend::*interface-functions* adjoin #:g888 #:g889 #Y(nil nil nil (24 45 1 26 75 73 29) #162# #2# 52525) #:g890 si::putprop :swank-backend export)) #2# 52525) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 1 0 45 17 1 5 45 18 34 26 45 27 13 2 13 0 13 1 19 3 28 43 1 43 2 15 0 14 29 19 2 30 1 0 73 29) #163=#A(t (31) (swank-backend::character-completion-set swank-backend::prefix swank-backend::matchp swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::character-completion-set nil nil (24 45 1 24 45 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #163# #2# 52681) si::fset function "Return a list of names of characters that match PREFIX." si::set-documentation swank-backend::*interface-functions* adjoin #:g892 #:g893 ("Newline" "Space" "Tab" "Page" "Rubout" "Linefeed" "Return" "Backspace") #:loop-list895 swank-backend::name #:loop-list-head896 #:loop-list-tail897 0 rplacd #Y(nil nil nil (24 45 1 24 45 2 26 58 60 78 77 15 19 46 20 46 21 75 6 1 45 22 10 0 45 23 57 24 61 2 2 43 10 4 4 51 3 10 4 5 51 4 13 6 13 7 13 3 20 2 23 39 11 13 1 10 3 6 1 51 1 17 25 10 4 2 39 4 35 0 1 35 0 0 10 2 5 73 36 5 62 73 43 2 43 2 63 29) #163# #2# 52681) #:g894 si::putprop :swank-backend export)) #2# 52681) #Y(si::bytecodes nil nil (1 0 16 1 1 2 52 0 1 0 73 29) #A(t (3) (swank-backend::*type-specifier-arglists* si::*make-special ((and &rest swank-backend::type-specifiers) (array &optional swank-backend::element-type swank-backend::dimension-spec) (base-string &optional swank-backend::size) (bit-vector &optional swank-backend::size) (complex &optional swank-backend::type-specifier) (cons &optional swank-backend::car-typespec swank-backend::cdr-typespec) (double-float &optional swank-backend::lower-limit swank-backend::upper-limit) (eql swank-backend::object) (float &optional swank-backend::lower-limit swank-backend::upper-limit) (function &optional swank-backend::arg-typespec swank-backend::value-typespec) (integer &optional swank-backend::lower-limit swank-backend::upper-limit) (long-float &optional swank-backend::lower-limit swank-backend::upper-limit) (member &rest swank-backend::eql-objects) (mod swank-backend::n) (not swank-backend::type-specifier) (or &rest swank-backend::type-specifiers) (rational &optional swank-backend::lower-limit swank-backend::upper-limit) (real &optional swank-backend::lower-limit swank-backend::upper-limit) (satisfies swank-backend::predicate-symbol) (short-float &optional swank-backend::lower-limit swank-backend::upper-limit) (signed-byte &optional swank-backend::size) (simple-array &optional swank-backend::element-type swank-backend::dimension-spec) (simple-base-string &optional swank-backend::size) (simple-bit-vector &optional swank-backend::size) (simple-string &optional swank-backend::size) (single-float &optional swank-backend::lower-limit swank-backend::upper-limit) (simple-vector &optional swank-backend::size) (string &optional swank-backend::size) (unsigned-byte &optional swank-backend::size) (values &rest swank-backend::typespecs) (vector &optional swank-backend::element-type swank-backend::size)))) #2# 53063) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 15 0 15 12 15 13 19 3 14 15 0 14 15 19 2 16 52 15 15 0 14 17 19 2 16 52 17 15 0 14 18 19 2 19 1 0 73 29) #164=#A(t (20) (swank-backend::save-image swank-backend::filename swank-backend::restart-function swank-backend::implementation get swank-backend::default swank-backend::f apply #4# error #Y(swank-backend::save-image nil nil (24 45 1 25 40 2 77 46 2 26 15 0 15 3 19 2 4 40 8 15 0 15 5 19 2 4 45 6 10 0 39 13 13 0 13 2 13 1 77 19 4 7 38 8 15 8 15 0 19 2 9 43 1 29) #164# #2# 54775) si::fset function "Save a heap image to the file FILENAME.
RESTART-FUNCTION, if non-nil, should be called when the image is loaded." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 54775) #Y(si::bytecodes nil nil (15 0 1 14 12 19 2 15 15 0 15 16 15 17 19 3 18 15 0 14 19 19 2 20 52 19 15 0 14 21 19 2 20 52 21 15 0 14 22 19 2 23 1 0 73 29) #165=#A(t (24) (swank-backend::background-save-image swank-backend::filename (nil :completion-function :restart-function) swank-backend::restart-function swank-backend::completion-function swank-backend::implementation get swank-backend::default swank-backend::f :restart-function :completion-function apply #4# error #Y(swank-backend::background-save-image nil nil (24 45 1 28 2 22 40 2 77 46 3 22 40 2 77 46 4 15 0 15 5 19 2 6 40 8 15 0 15 7 19 2 6 45 8 10 0 39 19 13 0 13 3 14 9 13 2 14 10 13 1 77 19 7 11 38 8 15 12 15 0 19 2 13 43 1 29) #165# #2# 54979) si::fset function "Request saving a heap image to the file FILENAME.
RESTART-FUNCTION, if non-nil, should be called when the image is loaded.
COMPLETION-FUNCTION, if non-nil, should be called after saving the image." si::set-documentation swank-backend::*interface-functions* adjoin swank-backend::*unimplemented-interfaces* :swank-backend export)) #2# 54979) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 1 0 73 29) #166=#A(t (7) (swank-backend::deinit-log-output "*LOG-OUTPUT*" swank-backend::swank find-symbol set #Y(swank-backend::deinit-log-output nil nil (26 15 1 15 2 19 2 3 12 75 17 4 29) #166# #2# 55323) si::fset)) #2# 55323))
