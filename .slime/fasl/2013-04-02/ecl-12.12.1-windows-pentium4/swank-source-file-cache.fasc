(#Y(si::bytecodes nil nil (1 0 16 1 29) #A(t (2) ("SWANK-BACKEND" si::select-package)) #1=#P"c:/zznix/home/zhoujd/zzemacs/site-lisp/slime/swank-source-file-cache.lisp" 0) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 11 3 52 0 15 0 15 4 15 5 19 3 6 1 0 73 29) #A(t (7) (swank-backend::*cache-sourcecode* si::*make-special boundp t variable "When true complete source files are cached.
The cache is used to keep known good copies of the source text which
correspond to the loaded code. Finding definitions is much more
reliable when the exact source is available, so we cache it in case it
gets edited on disk later." si::set-documentation)) #1# 1074) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 10 14 3 15 4 19 2 5 52 0 15 0 15 6 15 7 19 3 8 1 0 73 29) #A(t (9) (swank-backend::*source-file-cache* si::*make-special boundp :test equal make-hash-table variable "Cache of source file contents.
Maps from truename to source-cache-entry structure." si::set-documentation)) #1# 1391) #Y(si::bytecodes nil nil (15 0 15 1 77 77 15 2 15 3 15 4 77 77 77 15 5 9 2 77 77 15 6 19 15 7 15 0 19 1 15 78 11 15 8 1 13 12 19 2 14 1 0 73 29) #2=#A(t (16) (swank-backend::source-cache-entry swank-backend::source-cache-entry. (swank-backend::text swank-backend::date) ((swank-backend::text nil t nil 0 nil) (swank-backend::date nil t nil 1 nil)) swank-backend::copy-source-cache-entry ((swank-backend::make-source-cache-entry (swank-backend::text swank-backend::date))) swank-backend::source-cache-entry-p si::define-structure swank-backend::make-source-cache-entry swank-backend::text swank-backend::date 0 si::make-structure #Y(swank-backend::make-source-cache-entry nil nil (24 45 9 24 45 10 26 15 11 13 1 13 0 19 3 12 29) #2# #1# 1543) si::fset find-class)) #1# 1543) #Y(si::bytecodes nil nil (1 0 45 1 1 2 45 3 30 1 16 32 0 43 1 45 17 13 2 13 0 13 1 19 3 18 43 1 43 2 15 0 14 19 19 2 20 39 12 15 0 14 21 19 2 22 52 21 38 8 15 23 15 0 19 2 24 1 0 73 29) #3=#A(t (25) (swank-backend::buffer-first-change #:g966 swank-backend::implementation #:g967 swank-backend::filename swank-backend::source-cached-p #:g972 #:g973 0 error si::temp #Y(nil nil nil (24 45 10 26 10 0 51 2 35 1 0 29) #3# #1# 1704) si::*handler-clusters* file-write-date swank-backend::source-cache-get condition #Y(swank-backend::buffer-first-change nil nil (24 45 4 26 13 0 19 1 5 76 39 57 57 6 60 53 75 45 7 57 8 61 1 28 15 9 34 11 3 6 1 12 11 12 3 48 12 13 3 10 3 16 13 12 19 2 14 36 2 44 1 10 1 45 15 77 13 0 72 2 43 1 36 2 62 43 1 63 75 73 29) #3# #1# 1704) #:g968 si::putprop swank-backend::*interface-functions* member swank-backend::*unimplemented-interfaces* remove "DEFIMPLEMENTATION of undefined interface (~S)" warn)) #1# 1704) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #4=#A(t (10) (swank-backend::get-source-code swank-backend::filename swank-backend::code-date swank-backend::source-cache-get swank-backend::read-file #Y(swank-backend::get-source-code nil nil (24 45 1 24 45 2 26 13 1 13 0 19 2 3 73 40 6 13 1 19 1 4 29) #4# #1# 2027) si::fset function "Return the source code for FILENAME as written on DATE in a string.
If the exact version cannot be found then return the current one from disk." si::set-documentation)) #1# 2027) #Y(si::bytecodes nil nil (15 0 1 15 12 19 2 16 15 0 15 17 15 18 19 3 19 1 0 73 29) #5=#A(t (20) (swank-backend::source-cache-get swank-backend::filename swank-backend::date swank-backend::*cache-sourcecode* swank-backend::*source-file-cache* gethash swank-backend::entry swank-backend::source-cache-entry.date equal swank-backend::source-cache-entry.text file-write-date swank-backend::read-file swank-backend::source swank-backend::make-source-cache-entry si::hash-set #Y(swank-backend::source-cache-get nil nil (24 45 1 24 45 2 26 11 3 73 39 94 13 1 14 4 19 2 5 45 6 10 0 39 10 13 1 13 0 19 1 7 17 8 39 8 13 0 19 1 9 38 61 10 0 76 40 11 13 1 13 0 19 1 7 17 8 76 73 39 43 10 2 16 10 12 10 1 17 8 39 30 13 2 19 1 11 45 12 13 3 14 4 13 0 13 2 19 2 13 12 19 3 14 10 0 73 43 1 38 3 75 73 43 1 29) #5# #1# 2299) si::fset function "Return the source code for FILENAME as written on DATE in a string.
Return NIL if the right version cannot be found." si::set-documentation)) #1# 2299) #Y(si::bytecodes nil nil (15 0 1 5 12 19 2 6 15 0 15 7 15 8 19 3 9 1 0 73 29) #6=#A(t (10) (swank-backend::source-cached-p swank-backend::filename swank-backend::*source-file-cache* gethash t #Y(swank-backend::source-cached-p nil nil (24 45 1 26 13 0 14 2 19 2 3 73 39 4 11 4 73 29) #6# #1# 3186) si::fset function "Is any version of FILENAME in the source cache?" si::set-documentation)) #1# 3186) #Y(si::bytecodes nil nil (15 0 1 20 12 19 2 21 15 0 15 22 15 23 19 3 24 1 0 73 29) #7=#A(t (25) (swank-backend::read-file swank-backend::filename :direction :input :external-format swank-backend::guess-external-format "latin-1" swank-backend::find-external-format :default open swank-backend::s file-length make-string string read-sequence length subseq close :abort t #Y(swank-backend::read-file nil nil (24 45 1 26 13 0 14 2 14 3 14 4 13 0 19 1 5 73 40 12 15 6 19 1 7 73 40 4 11 8 73 12 19 5 9 45 10 64 43 10 0 16 11 12 19 1 12 45 13 13 0 13 1 19 2 14 45 15 13 1 9 0 13 0 19 3 16 43 2 69 10 0 39 6 13 0 19 1 17 70 65 10 0 39 10 13 0 14 18 14 19 19 3 17 66 43 1 29) #7# #1# 3326) si::fset function "Return the entire contents of FILENAME as a string." si::set-documentation)) #1# 3326) #Y(si::bytecodes nil nil (1 0 16 1 1 0 16 2 76 39 5 8 256 52 0 15 0 15 3 15 4 19 3 5 1 0 73 29) #A(t (6) (swank-backend::*source-snippet-size* si::*make-special boundp variable "Maximum number of characters in a snippet of source code.
Snippets at the beginning of definitions are used to tell Emacs what
the definitions looks like, so that it can accurately find them by
text search." si::set-documentation)) #1# 3718) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 15 0 15 8 15 9 19 3 10 1 0 73 29) #8=#A(t (11) (swank-backend::read-snippet stream position file-position swank-backend::*source-snippet-size* swank-backend::read-upto-n-chars #Y(swank-backend::read-snippet nil nil (24 45 1 25 40 2 77 46 2 26 10 0 39 8 13 1 13 0 19 2 3 13 1 14 4 19 2 5 29) #8# #1# 3988) si::fset function "Read a string of upto *SOURCE-SNIPPET-SIZE* characters from STREAM.
If POSITION is given, set the STREAM's file position first." si::set-documentation)) #1# 3988) #Y(si::bytecodes nil nil (15 0 1 6 12 19 2 7 1 0 73 29) #9=#A(t (8) (swank-backend::read-snippet-from-string string position make-string-input-stream swank-backend::s swank-backend::read-snippet #Y(swank-backend::read-snippet-from-string nil nil (24 45 1 25 40 2 77 46 2 26 13 1 9 0 77 19 3 3 45 4 13 0 13 1 19 2 5 43 1 29) #9# #1# 4330) si::fset)) #1# 4330) #Y(si::bytecodes nil nil (15 0 1 10 12 19 2 11 1 0 73 29) #10=#A(t (12) (swank-backend::skip-comments-and-whitespace stream peek-char #\  #\Tab #\Newline #\Page read-char #\; read-line #Y(swank-backend::skip-comments-and-whitespace nil nil (24 45 1 26 77 13 0 19 2 2 41 3 13 41 4 10 41 5 7 41 5 4 42 6 13 13 0 19 1 7 13 0 19 1 0 38 18 42 8 13 13 0 19 1 9 13 0 19 1 0 38 3 75 73 29) #10# #1# 4464) si::fset)) #1# 4464) #Y(si::bytecodes nil nil (15 0 1 8 12 19 2 9 15 0 15 10 15 11 19 3 12 1 0 73 29) #11=#A(t (13) (swank-backend::read-upto-n-chars stream swank-backend::n make-string string read-sequence swank-backend::chars subseq #Y(swank-backend::read-upto-n-chars nil nil (24 45 1 24 45 2 26 13 0 19 1 3 45 4 13 0 13 2 19 2 5 45 6 13 1 9 0 13 0 19 3 7 43 2 29) #11# #1# 4746) si::fset function "Return a string of upto N chars from STREAM." si::set-documentation)) #1# 4746))
